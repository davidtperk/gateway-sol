{
  "address": "0x567A3f90b28f9273796ca6f0545BBA5701F4C4dD",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "_asset",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_selectorHash",
          "type": "bytes32"
        }
      ],
      "name": "LogAssetUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "to",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "burnNonce",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes",
          "name": "indexedTo",
          "type": "bytes"
        }
      ],
      "name": "LogBurn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "recipientAddress",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "recipientChain",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "recipientPayload",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "burnNonce",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "recipientAddressIndexed",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "recipientChainIndexed",
          "type": "string"
        }
      ],
      "name": "LogBurnToChain",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "_chain",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_selectorHash",
          "type": "bytes32"
        }
      ],
      "name": "LogChainUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "sigHash",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "nHash",
          "type": "bytes32"
        }
      ],
      "name": "LogMint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_newPreviousGateway",
          "type": "address"
        }
      ],
      "name": "LogPreviousGatewayUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract ISignatureVerifier",
          "name": "_newSignatureVerifier",
          "type": "address"
        }
      ],
      "name": "LogSignatureVerifierUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_newToken",
          "type": "address"
        }
      ],
      "name": "LogTokenUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "chain_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "asset_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "signatureVerifier_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        }
      ],
      "name": "__GatewayStateManager_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "chain_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "asset_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "signatureVerifier_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "__MintGateway_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "recipient_",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "caller_",
          "type": "address"
        }
      ],
      "name": "_burnFromPreviousGateway",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "pHash_",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "nHash_",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "sig_",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "caller_",
          "type": "address"
        }
      ],
      "name": "_mintFromPreviousGateway",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "_status",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "recipient_",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "recipient_",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "recipientAddress_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "recipientChain_",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "recipientPayload_",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "burnWithPayload",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chain",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "pHash_",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "nHash_",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "sig_",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextN",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "previousGateway",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "selectorHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "signatureVerifier",
      "outputs": [
        {
          "internalType": "contract ISignatureVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash_",
          "type": "bytes32"
        }
      ],
      "name": "status",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nextTokenOwner_",
          "type": "address"
        }
      ],
      "name": "transferTokenOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "nextAsset_",
          "type": "string"
        }
      ],
      "name": "updateAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "nextChain_",
          "type": "string"
        }
      ],
      "name": "updateChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nextPreviousGateway_",
          "type": "address"
        }
      ],
      "name": "updatePreviousGateway",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISignatureVerifier",
          "name": "nextSignatureVerifier_",
          "type": "address"
        }
      ],
      "name": "updateSignatureVerifier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nextToken_",
          "type": "address"
        }
      ],
      "name": "updateToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x41e683dd59e3ac4bb781347a39b4f8e3a647592d0fda9b2e7acc599c4e603565",
  "receipt": {
    "to": "0x2222229fb3318A6375FA78fd299A9a42aC6A8fbF",
    "from": "0xD5B5b26521665Cb37623DCA0E49c553b41dbF076",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "3250118",
    "logsBloom": "0x
    "blockHash": "0xe7e6b33bed376b3026c59a62a97d6316d68fe2c85cc8a617cf2294787ab790c2",
    "transactionHash": "0x41e683dd59e3ac4bb781347a39b4f8e3a647592d0fda9b2e7acc599c4e603565",
    "logs": [],
    "blockNumber": 12115799,
    "cumulativeGasUsed": "3250118",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "cd16daf0061bcc045fc96aa81722133b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_asset\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_selectorHash\",\"type\":\"bytes32\"}],\"name\":\"LogAssetUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"to\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"burnNonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"indexedTo\",\"type\":\"bytes\"}],\"name\":\"LogBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"recipientAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"recipientChain\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"recipientPayload\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"burnNonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"recipientAddressIndexed\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"recipientChainIndexed\",\"type\":\"string\"}],\"name\":\"LogBurnToChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_chain\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_selectorHash\",\"type\":\"bytes32\"}],\"name\":\"LogChainUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sigHash\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"nHash\",\"type\":\"bytes32\"}],\"name\":\"LogMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newPreviousGateway\",\"type\":\"address\"}],\"name\":\"LogPreviousGatewayUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISignatureVerifier\",\"name\":\"_newSignatureVerifier\",\"type\":\"address\"}],\"name\":\"LogSignatureVerifierUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newToken\",\"type\":\"address\"}],\"name\":\"LogTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"chain_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"asset_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"signatureVerifier_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"__GatewayStateManager_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"chain_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"asset_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"signatureVerifier_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"__MintGateway_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"recipient_\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"caller_\",\"type\":\"address\"}],\"name\":\"_burnFromPreviousGateway\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"pHash_\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nHash_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"sig_\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"caller_\",\"type\":\"address\"}],\"name\":\"_mintFromPreviousGateway\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"_status\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"recipient_\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"recipient_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"recipientAddress_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"recipientChain_\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"recipientPayload_\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"burnWithPayload\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chain\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"pHash_\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nHash_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"sig_\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousGateway\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selectorHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signatureVerifier\",\"outputs\":[{\"internalType\":\"contract ISignatureVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash_\",\"type\":\"bytes32\"}],\"name\":\"status\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nextTokenOwner_\",\"type\":\"address\"}],\"name\":\"transferTokenOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nextAsset_\",\"type\":\"string\"}],\"name\":\"updateAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nextChain_\",\"type\":\"string\"}],\"name\":\"updateChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nextPreviousGateway_\",\"type\":\"address\"}],\"name\":\"updatePreviousGateway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISignatureVerifier\",\"name\":\"nextSignatureVerifier_\",\"type\":\"address\"}],\"name\":\"updateSignatureVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nextToken_\",\"type\":\"address\"}],\"name\":\"updateToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"LogBurn(bytes,uint256,uint256,bytes)\":{\"details\":\"Once `LogBurnToChain` is enabled on mainnet, LogBurn may be replaced by LogBurnToChain with empty payload and chain fields.For backwards compatibility, `to` is bytes instead of a string.\"},\"LogMint(address,uint256,uint256,bytes32)\":{\"details\":\"For backwards compatiblity reasons, the sigHash is cast to a uint256.\"}},\"kind\":\"dev\",\"methods\":{\"burnWithPayload(string,string,bytes,uint256)\":{\"params\":{\"amount_\":\"The amount of the token being locked, in the asset's        smallest unit. (e.g. satoshis for BTC)\",\"recipientAddress_\":\"The address to which the locked assets will be        minted to. The address should be a plain-text address, without        decoding to bytes first.\",\"recipientChain_\":\"The target chain to which the assets are being        moved to.\",\"recipientPayload_\":\"An optional payload to be passed to the        recipient chain along with the address.\"}},\"mint(bytes32,uint256,bytes32,bytes)\":{\"params\":{\"amount_\":\"The amount of the token being minted, in its smallest        value. (e.g. satoshis for BTC).\",\"nHash_\":\"(nonce hash) The hash of the nonce, amount and pHash.\",\"pHash_\":\"(payload hash) The hash of the payload associated with the        mint.\",\"sig_\":\"The signature of the hash of the following values:        (pHash, amount, msg.sender, nHash), signed by the mintAuthority.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateAsset(string)\":{\"params\":{\"nextAsset_\":\"The new asset.\"}},\"updateChain(string)\":{\"params\":{\"nextChain_\":\"The new chain.\"}},\"updatePreviousGateway(address)\":{\"params\":{\"nextPreviousGateway_\":\"The new gateway contract's address.\"}},\"updateSignatureVerifier(address)\":{\"params\":{\"nextSignatureVerifier_\":\"The new verifier contract address.\"}},\"updateToken(address)\":{\"params\":{\"nextToken_\":\"The new ERC20 token contract's address.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"_status(bytes32)\":{\"notice\":\"Each signature can only be seen once.\"},\"burn(bytes,uint256)\":{\"notice\":\"Same as `burn` with the recipient parameter being `bytes` instead of a `string`. For backwards compatibility with the MintGatewayV2.\"},\"burn(string,uint256)\":{\"notice\":\"burn is a convenience function that is equivalent to calling         `burnWithPayload` with an empty payload and chain, releasing         the asset to the native chain.\"},\"burnWithPayload(string,string,bytes,uint256)\":{\"notice\":\"burnWithPayload allows minted assets to be released to their         native chain, or to another chain as specified by the chain and         payload parameters.         WARNING: Burning with invalid parameters can cause the funds to         become unrecoverable.\"},\"mint(bytes32,uint256,bytes32,bytes)\":{\"notice\":\"mint verifies a mint approval signature from RenVM and creates         tokens after taking a fee for the `_feeRecipient`.\"},\"token()\":{\"notice\":\"Each Gateway is tied to a specific asset.\"},\"transferTokenOwnership(address)\":{\"notice\":\"Allow the owner to update the owner of the RenERC20 token.\"},\"updateAsset(string)\":{\"notice\":\"Allow the owner to update the asset.\"},\"updateChain(string)\":{\"notice\":\"Allow the owner to update the chain.\"},\"updatePreviousGateway(address)\":{\"notice\":\"Allow the owner to update the previous gateway used for backwards compatibility.\"},\"updateSignatureVerifier(address)\":{\"notice\":\"Allow the owner to update the signature verifier contract.\"},\"updateToken(address)\":{\"notice\":\"Allow the owner to update the ERC20 token contract.\"}},\"notice\":\"Gateway handles verifying mint and burn requests. A mintAuthority approves new assets to be minted by providing a digital signature. An owner of an asset can request for it to be burnt.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Gateways/MintGateway.sol\":\"MintGatewayV3\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x891fbf39ac5b9524f417db912d33684f239195a0fc5c11db439659676e51aab6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf449ca0a763d4b1b4462cf8706857074492f324020a2b9d099181b5383055ad3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x6795c369a4eefa78468e38966f7851fbc2dda5e5b9ccd3fa2b45970e2e4d3abd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xca2eb23a188f213d914fad982985d07e491dbc9960a387d4469bfce5c48911b1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            Address.functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcbccf806d646bd9e2594650917208245d45998b887d5fc914de424247f5f9f9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0x8ddea9f930f26e588ea606f44c90d2623560c908e38614a03a4ca78aea8f9202\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x5615339d191e77be7e46319b67856f9355786f705b7b3c4a7237ab70c1864ab1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable ERC1967Proxy(_logic, _data) {\\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeToAndCall(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\",\"keccak256\":\"0x2bf89a0dae89f861c5e8013478e650e918d98d376e75393867ccec88b0bf2b90\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5d15d280d1f868f59a8264dc73f7ea8c51f10d78aac864b2f2ad29412d187ff5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbc991a1cf357ce19480831a40792c814238a3b5458134703682abd8aa39719fb\",\"license\":\"MIT\"},\"src/Gateways/MintGateway.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport {RenAssetV2} from \\\"../RenAsset/RenAsset.sol\\\";\\nimport {GatewayStateV3, GatewayStateManagerV3} from \\\"./common/GatewayState.sol\\\";\\nimport {RenVMHashes} from \\\"./common/RenVMHashes.sol\\\";\\n\\n/// @notice Gateway handles verifying mint and burn requests. A mintAuthority\\n/// approves new assets to be minted by providing a digital signature. An owner\\n/// of an asset can request for it to be burnt.\\ncontract MintGatewayV3 is Initializable, OwnableUpgradeable, GatewayStateV3, GatewayStateManagerV3 {\\n    /// @dev For backwards compatiblity reasons, the sigHash is cast to a\\n    /// uint256.\\n    event LogMint(address indexed to, uint256 amount, uint256 indexed sigHash, bytes32 indexed nHash);\\n\\n    /// @dev Once `LogBurnToChain` is enabled on mainnet, LogBurn may be\\n    /// replaced by LogBurnToChain with empty payload and chain fields.\\n    /// @dev For backwards compatibility, `to` is bytes instead of a string.\\n    event LogBurn(\\n        bytes to,\\n        uint256 amount,\\n        uint256 indexed burnNonce,\\n        // Indexed versions of previous parameters.\\n        bytes indexed indexedTo\\n    );\\n    event LogBurnToChain(\\n        string recipientAddress,\\n        string recipientChain,\\n        bytes recipientPayload,\\n        uint256 amount,\\n        uint256 indexed burnNonce,\\n        // Indexed versions of previous parameters.\\n        string indexed recipientAddressIndexed,\\n        string indexed recipientChainIndexed\\n    );\\n\\n    function __MintGateway_init(\\n        string calldata chain_,\\n        string calldata asset_,\\n        address signatureVerifier_,\\n        address token\\n    ) public initializer {\\n        OwnableUpgradeable.__Ownable_init();\\n        GatewayStateManagerV3.__GatewayStateManager_init(chain_, asset_, signatureVerifier_, token);\\n    }\\n\\n    // Governance functions ////////////////////////////////////////////////////\\n\\n    /// @notice Allow the owner to update the owner of the RenERC20 token.\\n    function transferTokenOwnership(address nextTokenOwner_) public onlyOwner {\\n        RenAssetV2(GatewayStateV3.token).transferOwnership(address(nextTokenOwner_));\\n    }\\n\\n    // PUBLIC FUNCTIONS ////////////////////////////////////////////////////////\\n\\n    /// @notice mint verifies a mint approval signature from RenVM and creates\\n    ///         tokens after taking a fee for the `_feeRecipient`.\\n    ///\\n    /// @param pHash_ (payload hash) The hash of the payload associated with the\\n    ///        mint.\\n    /// @param amount_ The amount of the token being minted, in its smallest\\n    ///        value. (e.g. satoshis for BTC).\\n    /// @param nHash_ (nonce hash) The hash of the nonce, amount and pHash.\\n    /// @param sig_ The signature of the hash of the following values:\\n    ///        (pHash, amount, msg.sender, nHash), signed by the mintAuthority.\\n    function mint(\\n        bytes32 pHash_,\\n        uint256 amount_,\\n        bytes32 nHash_,\\n        bytes memory sig_\\n    ) public returns (uint256) {\\n        return _mint(pHash_, amount_, nHash_, sig_, _msgSender());\\n    }\\n\\n    /// @notice burnWithPayload allows minted assets to be released to their\\n    ///         native chain, or to another chain as specified by the chain and\\n    ///         payload parameters.\\n    ///         WARNING: Burning with invalid parameters can cause the funds to\\n    ///         become unrecoverable.\\n    ///\\n    /// @param recipientAddress_ The address to which the locked assets will be\\n    ///        minted to. The address should be a plain-text address, without\\n    ///        decoding to bytes first.\\n    /// @param recipientChain_ The target chain to which the assets are being\\n    ///        moved to.\\n    /// @param recipientPayload_ An optional payload to be passed to the\\n    ///        recipient chain along with the address.\\n    /// @param amount_ The amount of the token being locked, in the asset's\\n    ///        smallest unit. (e.g. satoshis for BTC)\\n    function burnWithPayload(\\n        string memory recipientAddress_,\\n        string memory recipientChain_,\\n        bytes memory recipientPayload_,\\n        uint256 amount_\\n    ) public returns (uint256) {\\n        return _burnWithPayload(recipientAddress_, recipientChain_, recipientPayload_, amount_, _msgSender());\\n    }\\n\\n    /// @notice burn is a convenience function that is equivalent to calling\\n    ///         `burnWithPayload` with an empty payload and chain, releasing\\n    ///         the asset to the native chain.\\n    function burn(string memory recipient_, uint256 amount_) public virtual returns (uint256) {\\n        return _burnWithPayload(recipient_, \\\"\\\", \\\"\\\", amount_, _msgSender());\\n    }\\n\\n    /// Same as `burn` with the recipient parameter being `bytes` instead of\\n    /// a `string`. For backwards compatibility with the MintGatewayV2.\\n    function burn(bytes memory recipient_, uint256 amount_) public virtual returns (uint256) {\\n        return _burnWithPayload(string(recipient_), \\\"\\\", \\\"\\\", amount_, _msgSender());\\n    }\\n\\n    function _mintFromPreviousGateway(\\n        bytes32 pHash_,\\n        uint256 amount_,\\n        bytes32 nHash_,\\n        bytes memory sig_,\\n        address caller_\\n    ) public onlyPreviousGateway returns (uint256) {\\n        return _mint(pHash_, amount_, nHash_, sig_, caller_);\\n    }\\n\\n    function _burnFromPreviousGateway(\\n        bytes memory recipient_,\\n        uint256 amount_,\\n        address caller_\\n    ) public onlyPreviousGateway returns (uint256) {\\n        return _burnWithPayload(string(recipient_), \\\"\\\", \\\"\\\", amount_, caller_);\\n    }\\n\\n    function nextN() public view returns (uint256) {\\n        return GatewayStateV3.eventNonce;\\n    }\\n\\n    // INTERNAL FUNCTIONS //////////////////////////////////////////////////////\\n\\n    function _mint(\\n        bytes32 pHash_,\\n        uint256 amount_,\\n        bytes32 nHash_,\\n        bytes memory sig_,\\n        address caller_\\n    ) internal returns (uint256) {\\n        // Calculate the hash signed by RenVM. This binds the payload hash,\\n        // amount, caller and nonce hash to the signature.\\n        bytes32 sigHash = RenVMHashes.calculateSigHash(pHash_, amount_, GatewayStateV3.selectorHash, caller_, nHash_);\\n\\n        // Check that the signature hasn't been redeemed.\\n        require(status(sigHash) == false && status(nHash_) == false, \\\"MintGateway: signature already spent\\\");\\n\\n        // If the signature fails verification, throw an error.\\n        if (!GatewayStateV3.signatureVerifier.verifySignature(sigHash, sig_)) {\\n            revert(\\\"MintGateway: invalid signature\\\");\\n        }\\n\\n        // Update the status for both the signature hash and the nHash.\\n        _status[sigHash] = true;\\n        _status[nHash_] = true;\\n\\n        // Mint the amount to the caller.\\n        RenAssetV2(GatewayStateV3.token).mint(caller_, amount_);\\n\\n        // Emit mint log. For backwards compatiblity reasons, the sigHash is\\n        // cast to a uint256.\\n        emit LogMint(caller_, amount_, uint256(sigHash), nHash_);\\n\\n        return amount_;\\n    }\\n\\n    /// @notice burn destroys tokens after taking a fee for the `_feeRecipient`,\\n    ///         allowing the associated assets to be released on their native\\n    ///         chain.\\n    ///\\n    /// @param recipientAddress_ The address to which the locked assets will be\\n    ///        minted to. The address should be a plain-text address, without\\n    ///        decoding to bytes first.\\n    /// @param recipientChain_ The target chain to which the assets are being\\n    ///        moved to.\\n    /// @param recipientPayload_ An optional payload to be passed to the\\n    ///        recipient chain along with the address.\\n    /// @param amount_ The amount of the token being locked, in the asset's\\n    ///        smallest unit. (e.g. satoshis for BTC)\\n    function _burnWithPayload(\\n        string memory recipientAddress_,\\n        string memory recipientChain_,\\n        bytes memory recipientPayload_,\\n        uint256 amount_,\\n        address caller_\\n    ) internal returns (uint256) {\\n        // The recipient must not be empty. Better validation is possible,\\n        // but would need to be customized for each destination ledger.\\n        require(bytes(recipientAddress_).length != 0, \\\"MintGateway: to address is empty\\\");\\n\\n        // Burn the tokens. If the user doesn't have enough tokens, this will\\n        // throw.\\n        RenAssetV2(GatewayStateV3.token).burn(caller_, amount_);\\n\\n        uint256 burnNonce = GatewayStateV3.eventNonce;\\n\\n        if (bytes(recipientChain_).length > 0 || recipientPayload_.length > 0) {\\n            emit LogBurnToChain(\\n                recipientAddress_,\\n                recipientChain_,\\n                recipientPayload_,\\n                amount_,\\n                burnNonce,\\n                recipientAddress_,\\n                recipientChain_\\n            );\\n        } else {\\n            emit LogBurn(bytes(recipientAddress_), amount_, burnNonce, bytes(recipientAddress_));\\n        }\\n\\n        GatewayStateV3.eventNonce = burnNonce + 1;\\n\\n        return amount_;\\n    }\\n}\\n\",\"keccak256\":\"0x6461a12c4f08239b7ec77005c7b3c1dbbec6657606a6cb1600479136ffd32a92\",\"license\":\"GPL-3.0\"},\"src/Gateways/common/GatewayState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport {ISignatureVerifier} from \\\"./SignatureVerifier.sol\\\";\\nimport {ValidString} from \\\"../../libraries/ValidString.sol\\\";\\nimport {RenVMHashes} from \\\"./RenVMHashes.sol\\\";\\n\\ncontract GatewayStateV3 {\\n    // Selector hash details.\\n    string public chain;\\n    string public asset;\\n    bytes32 public selectorHash;\\n\\n    /// @notice Each signature can only be seen once.\\n    mapping(bytes32 => bool) public _status;\\n\\n    /// @notice Each Gateway is tied to a specific asset.\\n    address public token;\\n\\n    ISignatureVerifier public signatureVerifier;\\n\\n    address public previousGateway;\\n\\n    uint256 internal eventNonce;\\n\\n    uint256[43] private __gap;\\n}\\n\\n/// @notice Gateway handles verifying mint and burn requests. A mintAuthority\\n/// approves new assets to be minted by providing a digital signature. An owner\\n/// of an asset can request for it to be burnt.\\ncontract GatewayStateManagerV3 is Initializable, OwnableUpgradeable, GatewayStateV3 {\\n    event LogChainUpdated(string _chain, bytes32 _selectorHash);\\n    event LogAssetUpdated(string _asset, bytes32 _selectorHash);\\n    event LogSignatureVerifierUpdated(ISignatureVerifier indexed _newSignatureVerifier);\\n    event LogTokenUpdated(address indexed _newToken);\\n    event LogPreviousGatewayUpdated(address indexed _newPreviousGateway);\\n\\n    function __GatewayStateManager_init(\\n        string calldata chain_,\\n        string calldata asset_,\\n        address signatureVerifier_,\\n        address token_\\n    ) public initializer {\\n        __Ownable_init();\\n        updateChain(chain_);\\n        updateAsset(asset_);\\n        updateSignatureVerifier(ISignatureVerifier(signatureVerifier_));\\n        updateToken(token_);\\n    }\\n\\n    // GOVERNANCE //////////////////////////////////////////////////////////////\\n\\n    /// @notice Allow the owner to update the chain.\\n    ///\\n    /// @param nextChain_ The new chain.\\n    function updateChain(string calldata nextChain_) public onlyOwner {\\n        require(ValidString.isNotEmpty(nextChain_), \\\"Gateway: chain can't be empty\\\");\\n        require(ValidString.isAlphanumeric(nextChain_), \\\"Gateway: symbol must be alphanumeric\\\");\\n\\n        chain = nextChain_;\\n        selectorHash = RenVMHashes.calculateSelectorHash(asset, chain);\\n        emit LogChainUpdated(chain, selectorHash);\\n    }\\n\\n    /// @notice Allow the owner to update the asset.\\n    ///\\n    /// @param nextAsset_ The new asset.\\n    function updateAsset(string calldata nextAsset_) public onlyOwner {\\n        require(ValidString.isNotEmpty(nextAsset_), \\\"Gateway: asset can't be empty\\\");\\n        require(ValidString.isAlphanumeric(nextAsset_), \\\"Gateway: symbol must be alphanumeric\\\");\\n\\n        asset = nextAsset_;\\n        selectorHash = RenVMHashes.calculateSelectorHash(asset, chain);\\n        emit LogAssetUpdated(asset, selectorHash);\\n    }\\n\\n    /// @notice Allow the owner to update the signature verifier contract.\\n    ///\\n    /// @param nextSignatureVerifier_ The new verifier contract address.\\n    function updateSignatureVerifier(ISignatureVerifier nextSignatureVerifier_) public onlyOwner {\\n        require(address(nextSignatureVerifier_) != address(0x0), \\\"Gateway: invalid signature verifier\\\");\\n        signatureVerifier = nextSignatureVerifier_;\\n        emit LogSignatureVerifierUpdated(nextSignatureVerifier_);\\n    }\\n\\n    /// @notice Allow the owner to update the ERC20 token contract.\\n    ///\\n    /// @param nextToken_ The new ERC20 token contract's address.\\n    function updateToken(address nextToken_) public onlyOwner {\\n        require(address(nextToken_) != address(0x0), \\\"Gateway: invalid token\\\");\\n        token = nextToken_;\\n        emit LogTokenUpdated(nextToken_);\\n    }\\n\\n    /// @notice Allow the owner to update the previous gateway used for\\n    /// backwards compatibility.\\n    ///\\n    /// @param nextPreviousGateway_ The new gateway contract's address.\\n    function updatePreviousGateway(address nextPreviousGateway_) public onlyOwner {\\n        require(address(nextPreviousGateway_) != address(0x0), \\\"Gateway: invalid address\\\");\\n        previousGateway = nextPreviousGateway_;\\n        emit LogPreviousGatewayUpdated(nextPreviousGateway_);\\n    }\\n\\n    // PREVIOUS GATEWAY ////////////////////////////////////////////////////////\\n\\n    modifier onlyPreviousGateway() {\\n        // If there's no previous gateway, the second require should also fail,\\n        // but this require will provide a more informative reason.\\n        require(previousGateway != address(0x0), \\\"Gateway: no previous gateway\\\");\\n\\n        require(_msgSender() == previousGateway, \\\"Gateway: not authorized\\\");\\n        _;\\n    }\\n\\n    function status(bytes32 hash_) public view returns (bool) {\\n        if (_status[hash_]) {\\n            return true;\\n        }\\n\\n        if (previousGateway != address(0x0)) {\\n            return GatewayStateManagerV3(previousGateway)._status(hash_);\\n        }\\n\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0xcc21258f481c8c6cddd8f31b3041d918cdd85870a0994d143b3bb8d95b58bb61\",\"license\":\"GPL-3.0\"},\"src/Gateways/common/RenVMHashes.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nlibrary RenVMHashes {\\n    /// @notice calculateSelectorHash calculates and hashes the selector hash,\\n    ///         which is formatted as `ASSET/toCHAIN`.\\n    function calculateSelectorHash(string memory assetSymbol_, string memory chain_) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(assetSymbol_, \\\"/to\\\", chain_));\\n    }\\n\\n    /// @notice calculateSigHash hashes the parameters to reconstruct the data\\n    ///         signed by RenVM.\\n    function calculateSigHash(\\n        bytes32 pHash_,\\n        uint256 amount_,\\n        bytes32 selectorHash_,\\n        address to_,\\n        bytes32 nHash_\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(pHash_, amount_, selectorHash_, to_, nHash_));\\n    }\\n}\\n\",\"keccak256\":\"0xef431ce590973575b1b2d5533fa0dc44fff01644e8e320313045097747f3a461\",\"license\":\"GPL-3.0\"},\"src/Gateways/common/SignatureVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {TransparentUpgradeableProxy} from \\\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\\\";\\n\\ninterface ISignatureVerifier {\\n    function verifySignature(bytes32 _sigHash, bytes memory _sig) external view returns (bool);\\n}\\n\\ncontract SignatureVerifierStateV1 {\\n    address public mintAuthority;\\n    uint256[49] private __gap;\\n}\\n\\n/// @notice Gateway handles verifying mint and burn requests. A mintAuthority\\n/// approves new assets to be minted by providing a digital signature. An owner\\n/// of an asset can request for it to be burnt.\\ncontract SignatureVerifierV1 is Initializable, OwnableUpgradeable, SignatureVerifierStateV1 {\\n    event LogMintAuthorityUpdated(address indexed _newMintAuthority);\\n\\n    function __SignatureVerifier_init(address mintAuthority_) public initializer {\\n        __Ownable_init();\\n        updateMintAuthority(mintAuthority_);\\n    }\\n\\n    // GOVERNANCE //////////////////////////////////////////////////////////////\\n\\n    modifier onlyOwnerOrMintAuthority() {\\n        require(_msgSender() == owner() || _msgSender() == mintAuthority, \\\"SignatureVerifier: not authorized\\\");\\n        _;\\n    }\\n\\n    /// @notice Allow the owner or mint authority to update the mint authority.\\n    ///\\n    /// @param nextMintAuthority_ The new mint authority address.\\n    function updateMintAuthority(address nextMintAuthority_) public onlyOwnerOrMintAuthority {\\n        require(nextMintAuthority_ != address(0), \\\"SignatureVerifier: mintAuthority cannot be set to address zero\\\");\\n        mintAuthority = nextMintAuthority_;\\n        emit LogMintAuthorityUpdated(mintAuthority);\\n    }\\n\\n    /// @notice verifySignature checks the the provided signature matches the\\n    /// provided parameters.\\n    function verifySignature(bytes32 _sigHash, bytes memory _sig) public view returns (bool) {\\n        require(mintAuthority != address(0x0), \\\"SignatureVerifier: mintAuthority not initialized\\\");\\n        return mintAuthority == ECDSA.recover(_sigHash, _sig);\\n    }\\n}\\n\\ncontract SignatureVerifierProxy is TransparentUpgradeableProxy {\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable TransparentUpgradeableProxy(_logic, admin_, _data) {}\\n}\\n\",\"keccak256\":\"0x5cc252af957fc5aeddf153e64ff6b1dc0261e9d82a08a6113d2f51cff6c8ecf1\",\"license\":\"GPL-3.0\"},\"src/RenAsset/ERC20WithPermit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport {ERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract ERC20WithPermitState {\\n    mapping(address => uint256) public nonces;\\n\\n    // If the token is redeployed, the version is increased to prevent a permit\\n    // signature being used on both token instances.\\n    string public version;\\n\\n    // --- EIP712 niceties ---\\n    bytes32 public DOMAIN_SEPARATOR;\\n    // PERMIT_TYPEHASH is the value returned from\\n    // keccak256(\\\"Permit(address holder,address spender,uint256 nonce,uint256 expiry,bool allowed)\\\")\\n    bytes32 public constant PERMIT_TYPEHASH = 0xea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb;\\n\\n    uint256[48] private __gap;\\n}\\n\\n/// @notice Taken from the DAI token.\\ncontract ERC20WithPermit is Initializable, ERC20Upgradeable, ERC20WithPermitState {\\n    function __ERC20WithPermit_init(\\n        uint256 _chainId,\\n        string memory _version,\\n        string memory _name,\\n        string memory _symbol\\n    ) public initializer {\\n        __ERC20_init(_name, _symbol);\\n        version = _version;\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                keccak256(bytes(name())),\\n                keccak256(bytes(version)),\\n                _chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    // --- Approve by signature ---\\n    function permit(\\n        address holder,\\n        address spender,\\n        uint256 nonce,\\n        uint256 expiry,\\n        bool allowed,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR,\\n                keccak256(abi.encode(PERMIT_TYPEHASH, holder, spender, nonce, expiry, allowed))\\n            )\\n        );\\n\\n        require(holder != address(0), \\\"ERC20WithRate: address must not be 0x0\\\");\\n        require(holder == ecrecover(digest, v, r, s), \\\"ERC20WithRate: invalid signature\\\");\\n        require(expiry == 0 || block.timestamp <= expiry, \\\"ERC20WithRate: permit has expired\\\");\\n        require(nonce == nonces[holder]++, \\\"ERC20WithRate: invalid nonce\\\");\\n        uint256 amount = allowed ? uint256(int256(-1)) : 0;\\n        _approve(holder, spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x239a01febb82bdc95dc02dc06b2f8e18a560a78404e65c19f4ad50ede01e9244\",\"license\":\"GPL-3.0\"},\"src/RenAsset/RenAsset.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {ERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport {StringsUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\n\\nimport {ERC20WithPermit} from \\\"./ERC20WithPermit.sol\\\";\\n\\nimport \\\"./ERC20WithPermit.sol\\\";\\n\\ncontract RenAssetStateV2 {\\n    string public constant NAME = \\\"RenAsset\\\";\\n\\n    uint8 internal _decimals;\\n\\n    uint256[48] private __gap;\\n}\\n\\n/// @notice RenERC20 represents a digital asset that has been bridged on to\\n/// the Ethereum ledger. It exposes mint and burn functions that can only be\\n/// called by it's associated Gateway contract.\\ncontract RenAssetV2 is Initializable, ERC20Upgradeable, ERC20WithPermit, OwnableUpgradeable, RenAssetStateV2 {\\n    /* solium-disable-next-line no-empty-blocks */\\n    function __RenAsset_init(\\n        uint256 chainId_,\\n        string memory version_,\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) public initializer {\\n        ERC20Upgradeable.__ERC20_init(name_, symbol_);\\n        ERC20WithPermit.__ERC20WithPermit_init(chainId_, version_, name_, symbol_);\\n        OwnableUpgradeable.__Ownable_init();\\n        RenAssetStateV2._decimals = decimals_;\\n    }\\n\\n    function decimals() public view override returns (uint8) {\\n        return RenAssetStateV2._decimals;\\n    }\\n\\n    /// @notice mint can only be called by the tokens' associated Gateway\\n    /// contract. See Gateway's mint function instead.\\n    function mint(address _to, uint256 _amount) public onlyOwner {\\n        _mint(_to, _amount);\\n    }\\n\\n    /// @notice burn can only be called by the tokens' associated Gateway\\n    /// contract. See Gateway's burn functions instead.\\n    function burn(address _from, uint256 _amount) public onlyOwner {\\n        _burn(_from, _amount);\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        // Disallow sending tokens to the ERC20 contract address - a common\\n        // mistake caused by the Ethereum transaction's `to` needing to be\\n        // the token's address.\\n        require(recipient != address(this), \\\"RenERC20: can't transfer to token address\\\");\\n        require(\\n            balanceOf(_msgSender()) >= amount,\\n            string(\\n                abi.encodePacked(\\n                    \\\"ERC20: transfer from \\\",\\n                    StringsUpgradeable.toHexString(uint160(_msgSender()), 20),\\n                    \\\" amount exceeds allowance\\\"\\n                )\\n            )\\n        );\\n        return super.transfer(recipient, amount);\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        // Disallow sending tokens to the ERC20 contract address (see comment\\n        // in `transfer`).\\n        require(recipient != address(this), \\\"RenERC20: can't transfer to token address\\\");\\n        return super.transferFrom(sender, recipient, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x548d852eba06ae9d4730c0d2d52969685541f4201d6fd840cc4bd2553d5a8627\",\"license\":\"GPL-3.0\"},\"src/libraries/ValidString.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nlibrary ValidString {\\n    function isAlphanumeric(string memory _string) internal pure returns (bool) {\\n        for (uint256 i = 0; i < bytes(_string).length; i++) {\\n            uint8 char = uint8(bytes(_string)[i]);\\n            if (!((char >= 65 && char <= 90) || (char >= 97 && char <= 122) || (char >= 48 && char <= 57))) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function isNotEmpty(string memory _string) internal pure returns (bool) {\\n        return bytes(_string).length > 0;\\n    }\\n\\n    function isValidString(string memory _string) internal pure returns (bool) {\\n        return isAlphanumeric(_string) && isNotEmpty(_string);\\n    }\\n}\\n\",\"keccak256\":\"0x9ad61eb6d48c37d84cdbb98be3a0e577b94045ff018e3ce9b0af98b1dc64b3f7\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506139f5806100206000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c80637ad3def2116100de578063b48272cc11610097578063d489dc6c11610071578063d489dc6c14610493578063f2fde38b146104b1578063fc0c546a146104cd578063fde919f6146104eb5761018e565b8063b48272cc14610429578063c54216b414610459578063c763e5a1146104755761018e565b80637ad3def21461035557806385e1fd34146103715780638da5cb5b146103a1578063976e7a3e146103bf578063aa4df9ad146103ef578063aae8fdf01461040d5761018e565b80633f1264ef1161014b57806352ad0d5e1161012557806352ad0d5e146102cf5780635667981b146102ff5780635f4e23951461031b578063715018a61461034b5761018e565b80633f1264ef146102675780634a5bca8a146102975780635266ba0c146102b35761018e565b8063159ab14d1461019357806320506642146101c357806321e6b53d146101df57806329762976146101fb57806338463cff1461021957806338d52e0f14610249575b600080fd5b6101ad60048036038101906101a8919061267f565b610509565b6040516101ba9190613259565b60405180910390f35b6101dd60048036038101906101d891906128de565b610529565b005b6101f960048036038101906101f491906125f8565b610636565b005b610203610742565b6040516102109190612f04565b60405180910390f35b610233600480360381019061022e9190612799565b610748565b6040516102409190613259565b60405180910390f35b610251610784565b60405161025e9190612fed565b60405180910390f35b610281600480360381019061027c9190612702565b610812565b60405161028e9190613259565b60405180910390f35b6102b160048036038101906102ac91906128de565b610954565b005b6102cd60048036038101906102c891906125f8565b610a49565b005b6102e960048036038101906102e49190612652565b610bbc565b6040516102f69190612ee9565b60405180910390f35b61031960048036038101906103149190612864565b610cff565b005b610335600480360381019061033091906127f5565b610e72565b6040516103429190613259565b60405180910390f35b610353610fd0565b005b61036f600480360381019061036a91906125f8565b611058565b005b61038b60048036038101906103869190612652565b6111cb565b6040516103989190612ee9565b60405180910390f35b6103a96111eb565b6040516103b69190612ea5565b60405180910390f35b6103d960048036038101906103d49190612985565b611215565b6040516103e69190613259565b60405180910390f35b6103f7611235565b6040516104049190613259565b60405180910390f35b61042760048036038101906104229190612891565b61123f565b005b610443600480360381019061043e9190612a40565b611549565b6040516104509190613259565b60405180910390f35b610473600480360381019061046e9190612891565b611585565b005b61047d61188f565b60405161048a9190612fed565b60405180910390f35b61049b61191d565b6040516104a89190612ea5565b60405180910390f35b6104cb60048036038101906104c691906125f8565b611943565b005b6104d5611a3b565b6040516104e29190612ea5565b60405180910390f35b6104f3611a61565b6040516105009190612fd2565b60405180910390f35b600061051f8585858561051a611a87565b611a8f565b9050949350505050565b600060019054906101000a900460ff168061054f575060008054906101000a900460ff16155b61058e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058590613179565b60405180910390fd5b60008060019054906101000a900460ff1615905080156105de576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6105e6611d3d565b6105f0878761123f565b6105fa8585611585565b61060383610cff565b61060c82611058565b801561062d5760008060016101000a81548160ff0219169083151502179055505b50505050505050565b61063e611a87565b73ffffffffffffffffffffffffffffffffffffffff1661065c6111eb565b73ffffffffffffffffffffffffffffffffffffffff16146106b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a9906131b9565b60405180910390fd5b606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f2fde38b826040518263ffffffff1660e01b815260040161070d9190612ea5565b600060405180830381600087803b15801561072757600080fd5b505af115801561073b573d6000803e3d6000fd5b5050505050565b60675481565b600061077c83604051806020016040528060008152506040518060200160405280600081525085610777611a87565b611e26565b905092915050565b6066805461079190613490565b80601f01602080910402602001604051908101604052809291908181526020018280546107bd90613490565b801561080a5780601f106107df5761010080835404028352916020019161080a565b820191906000526020600020905b8154815290600101906020018083116107ed57829003601f168201915b505050505081565b60008073ffffffffffffffffffffffffffffffffffffffff16606b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156108a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089c906130f9565b60405180910390fd5b606b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108e6611a87565b73ffffffffffffffffffffffffffffffffffffffff161461093c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610933906131d9565b60405180910390fd5b6109498686868686611a8f565b905095945050505050565b600060019054906101000a900460ff168061097a575060008054906101000a900460ff16155b6109b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b090613179565b60405180910390fd5b60008060019054906101000a900460ff161590508015610a09576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610a11611d3d565b610a1f878787878787610529565b8015610a405760008060016101000a81548160ff0219169083151502179055505b50505050505050565b610a51611a87565b73ffffffffffffffffffffffffffffffffffffffff16610a6f6111eb565b73ffffffffffffffffffffffffffffffffffffffff1614610ac5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610abc906131b9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610b35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2c90613159565b60405180910390fd5b80606b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f092a7f3d3a91b47e57583d808f4454c082a9c49b2582f836f5a301e982a2d04d60405160405180910390a250565b60006068600083815260200190815260200160002060009054906101000a900460ff1615610bed5760019050610cfa565b600073ffffffffffffffffffffffffffffffffffffffff16606b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610cf557606b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166385e1fd34836040518263ffffffff1660e01b8152600401610c9e9190612f04565b60206040518083038186803b158015610cb657600080fd5b505afa158015610cca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cee9190612625565b9050610cfa565b600090505b919050565b610d07611a87565b73ffffffffffffffffffffffffffffffffffffffff16610d256111eb565b73ffffffffffffffffffffffffffffffffffffffff1614610d7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d72906131b9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610deb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de290613239565b60405180910390fd5b80606a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167fb57359628f7b44e9842ff204fb5700f84d8c4f9c3fc9dae13e7a1aab8ed164f760405160405180910390a250565b60008073ffffffffffffffffffffffffffffffffffffffff16606b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610f05576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610efc906130f9565b60405180910390fd5b606b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610f46611a87565b73ffffffffffffffffffffffffffffffffffffffff1614610f9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f93906131d9565b60405180910390fd5b610fc78460405180602001604052806000815250604051806020016040528060008152508686611e26565b90509392505050565b610fd8611a87565b73ffffffffffffffffffffffffffffffffffffffff16610ff66111eb565b73ffffffffffffffffffffffffffffffffffffffff161461104c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611043906131b9565b60405180910390fd5b6110566000611ff8565b565b611060611a87565b73ffffffffffffffffffffffffffffffffffffffff1661107e6111eb565b73ffffffffffffffffffffffffffffffffffffffff16146110d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110cb906131b9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611144576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113b90613139565b60405180910390fd5b80606960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f02dec22a3d1e8f9cdc0c7cd17ecee187f635788c40755be0a72dcd86a05e564d60405160405180910390a250565b60686020528060005260406000206000915054906101000a900460ff1681565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600061122b85858585611226611a87565b611e26565b9050949350505050565b6000606c54905090565b611247611a87565b73ffffffffffffffffffffffffffffffffffffffff166112656111eb565b73ffffffffffffffffffffffffffffffffffffffff16146112bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112b2906131b9565b60405180910390fd5b61130882828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506120be565b611347576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161133e90613219565b60405180910390fd5b61139482828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506120cb565b6113d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ca906130b9565b60405180910390fd5b8181606591906113e49291906123b6565b50611503606680546113f590613490565b80601f016020809104026020016040519081016040528092919081815260200182805461142190613490565b801561146e5780601f106114435761010080835404028352916020019161146e565b820191906000526020600020905b81548152906001019060200180831161145157829003601f168201915b50505050506065805461148090613490565b80601f01602080910402602001604051908101604052809291908181526020018280546114ac90613490565b80156114f95780601f106114ce576101008083540402835291602001916114f9565b820191906000526020600020905b8154815290600101906020018083116114dc57829003601f168201915b5050505050612185565b6067819055507f4dc1740772ca26480ca22d412de18818650c980e3aef84a3ca49cbe4fa4ed880606560675460405161153d929190613069565b60405180910390a15050565b600061157d83604051806020016040528060008152506040518060200160405280600081525085611578611a87565b611e26565b905092915050565b61158d611a87565b73ffffffffffffffffffffffffffffffffffffffff166115ab6111eb565b73ffffffffffffffffffffffffffffffffffffffff1614611601576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f8906131b9565b60405180910390fd5b61164e82828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506120be565b61168d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168490613119565b60405180910390fd5b6116da82828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506120cb565b611719576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611710906130b9565b60405180910390fd5b81816066919061172a9291906123b6565b506118496066805461173b90613490565b80601f016020809104026020016040519081016040528092919081815260200182805461176790613490565b80156117b45780601f10611789576101008083540402835291602001916117b4565b820191906000526020600020905b81548152906001019060200180831161179757829003601f168201915b5050505050606580546117c690613490565b80601f01602080910402602001604051908101604052809291908181526020018280546117f290613490565b801561183f5780601f106118145761010080835404028352916020019161183f565b820191906000526020600020905b81548152906001019060200180831161182257829003601f168201915b5050505050612185565b6067819055507f2e7c1f9bcc3b09d8e05594ab5d17b6c9b15b24cd506c5212f051f22990d081316066606754604051611883929190613069565b60405180910390a15050565b6065805461189c90613490565b80601f01602080910402602001604051908101604052809291908181526020018280546118c890613490565b80156119155780601f106118ea57610100808354040283529160200191611915565b820191906000526020600020905b8154815290600101906020018083116118f857829003601f168201915b505050505081565b606b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61194b611a87565b73ffffffffffffffffffffffffffffffffffffffff166119696111eb565b73ffffffffffffffffffffffffffffffffffffffff16146119bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119b6906131b9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611a2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a26906130d9565b60405180910390fd5b611a3881611ff8565b50565b606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600033905090565b600080611aa1878760675486896121b8565b905060001515611ab082610bbc565b1515148015611acb575060001515611ac786610bbc565b1515145b611b0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b01906131f9565b60405180910390fd5b606a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663daca6f7882866040518363ffffffff1660e01b8152600401611b67929190612f1f565b60206040518083038186803b158015611b7f57600080fd5b505afa158015611b93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb79190612625565b611bf6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bed90613199565b60405180910390fd5b60016068600083815260200190815260200160002060006101000a81548160ff02191690831515021790555060016068600087815260200190815260200160002060006101000a81548160ff021916908315150217905550606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1984886040518363ffffffff1660e01b8152600401611cab929190612ec0565b600060405180830381600087803b158015611cc557600080fd5b505af1158015611cd9573d6000803e3d6000fd5b50505050848160001c8473ffffffffffffffffffffffffffffffffffffffff167fa58ba939eb08dab7eaf8ad09c16e7405ee88e5153e15da62d5481296a9f727fa89604051611d289190613259565b60405180910390a48591505095945050505050565b600060019054906101000a900460ff1680611d63575060008054906101000a900460ff16155b611da2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d9990613179565b60405180910390fd5b60008060019054906101000a900460ff161590508015611df2576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b611dfa6121f4565b611e026122cd565b8015611e235760008060016101000a81548160ff0219169083151502179055505b50565b60008086511415611e6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e6390613099565b60405180910390fd5b606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac83856040518363ffffffff1660e01b8152600401611ec9929190612ec0565b600060405180830381600087803b158015611ee357600080fd5b505af1158015611ef7573d6000803e3d6000fd5b505050506000606c549050600086511180611f13575060008551115b15611f875785604051611f269190612e5f565b604051809103902087604051611f3c9190612e5f565b6040518091039020827ff1e98bc6e5ee93b47362bddb133886a2b471c968633a462b824f57cdb4b36c528a8a8a8a604051611f7a949392919061300f565b60405180910390a4611fd8565b86604051611f959190612e48565b6040518091039020817f1619fc95050ffb8c94c9077c82b3e1ebbf8d571b6234241c55ba0aaf40da019e8987604051611fcf929190612fa2565b60405180910390a35b600181611fe5919061335e565b606c819055508391505095945050505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808251119050919050565b600080600090505b825181101561217a5760008382815181106120f1576120f061359a565b5b602001015160f81c60f81b60f81c905060418160ff16101580156121195750605a8160ff1611155b80612138575060618160ff16101580156121375750607a8160ff1611155b5b80612157575060308160ff1610158015612156575060398160ff1611155b5b61216657600092505050612180565b508080612172906134f3565b9150506120d3565b50600190505b919050565b6000828260405160200161219a929190612e76565b60405160208183030381529060405280519060200120905092915050565b600085858585856040516020016121d3959493929190612f4f565b60405160208183030381529060405280519060200120905095945050505050565b600060019054906101000a900460ff168061221a575060008054906101000a900460ff16155b612259576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161225090613179565b60405180910390fd5b60008060019054906101000a900460ff1615905080156122a9576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b80156122ca5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff16806122f3575060008054906101000a900460ff16155b612332576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161232990613179565b60405180910390fd5b60008060019054906101000a900460ff161590508015612382576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61239261238d611a87565b611ff8565b80156123b35760008060016101000a81548160ff0219169083151502179055505b50565b8280546123c290613490565b90600052602060002090601f0160209004810192826123e4576000855561242b565b82601f106123fd57803560ff191683800117855561242b565b8280016001018555821561242b579182015b8281111561242a57823582559160200191906001019061240f565b5b509050612438919061243c565b5090565b5b8082111561245557600081600090555060010161243d565b5090565b600061246c61246784613299565b613274565b90508281526020810184848401111561248857612487613607565b5b61249384828561344e565b509392505050565b60006124ae6124a9846132ca565b613274565b9050828152602081018484840111156124ca576124c9613607565b5b6124d584828561344e565b509392505050565b6000813590506124ec8161394c565b92915050565b60008151905061250181613963565b92915050565b6000813590506125168161397a565b92915050565b600082601f830112612531576125306135fd565b5b8135612541848260208601612459565b91505092915050565b60008135905061255981613991565b92915050565b60008083601f840112612575576125746135fd565b5b8235905067ffffffffffffffff811115612592576125916135f8565b5b6020830191508360018202830111156125ae576125ad613602565b5b9250929050565b600082601f8301126125ca576125c96135fd565b5b81356125da84826020860161249b565b91505092915050565b6000813590506125f2816139a8565b92915050565b60006020828403121561260e5761260d613611565b5b600061261c848285016124dd565b91505092915050565b60006020828403121561263b5761263a613611565b5b6000612649848285016124f2565b91505092915050565b60006020828403121561266857612667613611565b5b600061267684828501612507565b91505092915050565b6000806000806080858703121561269957612698613611565b5b60006126a787828801612507565b94505060206126b8878288016125e3565b93505060406126c987828801612507565b925050606085013567ffffffffffffffff8111156126ea576126e961360c565b5b6126f68782880161251c565b91505092959194509250565b600080600080600060a0868803121561271e5761271d613611565b5b600061272c88828901612507565b955050602061273d888289016125e3565b945050604061274e88828901612507565b935050606086013567ffffffffffffffff81111561276f5761276e61360c565b5b61277b8882890161251c565b925050608061278c888289016124dd565b9150509295509295909350565b600080604083850312156127b0576127af613611565b5b600083013567ffffffffffffffff8111156127ce576127cd61360c565b5b6127da8582860161251c565b92505060206127eb858286016125e3565b9150509250929050565b60008060006060848603121561280e5761280d613611565b5b600084013567ffffffffffffffff81111561282c5761282b61360c565b5b6128388682870161251c565b9350506020612849868287016125e3565b925050604061285a868287016124dd565b9150509250925092565b60006020828403121561287a57612879613611565b5b60006128888482850161254a565b91505092915050565b600080602083850312156128a8576128a7613611565b5b600083013567ffffffffffffffff8111156128c6576128c561360c565b5b6128d28582860161255f565b92509250509250929050565b600080600080600080608087890312156128fb576128fa613611565b5b600087013567ffffffffffffffff8111156129195761291861360c565b5b61292589828a0161255f565b9650965050602087013567ffffffffffffffff8111156129485761294761360c565b5b61295489828a0161255f565b9450945050604061296789828a016124dd565b925050606061297889828a016124dd565b9150509295509295509295565b6000806000806080858703121561299f5761299e613611565b5b600085013567ffffffffffffffff8111156129bd576129bc61360c565b5b6129c9878288016125b5565b945050602085013567ffffffffffffffff8111156129ea576129e961360c565b5b6129f6878288016125b5565b935050604085013567ffffffffffffffff811115612a1757612a1661360c565b5b612a238782880161251c565b9250506060612a34878288016125e3565b91505092959194509250565b60008060408385031215612a5757612a56613611565b5b600083013567ffffffffffffffff811115612a7557612a7461360c565b5b612a81858286016125b5565b9250506020612a92858286016125e3565b9150509250929050565b612aa5816133b4565b82525050565b612ab4816133c6565b82525050565b612ac3816133d2565b82525050565b6000612ad482613310565b612ade8185613326565b9350612aee81856020860161345d565b612af781613616565b840191505092915050565b6000612b0d82613310565b612b178185613337565b9350612b2781856020860161345d565b80840191505092915050565b612b3c81613418565b82525050565b6000612b4d8261331b565b612b578185613342565b9350612b6781856020860161345d565b612b7081613616565b840191505092915050565b6000612b868261331b565b612b908185613353565b9350612ba081856020860161345d565b80840191505092915050565b60008154612bb981613490565b612bc38186613342565b94506001821660008114612bde5760018114612bf057612c23565b60ff1983168652602086019350612c23565b612bf9856132fb565b60005b83811015612c1b57815481890152600182019150602081019050612bfc565b808801955050505b50505092915050565b6000612c39602083613342565b9150612c4482613627565b602082019050919050565b6000612c5c602483613342565b9150612c6782613650565b604082019050919050565b6000612c7f602683613342565b9150612c8a8261369f565b604082019050919050565b6000612ca2601c83613342565b9150612cad826136ee565b602082019050919050565b6000612cc5601d83613342565b9150612cd082613717565b602082019050919050565b6000612ce8601683613342565b9150612cf382613740565b602082019050919050565b6000612d0b601883613342565b9150612d1682613769565b602082019050919050565b6000612d2e602e83613342565b9150612d3982613792565b604082019050919050565b6000612d51601e83613342565b9150612d5c826137e1565b602082019050919050565b6000612d74602083613342565b9150612d7f8261380a565b602082019050919050565b6000612d97601783613342565b9150612da282613833565b602082019050919050565b6000612dba602483613342565b9150612dc58261385c565b604082019050919050565b6000612ddd600383613353565b9150612de8826138ab565b600382019050919050565b6000612e00601d83613342565b9150612e0b826138d4565b602082019050919050565b6000612e23602383613342565b9150612e2e826138fd565b604082019050919050565b612e428161340e565b82525050565b6000612e548284612b02565b915081905092915050565b6000612e6b8284612b7b565b915081905092915050565b6000612e828285612b7b565b9150612e8d82612dd0565b9150612e998284612b7b565b91508190509392505050565b6000602082019050612eba6000830184612a9c565b92915050565b6000604082019050612ed56000830185612a9c565b612ee26020830184612e39565b9392505050565b6000602082019050612efe6000830184612aab565b92915050565b6000602082019050612f196000830184612aba565b92915050565b6000604082019050612f346000830185612aba565b8181036020830152612f468184612ac9565b90509392505050565b600060a082019050612f646000830188612aba565b612f716020830187612e39565b612f7e6040830186612aba565b612f8b6060830185612a9c565b612f986080830184612aba565b9695505050505050565b60006040820190508181036000830152612fbc8185612ac9565b9050612fcb6020830184612e39565b9392505050565b6000602082019050612fe76000830184612b33565b92915050565b600060208201905081810360008301526130078184612b42565b905092915050565b600060808201905081810360008301526130298187612b42565b9050818103602083015261303d8186612b42565b905081810360408301526130518185612ac9565b90506130606060830184612e39565b95945050505050565b600060408201905081810360008301526130838185612bac565b90506130926020830184612aba565b9392505050565b600060208201905081810360008301526130b281612c2c565b9050919050565b600060208201905081810360008301526130d281612c4f565b9050919050565b600060208201905081810360008301526130f281612c72565b9050919050565b6000602082019050818103600083015261311281612c95565b9050919050565b6000602082019050818103600083015261313281612cb8565b9050919050565b6000602082019050818103600083015261315281612cdb565b9050919050565b6000602082019050818103600083015261317281612cfe565b9050919050565b6000602082019050818103600083015261319281612d21565b9050919050565b600060208201905081810360008301526131b281612d44565b9050919050565b600060208201905081810360008301526131d281612d67565b9050919050565b600060208201905081810360008301526131f281612d8a565b9050919050565b6000602082019050818103600083015261321281612dad565b9050919050565b6000602082019050818103600083015261323281612df3565b9050919050565b6000602082019050818103600083015261325281612e16565b9050919050565b600060208201905061326e6000830184612e39565b92915050565b600061327e61328f565b905061328a82826134c2565b919050565b6000604051905090565b600067ffffffffffffffff8211156132b4576132b36135c9565b5b6132bd82613616565b9050602081019050919050565b600067ffffffffffffffff8211156132e5576132e46135c9565b5b6132ee82613616565b9050602081019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006133698261340e565b91506133748361340e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156133a9576133a861353c565b5b828201905092915050565b60006133bf826133ee565b9050919050565b60008115159050919050565b6000819050919050565b60006133e7826133b4565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006134238261342a565b9050919050565b60006134358261343c565b9050919050565b6000613447826133ee565b9050919050565b82818337600083830152505050565b60005b8381101561347b578082015181840152602081019050613460565b8381111561348a576000848401525b50505050565b600060028204905060018216806134a857607f821691505b602082108114156134bc576134bb61356b565b5b50919050565b6134cb82613616565b810181811067ffffffffffffffff821117156134ea576134e96135c9565b5b80604052505050565b60006134fe8261340e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156135315761353061353c565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4d696e74476174657761793a20746f206164647265737320697320656d707479600082015250565b7f476174657761793a2073796d626f6c206d75737420626520616c7068616e756d60008201527f6572696300000000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f476174657761793a206e6f2070726576696f7573206761746577617900000000600082015250565b7f476174657761793a2061737365742063616e277420626520656d707479000000600082015250565b7f476174657761793a20696e76616c696420746f6b656e00000000000000000000600082015250565b7f476174657761793a20696e76616c696420616464726573730000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4d696e74476174657761793a20696e76616c6964207369676e61747572650000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f476174657761793a206e6f7420617574686f72697a6564000000000000000000600082015250565b7f4d696e74476174657761793a207369676e617475726520616c7265616479207360008201527f70656e7400000000000000000000000000000000000000000000000000000000602082015250565b7f2f746f0000000000000000000000000000000000000000000000000000000000600082015250565b7f476174657761793a20636861696e2063616e277420626520656d707479000000600082015250565b7f476174657761793a20696e76616c6964207369676e617475726520766572696660008201527f6965720000000000000000000000000000000000000000000000000000000000602082015250565b613955816133b4565b811461396057600080fd5b50565b61396c816133c6565b811461397757600080fd5b50565b613983816133d2565b811461398e57600080fd5b50565b61399a816133dc565b81146139a557600080fd5b50565b6139b18161340e565b81146139bc57600080fd5b5056fea26469706673582212200e9a154539b1243732d9a622b9fddce70344d816a28864a8ab084b9395b23ffa64736f6c63430008070033",
  "deployedBytecode": "",
  "devdoc": {
    "events": {
      "LogBurn(bytes,uint256,uint256,bytes)": {
        "details": "Once `LogBurnToChain` is enabled on mainnet, LogBurn may be replaced by LogBurnToChain with empty payload and chain fields.For backwards compatibility, `to` is bytes instead of a string."
      },
      "LogMint(address,uint256,uint256,bytes32)": {
        "details": "For backwards compatiblity reasons, the sigHash is cast to a uint256."
      }
    },
    "kind": "dev",
    "methods": {
      "burnWithPayload(string,string,bytes,uint256)": {
        "params": {
          "amount_": "The amount of the token being locked, in the asset's        smallest unit. (e.g. satoshis for BTC)",
          "recipientAddress_": "The address to which the locked assets will be        minted to. The address should be a plain-text address, without        decoding to bytes first.",
          "recipientChain_": "The target chain to which the assets are being        moved to.",
          "recipientPayload_": "An optional payload to be passed to the        recipient chain along with the address."
        }
      },
      "mint(bytes32,uint256,bytes32,bytes)": {
        "params": {
          "amount_": "The amount of the token being minted, in its smallest        value. (e.g. satoshis for BTC).",
          "nHash_": "(nonce hash) The hash of the nonce, amount and pHash.",
          "pHash_": "(payload hash) The hash of the payload associated with the        mint.",
          "sig_": "The signature of the hash of the following values:        (pHash, amount, msg.sender, nHash), signed by the mintAuthority."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateAsset(string)": {
        "params": {
          "nextAsset_": "The new asset."
        }
      },
      "updateChain(string)": {
        "params": {
          "nextChain_": "The new chain."
        }
      },
      "updatePreviousGateway(address)": {
        "params": {
          "nextPreviousGateway_": "The new gateway contract's address."
        }
      },
      "updateSignatureVerifier(address)": {
        "params": {
          "nextSignatureVerifier_": "The new verifier contract address."
        }
      },
      "updateToken(address)": {
        "params": {
          "nextToken_": "The new ERC20 token contract's address."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "_status(bytes32)": {
        "notice": "Each signature can only be seen once."
      },
      "burn(bytes,uint256)": {
        "notice": "Same as `burn` with the recipient parameter being `bytes` instead of a `string`. For backwards compatibility with the MintGatewayV2."
      },
      "burn(string,uint256)": {
        "notice": "burn is a convenience function that is equivalent to calling         `burnWithPayload` with an empty payload and chain, releasing         the asset to the native chain."
      },
      "burnWithPayload(string,string,bytes,uint256)": {
        "notice": "burnWithPayload allows minted assets to be released to their         native chain, or to another chain as specified by the chain and         payload parameters.         WARNING: Burning with invalid parameters can cause the funds to         become unrecoverable."
      },
      "mint(bytes32,uint256,bytes32,bytes)": {
        "notice": "mint verifies a mint approval signature from RenVM and creates         tokens after taking a fee for the `_feeRecipient`."
      },
      "token()": {
        "notice": "Each Gateway is tied to a specific asset."
      },
      "transferTokenOwnership(address)": {
        "notice": "Allow the owner to update the owner of the RenERC20 token."
      },
      "updateAsset(string)": {
        "notice": "Allow the owner to update the asset."
      },
      "updateChain(string)": {
        "notice": "Allow the owner to update the chain."
      },
      "updatePreviousGateway(address)": {
        "notice": "Allow the owner to update the previous gateway used for backwards compatibility."
      },
      "updateSignatureVerifier(address)": {
        "notice": "Allow the owner to update the signature verifier contract."
      },
      "updateToken(address)": {
        "notice": "Allow the owner to update the ERC20 token contract."
      }
    },
    "notice": "Gateway handles verifying mint and burn requests. A mintAuthority approves new assets to be minted by providing a digital signature. An owner of an asset can request for it to be burnt.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 773,
        "contract": "src/Gateways/MintGateway.sol:MintGatewayV3",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 776,
        "contract": "src/Gateways/MintGateway.sol:MintGatewayV3",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1994,
        "contract": "src/Gateways/MintGateway.sol:MintGatewayV3",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 653,
        "contract": "src/Gateways/MintGateway.sol:MintGatewayV3",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 766,
        "contract": "src/Gateways/MintGateway.sol:MintGatewayV3",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 8782,
        "contract": "src/Gateways/MintGateway.sol:MintGatewayV3",
        "label": "chain",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 8784,
        "contract": "src/Gateways/MintGateway.sol:MintGatewayV3",
        "label": "asset",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 8786,
        "contract": "src/Gateways/MintGateway.sol:MintGatewayV3",
        "label": "selectorHash",
        "offset": 0,
        "slot": "103",
        "type": "t_bytes32"
      },
      {
        "astId": 8791,
        "contract": "src/Gateways/MintGateway.sol:MintGatewayV3",
        "label": "_status",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 8794,
        "contract": "src/Gateways/MintGateway.sol:MintGatewayV3",
        "label": "token",
        "offset": 0,
        "slot": "105",
        "type": "t_address"
      },
      {
        "astId": 8797,
        "contract": "src/Gateways/MintGateway.sol:MintGatewayV3",
        "label": "signatureVerifier",
        "offset": 0,
        "slot": "106",
        "type": "t_contract(ISignatureVerifier)9235"
      },
      {
        "astId": 8799,
        "contract": "src/Gateways/MintGateway.sol:MintGatewayV3",
        "label": "previousGateway",
        "offset": 0,
        "slot": "107",
        "type": "t_address"
      },
      {
        "astId": 8801,
        "contract": "src/Gateways/MintGateway.sol:MintGatewayV3",
        "label": "eventNonce",
        "offset": 0,
        "slot": "108",
        "type": "t_uint256"
      },
      {
        "astId": 8805,
        "contract": "src/Gateways/MintGateway.sol:MintGatewayV3",
        "label": "__gap",
        "offset": 0,
        "slot": "109",
        "type": "t_array(t_uint256)43_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)43_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[43]",
        "numberOfBytes": "1376"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ISignatureVerifier)9235": {
        "encoding": "inplace",
        "label": "contract ISignatureVerifier",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}