{
  "address": "0x1A879750a7134D983e799b7F5Dce8dA4Cd137BaA",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "version_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        }
      ],
      "name": "__ERC20WithPermit_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "version_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "decimals_",
          "type": "uint8"
        }
      ],
      "name": "__RenAsset_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0b21986227e5a1d1ac3bb5b5e5c1b4ac8f4c05cc5fa92a65ad7add1e6055bb7f",
  "receipt": {
    "to": "0x2222229fb3318A6375FA78fd299A9a42aC6A8fbF",
    "from": "0x9C2bC4E3c92324D7774EdB23B4bd98F37cBbD05a",
    "contractAddress": null,
    "transactionIndex": 2,
    "gasUsed": "3272692",
    "logsBloom": "0x
    "blockHash": "0x99b0d43550398bb358ade48956ca1a7217b740e1e20b39d5514c260853b4fec3",
    "transactionHash": "0x0b21986227e5a1d1ac3bb5b5e5c1b4ac8f4c05cc5fa92a65ad7add1e6055bb7f",
    "logs": [],
    "blockNumber": 27380674,
    "cumulativeGasUsed": "3387607",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "72c1e3a258e589d916db8b74aa851940",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"version_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"name\":\"__ERC20WithPermit_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"version_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"}],\"name\":\"__RenAsset_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(address,uint256)\":{\"notice\":\"burn can only be called by the tokens' associated Gateway contract. See Gateway's burn functions instead.\"},\"mint(address,uint256)\":{\"notice\":\"mint can only be called by the tokens' associated Gateway contract. See Gateway's mint function instead.\"}},\"notice\":\"RenERC20 represents a digital asset that has been bridged on to the Ethereum ledger. It exposes mint and burn functions that can only be called by it's associated Gateway contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/RenAsset/RenAsset.sol\":\"RenAssetV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x891fbf39ac5b9524f417db912d33684f239195a0fc5c11db439659676e51aab6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf449ca0a763d4b1b4462cf8706857074492f324020a2b9d099181b5383055ad3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x6795c369a4eefa78468e38966f7851fbc2dda5e5b9ccd3fa2b45970e2e4d3abd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"src/RenAsset/ERC20WithPermit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport {ERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract ERC20WithPermitState {\\n    mapping(address => uint256) internal _nonces;\\n\\n    // If the token is redeployed, the version is increased to prevent a permit\\n    // signature being used on both token instances.\\n    string internal _version;\\n\\n    // --- EIP712 niceties ---\\n    bytes32 internal _domainSeparator;\\n    // PERMIT_TYPEHASH is the value returned from\\n    // keccak256(\\\"Permit(address holder,address spender,uint256 nonce,uint256 expiry,bool allowed)\\\")\\n    bytes32 public constant PERMIT_TYPEHASH = 0xea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb;\\n\\n    uint256[48] private __gap;\\n}\\n\\n/// @notice Taken from the DAI token.\\ncontract ERC20WithPermit is Initializable, ERC20Upgradeable, ERC20WithPermitState {\\n    function __ERC20WithPermit_init(\\n        uint256 chainId,\\n        string memory version_,\\n        string memory name_,\\n        string memory symbol_\\n    ) public initializer {\\n        __ERC20_init(name_, symbol_);\\n        _version = version_;\\n        _domainSeparator = keccak256(\\n            abi.encode(\\n                keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                keccak256(bytes(name())),\\n                keccak256(bytes(version_)),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function nonces(address holder) public view returns (uint256) {\\n        return _nonces[holder];\\n    }\\n\\n    function version() public view returns (string memory) {\\n        return _version;\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view returns (bytes32) {\\n        return _domainSeparator;\\n    }\\n\\n    // --- Approve by signature ---\\n    function permit(\\n        address holder,\\n        address spender,\\n        uint256 nonce,\\n        uint256 expiry,\\n        bool allowed,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR(),\\n                keccak256(abi.encode(PERMIT_TYPEHASH, holder, spender, nonce, expiry, allowed))\\n            )\\n        );\\n\\n        require(holder != address(0), \\\"ERC20WithRate: address must not be 0x0\\\");\\n        require(holder == ecrecover(digest, v, r, s), \\\"ERC20WithRate: invalid signature\\\");\\n        require(expiry == 0 || block.timestamp <= expiry, \\\"ERC20WithRate: permit has expired\\\");\\n        require(nonce == nonces(holder), \\\"ERC20WithRate: invalid nonce\\\");\\n        _nonces[holder] = nonce + 1;\\n        uint256 amount = allowed ? uint256(int256(-1)) : 0;\\n        _approve(holder, spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xa210ff2e1ebf368c0998fca13fd7c5ab0d487915b73b55c06ee604a7d6a5a406\",\"license\":\"GPL-3.0\"},\"src/RenAsset/RenAsset.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {ERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport {StringsUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\n\\nimport {ERC20WithPermit} from \\\"./ERC20WithPermit.sol\\\";\\n\\nimport \\\"./ERC20WithPermit.sol\\\";\\n\\ncontract RenAssetStateV2 {\\n    string public constant NAME = \\\"RenAsset\\\";\\n\\n    uint8 internal _decimals;\\n\\n    uint256[48] private __gap;\\n}\\n\\n/// @notice RenERC20 represents a digital asset that has been bridged on to\\n/// the Ethereum ledger. It exposes mint and burn functions that can only be\\n/// called by it's associated Gateway contract.\\ncontract RenAssetV2 is Initializable, ERC20Upgradeable, ERC20WithPermit, OwnableUpgradeable, RenAssetStateV2 {\\n    /* solium-disable-next-line no-empty-blocks */\\n    function __RenAsset_init(\\n        uint256 chainId,\\n        string memory version_,\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) public initializer {\\n        ERC20Upgradeable.__ERC20_init(name_, symbol_);\\n        ERC20WithPermit.__ERC20WithPermit_init(chainId, version_, name_, symbol_);\\n        OwnableUpgradeable.__Ownable_init();\\n        RenAssetStateV2._decimals = decimals_;\\n    }\\n\\n    function decimals() public view override returns (uint8) {\\n        return RenAssetStateV2._decimals;\\n    }\\n\\n    /// @notice mint can only be called by the tokens' associated Gateway\\n    /// contract. See Gateway's mint function instead.\\n    function mint(address _to, uint256 _amount) public onlyOwner {\\n        _mint(_to, _amount);\\n    }\\n\\n    /// @notice burn can only be called by the tokens' associated Gateway\\n    /// contract. See Gateway's burn functions instead.\\n    function burn(address _from, uint256 _amount) public onlyOwner {\\n        _burn(_from, _amount);\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        // Disallow sending tokens to the ERC20 contract address - a common\\n        // mistake caused by the Ethereum transaction's `to` needing to be\\n        // the token's address.\\n        require(recipient != address(this), \\\"RenERC20: can't transfer to token address\\\");\\n        require(\\n            balanceOf(_msgSender()) >= amount,\\n            string(\\n                abi.encodePacked(\\n                    \\\"ERC20: transfer from \\\",\\n                    StringsUpgradeable.toHexString(uint160(_msgSender()), 20),\\n                    \\\" amount exceeds allowance\\\"\\n                )\\n            )\\n        );\\n        return super.transfer(recipient, amount);\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        // Disallow sending tokens to the ERC20 contract address (see comment\\n        // in `transfer`).\\n        require(recipient != address(this), \\\"RenERC20: can't transfer to token address\\\");\\n        return super.transferFrom(sender, recipient, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xc5f50a088c266c191be0cc1e77b66a53ae271b1c8f85ed5d880883a0e05bc87f\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613a72806100206000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c8063715018a6116100c3578063a3f4df7e1161007c578063a3f4df7e146103b7578063a457c2d7146103d5578063a9059cbb14610405578063b1a64a2d14610435578063dd62ed3e14610451578063f2fde38b1461048157610158565b8063715018a6146103095780637ecebe00146103135780638da5cb5b146103435780638fcbaf0c1461036157806395d89b411461037d5780639dc29fac1461039b57610158565b80633644e515116101155780633644e51514610235578063395093511461025357806340c10f19146102835780634c0db74e1461029f57806354fd4d50146102bb57806370a08231146102d957610158565b806306fdde031461015d578063095ea7b31461017b57806318160ddd146101ab57806323b872dd146101c957806330adf81f146101f9578063313ce56714610217575b600080fd5b61016561049d565b6040516101729190612dfd565b60405180910390f35b610195600480360381019061019091906126b7565b61052f565b6040516101a29190612cce565b60405180910390f35b6101b361054d565b6040516101c0919061307f565b60405180910390f35b6101e360048036038101906101de91906125ae565b610557565b6040516101f09190612cce565b60405180910390f35b6102016105dc565b60405161020e9190612ce9565b60405180910390f35b61021f610603565b60405161022c919061309a565b60405180910390f35b61023d61061a565b60405161024a9190612ce9565b60405180910390f35b61026d600480360381019061026891906126b7565b610624565b60405161027a9190612cce565b60405180910390f35b61029d600480360381019061029891906126b7565b6106d0565b005b6102b960048036038101906102b491906126f7565b61075a565b005b6102c36108c2565b6040516102d09190612dfd565b60405180910390f35b6102f360048036038101906102ee9190612541565b610954565b604051610300919061307f565b60405180910390f35b61031161099d565b005b61032d60048036038101906103289190612541565b610a25565b60405161033a919061307f565b60405180910390f35b61034b610a6e565b6040516103589190612cb3565b60405180910390f35b61037b60048036038101906103769190612601565b610a98565b005b610385610d7c565b6040516103929190612dfd565b60405180910390f35b6103b560048036038101906103b091906126b7565b610e0e565b005b6103bf610e98565b6040516103cc9190612dfd565b60405180910390f35b6103ef60048036038101906103ea91906126b7565b610ed1565b6040516103fc9190612cce565b60405180910390f35b61041f600480360381019061041a91906126b7565b610fbc565b60405161042c9190612cce565b60405180910390f35b61044f600480360381019061044a91906127b2565b6110db565b005b61046b6004803603810190610466919061256e565b6111f2565b604051610478919061307f565b60405180910390f35b61049b60048036038101906104969190612541565b611279565b005b6060603680546104ac906132e1565b80601f01602080910402602001604051908101604052809291908181526020018280546104d8906132e1565b80156105255780601f106104fa57610100808354040283529160200191610525565b820191906000526020600020905b81548152906001019060200180831161050857829003601f168201915b5050505050905090565b600061054361053c611371565b8484611379565b6001905092915050565b6000603554905090565b60003073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156105c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105bf90612fdf565b60405180910390fd5b6105d3848484611544565b90509392505050565b7fea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb60001b81565b600060ca60009054906101000a900460ff16905090565b6000606754905090565b60006106c6610631611371565b84846034600061063f611371565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546106c19190613132565b611379565b6001905092915050565b6106d8611371565b73ffffffffffffffffffffffffffffffffffffffff166106f6610a6e565b73ffffffffffffffffffffffffffffffffffffffff161461074c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074390612f7f565b60405180910390fd5b610756828261163c565b5050565b600060019054906101000a900460ff1680610780575060008054906101000a900460ff16155b6107bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b690612f3f565b60405180910390fd5b60008060019054906101000a900460ff16159050801561080f576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610819838361179d565b836066908051906020019061082f9291906123c5565b507f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f61085961049d565b805190602001208580519060200120873060405160200161087e959493929190612d65565b6040516020818303038152906040528051906020012060678190555080156108bb5760008060016101000a81548160ff0219169083151502179055505b5050505050565b6060606680546108d1906132e1565b80601f01602080910402602001604051908101604052809291908181526020018280546108fd906132e1565b801561094a5780601f1061091f5761010080835404028352916020019161094a565b820191906000526020600020905b81548152906001019060200180831161092d57829003601f168201915b5050505050905090565b6000603360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6109a5611371565b73ffffffffffffffffffffffffffffffffffffffff166109c3610a6e565b73ffffffffffffffffffffffffffffffffffffffff1614610a19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1090612f7f565b60405180910390fd5b610a23600061188a565b565b6000606560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000609860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000610aa261061a565b7fea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb60001b8a8a8a8a8a604051602001610ae096959493929190612d04565b60405160208183030381529060405280519060200120604051602001610b07929190612c4f565b604051602081830303815290604052805190602001209050600073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161415610b8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b869061303f565b60405180910390fd5b60018185858560405160008152602001604052604051610bb29493929190612db8565b6020604051602081039080840390855afa158015610bd4573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614610c4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4290612edf565b60405180910390fd5b6000861480610c5a5750854211155b610c99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9090612f1f565b60405180910390fd5b610ca289610a25565b8714610ce3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cda90612e1f565b60405180910390fd5b600187610cf09190613132565b606560008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600085610d41576000610d63565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b9050610d708a8a83611379565b50505050505050505050565b606060378054610d8b906132e1565b80601f0160208091040260200160405190810160405280929190818152602001828054610db7906132e1565b8015610e045780601f10610dd957610100808354040283529160200191610e04565b820191906000526020600020905b815481529060010190602001808311610de757829003601f168201915b5050505050905090565b610e16611371565b73ffffffffffffffffffffffffffffffffffffffff16610e34610a6e565b73ffffffffffffffffffffffffffffffffffffffff1614610e8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8190612f7f565b60405180910390fd5b610e948282611950565b5050565b6040518060400160405280600881526020017f52656e417373657400000000000000000000000000000000000000000000000081525081565b60008060346000610ee0611371565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610f9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f949061301f565b60405180910390fd5b610fb1610fa8611371565b85858403611379565b600191505092915050565b60003073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561102d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102490612fdf565b60405180910390fd5b8161103e611039611371565b610954565b101561106861104b611371565b73ffffffffffffffffffffffffffffffffffffffff166014611b29565b6040516020016110789190612c86565b604051602081830303815290604052906110c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110bf9190612dfd565b60405180910390fd5b506110d38383611d65565b905092915050565b600060019054906101000a900460ff1680611101575060008054906101000a900460ff16155b611140576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113790612f3f565b60405180910390fd5b60008060019054906101000a900460ff161590508015611190576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61119a848461179d565b6111a68686868661075a565b6111ae611d83565b8160ca60006101000a81548160ff021916908360ff16021790555080156111ea5760008060016101000a81548160ff0219169083151502179055505b505050505050565b6000603460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b611281611371565b73ffffffffffffffffffffffffffffffffffffffff1661129f610a6e565b73ffffffffffffffffffffffffffffffffffffffff16146112f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ec90612f7f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611365576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135c90612e9f565b60405180910390fd5b61136e8161188a565b50565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156113e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113e090612fff565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611459576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161145090612ebf565b60405180910390fd5b80603460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051611537919061307f565b60405180910390a3505050565b6000611551848484611e6c565b6000603460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600061159c611371565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508281101561161c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161390612f5f565b60405180910390fd5b61163085611628611371565b858403611379565b60019150509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156116ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116a39061305f565b60405180910390fd5b6116b8600083836120f0565b80603560008282546116ca9190613132565b9250508190555080603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546117209190613132565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611785919061307f565b60405180910390a3611799600083836120f5565b5050565b600060019054906101000a900460ff16806117c3575060008054906101000a900460ff16155b611802576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f990612f3f565b60405180910390fd5b60008060019054906101000a900460ff161590508015611852576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61185a6120fa565b61186483836121d3565b80156118855760008060016101000a81548160ff0219169083151502179055505b505050565b6000609860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081609860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156119c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119b790612f9f565b60405180910390fd5b6119cc826000836120f0565b6000603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611a53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a4a90612e7f565b60405180910390fd5b818103603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160356000828254611aab91906131e2565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611b10919061307f565b60405180910390a3611b24836000846120f5565b505050565b606060006002836002611b3c9190613188565b611b469190613132565b67ffffffffffffffff811115611b5f57611b5e6133db565b5b6040519080825280601f01601f191660200182016040528015611b915781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611bc957611bc86133ac565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611c2d57611c2c6133ac565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002611c6d9190613188565b611c779190613132565b90505b6001811115611d17577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110611cb957611cb86133ac565b5b1a60f81b828281518110611cd057611ccf6133ac565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080611d10906132b7565b9050611c7a565b5060008414611d5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d5290612e3f565b60405180910390fd5b8091505092915050565b6000611d79611d72611371565b8484611e6c565b6001905092915050565b600060019054906101000a900460ff1680611da9575060008054906101000a900460ff16155b611de8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ddf90612f3f565b60405180910390fd5b60008060019054906101000a900460ff161590508015611e38576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b611e406120fa565b611e486122dc565b8015611e695760008060016101000a81548160ff0219169083151502179055505b50565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611edc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ed390612fbf565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611f4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f4390612e5f565b60405180910390fd5b611f578383836120f0565b6000603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611fde576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fd590612eff565b60405180910390fd5b818103603360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546120739190613132565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516120d7919061307f565b60405180910390a36120ea8484846120f5565b50505050565b505050565b505050565b600060019054906101000a900460ff1680612120575060008054906101000a900460ff16155b61215f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161215690612f3f565b60405180910390fd5b60008060019054906101000a900460ff1615905080156121af576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b80156121d05760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff16806121f9575060008054906101000a900460ff16155b612238576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161222f90612f3f565b60405180910390fd5b60008060019054906101000a900460ff161590508015612288576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b826036908051906020019061229e9291906123c5565b5081603790805190602001906122b59291906123c5565b5080156122d75760008060016101000a81548160ff0219169083151502179055505b505050565b600060019054906101000a900460ff1680612302575060008054906101000a900460ff16155b612341576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161233890612f3f565b60405180910390fd5b60008060019054906101000a900460ff161590508015612391576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6123a161239c611371565b61188a565b80156123c25760008060016101000a81548160ff0219169083151502179055505b50565b8280546123d1906132e1565b90600052602060002090601f0160209004810192826123f3576000855561243a565b82601f1061240c57805160ff191683800117855561243a565b8280016001018555821561243a579182015b8281111561243957825182559160200191906001019061241e565b5b509050612447919061244b565b5090565b5b8082111561246457600081600090555060010161244c565b5090565b600061247b612476846130da565b6130b5565b9050828152602081018484840111156124975761249661340f565b5b6124a2848285613275565b509392505050565b6000813590506124b9816139c9565b92915050565b6000813590506124ce816139e0565b92915050565b6000813590506124e3816139f7565b92915050565b600082601f8301126124fe576124fd61340a565b5b813561250e848260208601612468565b91505092915050565b60008135905061252681613a0e565b92915050565b60008135905061253b81613a25565b92915050565b60006020828403121561255757612556613419565b5b6000612565848285016124aa565b91505092915050565b6000806040838503121561258557612584613419565b5b6000612593858286016124aa565b92505060206125a4858286016124aa565b9150509250929050565b6000806000606084860312156125c7576125c6613419565b5b60006125d5868287016124aa565b93505060206125e6868287016124aa565b92505060406125f786828701612517565b9150509250925092565b600080600080600080600080610100898b03121561262257612621613419565b5b60006126308b828c016124aa565b98505060206126418b828c016124aa565b97505060406126528b828c01612517565b96505060606126638b828c01612517565b95505060806126748b828c016124bf565b94505060a06126858b828c0161252c565b93505060c06126968b828c016124d4565b92505060e06126a78b828c016124d4565b9150509295985092959890939650565b600080604083850312156126ce576126cd613419565b5b60006126dc858286016124aa565b92505060206126ed85828601612517565b9150509250929050565b6000806000806080858703121561271157612710613419565b5b600061271f87828801612517565b945050602085013567ffffffffffffffff8111156127405761273f613414565b5b61274c878288016124e9565b935050604085013567ffffffffffffffff81111561276d5761276c613414565b5b612779878288016124e9565b925050606085013567ffffffffffffffff81111561279a57612799613414565b5b6127a6878288016124e9565b91505092959194509250565b600080600080600060a086880312156127ce576127cd613419565b5b60006127dc88828901612517565b955050602086013567ffffffffffffffff8111156127fd576127fc613414565b5b612809888289016124e9565b945050604086013567ffffffffffffffff81111561282a57612829613414565b5b612836888289016124e9565b935050606086013567ffffffffffffffff81111561285757612856613414565b5b612863888289016124e9565b92505060806128748882890161252c565b9150509295509295909350565b61288a81613216565b82525050565b61289981613228565b82525050565b6128a881613234565b82525050565b6128bf6128ba82613234565b613344565b82525050565b60006128d08261310b565b6128da8185613116565b93506128ea818560208601613284565b6128f38161341e565b840191505092915050565b60006129098261310b565b6129138185613127565b9350612923818560208601613284565b80840191505092915050565b600061293c601c83613116565b91506129478261342f565b602082019050919050565b600061295f602083613116565b915061296a82613458565b602082019050919050565b6000612982601983613127565b915061298d82613481565b601982019050919050565b60006129a5602383613116565b91506129b0826134aa565b604082019050919050565b60006129c8602283613116565b91506129d3826134f9565b604082019050919050565b60006129eb602683613116565b91506129f682613548565b604082019050919050565b6000612a0e602283613116565b9150612a1982613597565b604082019050919050565b6000612a31600283613127565b9150612a3c826135e6565b600282019050919050565b6000612a54602083613116565b9150612a5f8261360f565b602082019050919050565b6000612a77602683613116565b9150612a8282613638565b604082019050919050565b6000612a9a602183613116565b9150612aa582613687565b604082019050919050565b6000612abd602e83613116565b9150612ac8826136d6565b604082019050919050565b6000612ae0602883613116565b9150612aeb82613725565b604082019050919050565b6000612b03602083613116565b9150612b0e82613774565b602082019050919050565b6000612b26602183613116565b9150612b318261379d565b604082019050919050565b6000612b49601583613127565b9150612b54826137ec565b601582019050919050565b6000612b6c602583613116565b9150612b7782613815565b604082019050919050565b6000612b8f602983613116565b9150612b9a82613864565b604082019050919050565b6000612bb2602483613116565b9150612bbd826138b3565b604082019050919050565b6000612bd5602583613116565b9150612be082613902565b604082019050919050565b6000612bf8602683613116565b9150612c0382613951565b604082019050919050565b6000612c1b601f83613116565b9150612c26826139a0565b602082019050919050565b612c3a8161325e565b82525050565b612c4981613268565b82525050565b6000612c5a82612a24565b9150612c6682856128ae565b602082019150612c7682846128ae565b6020820191508190509392505050565b6000612c9182612b3c565b9150612c9d82846128fe565b9150612ca882612975565b915081905092915050565b6000602082019050612cc86000830184612881565b92915050565b6000602082019050612ce36000830184612890565b92915050565b6000602082019050612cfe600083018461289f565b92915050565b600060c082019050612d19600083018961289f565b612d266020830188612881565b612d336040830187612881565b612d406060830186612c31565b612d4d6080830185612c31565b612d5a60a0830184612890565b979650505050505050565b600060a082019050612d7a600083018861289f565b612d87602083018761289f565b612d94604083018661289f565b612da16060830185612c31565b612dae6080830184612881565b9695505050505050565b6000608082019050612dcd600083018761289f565b612dda6020830186612c40565b612de7604083018561289f565b612df4606083018461289f565b95945050505050565b60006020820190508181036000830152612e1781846128c5565b905092915050565b60006020820190508181036000830152612e388161292f565b9050919050565b60006020820190508181036000830152612e5881612952565b9050919050565b60006020820190508181036000830152612e7881612998565b9050919050565b60006020820190508181036000830152612e98816129bb565b9050919050565b60006020820190508181036000830152612eb8816129de565b9050919050565b60006020820190508181036000830152612ed881612a01565b9050919050565b60006020820190508181036000830152612ef881612a47565b9050919050565b60006020820190508181036000830152612f1881612a6a565b9050919050565b60006020820190508181036000830152612f3881612a8d565b9050919050565b60006020820190508181036000830152612f5881612ab0565b9050919050565b60006020820190508181036000830152612f7881612ad3565b9050919050565b60006020820190508181036000830152612f9881612af6565b9050919050565b60006020820190508181036000830152612fb881612b19565b9050919050565b60006020820190508181036000830152612fd881612b5f565b9050919050565b60006020820190508181036000830152612ff881612b82565b9050919050565b6000602082019050818103600083015261301881612ba5565b9050919050565b6000602082019050818103600083015261303881612bc8565b9050919050565b6000602082019050818103600083015261305881612beb565b9050919050565b6000602082019050818103600083015261307881612c0e565b9050919050565b60006020820190506130946000830184612c31565b92915050565b60006020820190506130af6000830184612c40565b92915050565b60006130bf6130d0565b90506130cb8282613313565b919050565b6000604051905090565b600067ffffffffffffffff8211156130f5576130f46133db565b5b6130fe8261341e565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600061313d8261325e565b91506131488361325e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561317d5761317c61334e565b5b828201905092915050565b60006131938261325e565b915061319e8361325e565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156131d7576131d661334e565b5b828202905092915050565b60006131ed8261325e565b91506131f88361325e565b92508282101561320b5761320a61334e565b5b828203905092915050565b60006132218261323e565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b838110156132a2578082015181840152602081019050613287565b838111156132b1576000848401525b50505050565b60006132c28261325e565b915060008214156132d6576132d561334e565b5b600182039050919050565b600060028204905060018216806132f957607f821691505b6020821081141561330d5761330c61337d565b5b50919050565b61331c8261341e565b810181811067ffffffffffffffff8211171561333b5761333a6133db565b5b80604052505050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f455243323057697468526174653a20696e76616c6964206e6f6e636500000000600082015250565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f20616d6f756e74206578636565647320616c6c6f77616e636500000000000000600082015250565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b7f455243323057697468526174653a20696e76616c6964207369676e6174757265600082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f455243323057697468526174653a207065726d6974206861732065787069726560008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206160008201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d200000000000000000000000600082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f52656e45524332303a2063616e2774207472616e7366657220746f20746f6b6560008201527f6e20616464726573730000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b7f455243323057697468526174653a2061646472657373206d757374206e6f742060008201527f6265203078300000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6139d281613216565b81146139dd57600080fd5b50565b6139e981613228565b81146139f457600080fd5b50565b613a0081613234565b8114613a0b57600080fd5b50565b613a178161325e565b8114613a2257600080fd5b50565b613a2e81613268565b8114613a3957600080fd5b5056fea264697066735822122070275e69b5e27aecd197bbcc16e1beb43797b491c509102768ee54212e08502764736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101585760003560e01c8063715018a6116100c3578063a3f4df7e1161007c578063a3f4df7e146103b7578063a457c2d7146103d5578063a9059cbb14610405578063b1a64a2d14610435578063dd62ed3e14610451578063f2fde38b1461048157610158565b8063715018a6146103095780637ecebe00146103135780638da5cb5b146103435780638fcbaf0c1461036157806395d89b411461037d5780639dc29fac1461039b57610158565b80633644e515116101155780633644e51514610235578063395093511461025357806340c10f19146102835780634c0db74e1461029f57806354fd4d50146102bb57806370a08231146102d957610158565b806306fdde031461015d578063095ea7b31461017b57806318160ddd146101ab57806323b872dd146101c957806330adf81f146101f9578063313ce56714610217575b600080fd5b61016561049d565b6040516101729190612dfd565b60405180910390f35b610195600480360381019061019091906126b7565b61052f565b6040516101a29190612cce565b60405180910390f35b6101b361054d565b6040516101c0919061307f565b60405180910390f35b6101e360048036038101906101de91906125ae565b610557565b6040516101f09190612cce565b60405180910390f35b6102016105dc565b60405161020e9190612ce9565b60405180910390f35b61021f610603565b60405161022c919061309a565b60405180910390f35b61023d61061a565b60405161024a9190612ce9565b60405180910390f35b61026d600480360381019061026891906126b7565b610624565b60405161027a9190612cce565b60405180910390f35b61029d600480360381019061029891906126b7565b6106d0565b005b6102b960048036038101906102b491906126f7565b61075a565b005b6102c36108c2565b6040516102d09190612dfd565b60405180910390f35b6102f360048036038101906102ee9190612541565b610954565b604051610300919061307f565b60405180910390f35b61031161099d565b005b61032d60048036038101906103289190612541565b610a25565b60405161033a919061307f565b60405180910390f35b61034b610a6e565b6040516103589190612cb3565b60405180910390f35b61037b60048036038101906103769190612601565b610a98565b005b610385610d7c565b6040516103929190612dfd565b60405180910390f35b6103b560048036038101906103b091906126b7565b610e0e565b005b6103bf610e98565b6040516103cc9190612dfd565b60405180910390f35b6103ef60048036038101906103ea91906126b7565b610ed1565b6040516103fc9190612cce565b60405180910390f35b61041f600480360381019061041a91906126b7565b610fbc565b60405161042c9190612cce565b60405180910390f35b61044f600480360381019061044a91906127b2565b6110db565b005b61046b6004803603810190610466919061256e565b6111f2565b604051610478919061307f565b60405180910390f35b61049b60048036038101906104969190612541565b611279565b005b6060603680546104ac906132e1565b80601f01602080910402602001604051908101604052809291908181526020018280546104d8906132e1565b80156105255780601f106104fa57610100808354040283529160200191610525565b820191906000526020600020905b81548152906001019060200180831161050857829003601f168201915b5050505050905090565b600061054361053c611371565b8484611379565b6001905092915050565b6000603554905090565b60003073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156105c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105bf90612fdf565b60405180910390fd5b6105d3848484611544565b90509392505050565b7fea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb60001b81565b600060ca60009054906101000a900460ff16905090565b6000606754905090565b60006106c6610631611371565b84846034600061063f611371565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546106c19190613132565b611379565b6001905092915050565b6106d8611371565b73ffffffffffffffffffffffffffffffffffffffff166106f6610a6e565b73ffffffffffffffffffffffffffffffffffffffff161461074c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074390612f7f565b60405180910390fd5b610756828261163c565b5050565b600060019054906101000a900460ff1680610780575060008054906101000a900460ff16155b6107bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b690612f3f565b60405180910390fd5b60008060019054906101000a900460ff16159050801561080f576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610819838361179d565b836066908051906020019061082f9291906123c5565b507f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f61085961049d565b805190602001208580519060200120873060405160200161087e959493929190612d65565b6040516020818303038152906040528051906020012060678190555080156108bb5760008060016101000a81548160ff0219169083151502179055505b5050505050565b6060606680546108d1906132e1565b80601f01602080910402602001604051908101604052809291908181526020018280546108fd906132e1565b801561094a5780601f1061091f5761010080835404028352916020019161094a565b820191906000526020600020905b81548152906001019060200180831161092d57829003601f168201915b5050505050905090565b6000603360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6109a5611371565b73ffffffffffffffffffffffffffffffffffffffff166109c3610a6e565b73ffffffffffffffffffffffffffffffffffffffff1614610a19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1090612f7f565b60405180910390fd5b610a23600061188a565b565b6000606560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000609860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000610aa261061a565b7fea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb60001b8a8a8a8a8a604051602001610ae096959493929190612d04565b60405160208183030381529060405280519060200120604051602001610b07929190612c4f565b604051602081830303815290604052805190602001209050600073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161415610b8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b869061303f565b60405180910390fd5b60018185858560405160008152602001604052604051610bb29493929190612db8565b6020604051602081039080840390855afa158015610bd4573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614610c4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4290612edf565b60405180910390fd5b6000861480610c5a5750854211155b610c99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9090612f1f565b60405180910390fd5b610ca289610a25565b8714610ce3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cda90612e1f565b60405180910390fd5b600187610cf09190613132565b606560008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600085610d41576000610d63565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b9050610d708a8a83611379565b50505050505050505050565b606060378054610d8b906132e1565b80601f0160208091040260200160405190810160405280929190818152602001828054610db7906132e1565b8015610e045780601f10610dd957610100808354040283529160200191610e04565b820191906000526020600020905b815481529060010190602001808311610de757829003601f168201915b5050505050905090565b610e16611371565b73ffffffffffffffffffffffffffffffffffffffff16610e34610a6e565b73ffffffffffffffffffffffffffffffffffffffff1614610e8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8190612f7f565b60405180910390fd5b610e948282611950565b5050565b6040518060400160405280600881526020017f52656e417373657400000000000000000000000000000000000000000000000081525081565b60008060346000610ee0611371565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610f9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f949061301f565b60405180910390fd5b610fb1610fa8611371565b85858403611379565b600191505092915050565b60003073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561102d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102490612fdf565b60405180910390fd5b8161103e611039611371565b610954565b101561106861104b611371565b73ffffffffffffffffffffffffffffffffffffffff166014611b29565b6040516020016110789190612c86565b604051602081830303815290604052906110c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110bf9190612dfd565b60405180910390fd5b506110d38383611d65565b905092915050565b600060019054906101000a900460ff1680611101575060008054906101000a900460ff16155b611140576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113790612f3f565b60405180910390fd5b60008060019054906101000a900460ff161590508015611190576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61119a848461179d565b6111a68686868661075a565b6111ae611d83565b8160ca60006101000a81548160ff021916908360ff16021790555080156111ea5760008060016101000a81548160ff0219169083151502179055505b505050505050565b6000603460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b611281611371565b73ffffffffffffffffffffffffffffffffffffffff1661129f610a6e565b73ffffffffffffffffffffffffffffffffffffffff16146112f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ec90612f7f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611365576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135c90612e9f565b60405180910390fd5b61136e8161188a565b50565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156113e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113e090612fff565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611459576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161145090612ebf565b60405180910390fd5b80603460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051611537919061307f565b60405180910390a3505050565b6000611551848484611e6c565b6000603460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600061159c611371565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508281101561161c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161390612f5f565b60405180910390fd5b61163085611628611371565b858403611379565b60019150509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156116ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116a39061305f565b60405180910390fd5b6116b8600083836120f0565b80603560008282546116ca9190613132565b9250508190555080603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546117209190613132565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611785919061307f565b60405180910390a3611799600083836120f5565b5050565b600060019054906101000a900460ff16806117c3575060008054906101000a900460ff16155b611802576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f990612f3f565b60405180910390fd5b60008060019054906101000a900460ff161590508015611852576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61185a6120fa565b61186483836121d3565b80156118855760008060016101000a81548160ff0219169083151502179055505b505050565b6000609860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081609860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156119c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119b790612f9f565b60405180910390fd5b6119cc826000836120f0565b6000603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611a53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a4a90612e7f565b60405180910390fd5b818103603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160356000828254611aab91906131e2565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611b10919061307f565b60405180910390a3611b24836000846120f5565b505050565b606060006002836002611b3c9190613188565b611b469190613132565b67ffffffffffffffff811115611b5f57611b5e6133db565b5b6040519080825280601f01601f191660200182016040528015611b915781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611bc957611bc86133ac565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611c2d57611c2c6133ac565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002611c6d9190613188565b611c779190613132565b90505b6001811115611d17577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110611cb957611cb86133ac565b5b1a60f81b828281518110611cd057611ccf6133ac565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080611d10906132b7565b9050611c7a565b5060008414611d5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d5290612e3f565b60405180910390fd5b8091505092915050565b6000611d79611d72611371565b8484611e6c565b6001905092915050565b600060019054906101000a900460ff1680611da9575060008054906101000a900460ff16155b611de8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ddf90612f3f565b60405180910390fd5b60008060019054906101000a900460ff161590508015611e38576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b611e406120fa565b611e486122dc565b8015611e695760008060016101000a81548160ff0219169083151502179055505b50565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611edc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ed390612fbf565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611f4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f4390612e5f565b60405180910390fd5b611f578383836120f0565b6000603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611fde576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fd590612eff565b60405180910390fd5b818103603360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546120739190613132565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516120d7919061307f565b60405180910390a36120ea8484846120f5565b50505050565b505050565b505050565b600060019054906101000a900460ff1680612120575060008054906101000a900460ff16155b61215f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161215690612f3f565b60405180910390fd5b60008060019054906101000a900460ff1615905080156121af576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b80156121d05760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff16806121f9575060008054906101000a900460ff16155b612238576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161222f90612f3f565b60405180910390fd5b60008060019054906101000a900460ff161590508015612288576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b826036908051906020019061229e9291906123c5565b5081603790805190602001906122b59291906123c5565b5080156122d75760008060016101000a81548160ff0219169083151502179055505b505050565b600060019054906101000a900460ff1680612302575060008054906101000a900460ff16155b612341576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161233890612f3f565b60405180910390fd5b60008060019054906101000a900460ff161590508015612391576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6123a161239c611371565b61188a565b80156123c25760008060016101000a81548160ff0219169083151502179055505b50565b8280546123d1906132e1565b90600052602060002090601f0160209004810192826123f3576000855561243a565b82601f1061240c57805160ff191683800117855561243a565b8280016001018555821561243a579182015b8281111561243957825182559160200191906001019061241e565b5b509050612447919061244b565b5090565b5b8082111561246457600081600090555060010161244c565b5090565b600061247b612476846130da565b6130b5565b9050828152602081018484840111156124975761249661340f565b5b6124a2848285613275565b509392505050565b6000813590506124b9816139c9565b92915050565b6000813590506124ce816139e0565b92915050565b6000813590506124e3816139f7565b92915050565b600082601f8301126124fe576124fd61340a565b5b813561250e848260208601612468565b91505092915050565b60008135905061252681613a0e565b92915050565b60008135905061253b81613a25565b92915050565b60006020828403121561255757612556613419565b5b6000612565848285016124aa565b91505092915050565b6000806040838503121561258557612584613419565b5b6000612593858286016124aa565b92505060206125a4858286016124aa565b9150509250929050565b6000806000606084860312156125c7576125c6613419565b5b60006125d5868287016124aa565b93505060206125e6868287016124aa565b92505060406125f786828701612517565b9150509250925092565b600080600080600080600080610100898b03121561262257612621613419565b5b60006126308b828c016124aa565b98505060206126418b828c016124aa565b97505060406126528b828c01612517565b96505060606126638b828c01612517565b95505060806126748b828c016124bf565b94505060a06126858b828c0161252c565b93505060c06126968b828c016124d4565b92505060e06126a78b828c016124d4565b9150509295985092959890939650565b600080604083850312156126ce576126cd613419565b5b60006126dc858286016124aa565b92505060206126ed85828601612517565b9150509250929050565b6000806000806080858703121561271157612710613419565b5b600061271f87828801612517565b945050602085013567ffffffffffffffff8111156127405761273f613414565b5b61274c878288016124e9565b935050604085013567ffffffffffffffff81111561276d5761276c613414565b5b612779878288016124e9565b925050606085013567ffffffffffffffff81111561279a57612799613414565b5b6127a6878288016124e9565b91505092959194509250565b600080600080600060a086880312156127ce576127cd613419565b5b60006127dc88828901612517565b955050602086013567ffffffffffffffff8111156127fd576127fc613414565b5b612809888289016124e9565b945050604086013567ffffffffffffffff81111561282a57612829613414565b5b612836888289016124e9565b935050606086013567ffffffffffffffff81111561285757612856613414565b5b612863888289016124e9565b92505060806128748882890161252c565b9150509295509295909350565b61288a81613216565b82525050565b61289981613228565b82525050565b6128a881613234565b82525050565b6128bf6128ba82613234565b613344565b82525050565b60006128d08261310b565b6128da8185613116565b93506128ea818560208601613284565b6128f38161341e565b840191505092915050565b60006129098261310b565b6129138185613127565b9350612923818560208601613284565b80840191505092915050565b600061293c601c83613116565b91506129478261342f565b602082019050919050565b600061295f602083613116565b915061296a82613458565b602082019050919050565b6000612982601983613127565b915061298d82613481565b601982019050919050565b60006129a5602383613116565b91506129b0826134aa565b604082019050919050565b60006129c8602283613116565b91506129d3826134f9565b604082019050919050565b60006129eb602683613116565b91506129f682613548565b604082019050919050565b6000612a0e602283613116565b9150612a1982613597565b604082019050919050565b6000612a31600283613127565b9150612a3c826135e6565b600282019050919050565b6000612a54602083613116565b9150612a5f8261360f565b602082019050919050565b6000612a77602683613116565b9150612a8282613638565b604082019050919050565b6000612a9a602183613116565b9150612aa582613687565b604082019050919050565b6000612abd602e83613116565b9150612ac8826136d6565b604082019050919050565b6000612ae0602883613116565b9150612aeb82613725565b604082019050919050565b6000612b03602083613116565b9150612b0e82613774565b602082019050919050565b6000612b26602183613116565b9150612b318261379d565b604082019050919050565b6000612b49601583613127565b9150612b54826137ec565b601582019050919050565b6000612b6c602583613116565b9150612b7782613815565b604082019050919050565b6000612b8f602983613116565b9150612b9a82613864565b604082019050919050565b6000612bb2602483613116565b9150612bbd826138b3565b604082019050919050565b6000612bd5602583613116565b9150612be082613902565b604082019050919050565b6000612bf8602683613116565b9150612c0382613951565b604082019050919050565b6000612c1b601f83613116565b9150612c26826139a0565b602082019050919050565b612c3a8161325e565b82525050565b612c4981613268565b82525050565b6000612c5a82612a24565b9150612c6682856128ae565b602082019150612c7682846128ae565b6020820191508190509392505050565b6000612c9182612b3c565b9150612c9d82846128fe565b9150612ca882612975565b915081905092915050565b6000602082019050612cc86000830184612881565b92915050565b6000602082019050612ce36000830184612890565b92915050565b6000602082019050612cfe600083018461289f565b92915050565b600060c082019050612d19600083018961289f565b612d266020830188612881565b612d336040830187612881565b612d406060830186612c31565b612d4d6080830185612c31565b612d5a60a0830184612890565b979650505050505050565b600060a082019050612d7a600083018861289f565b612d87602083018761289f565b612d94604083018661289f565b612da16060830185612c31565b612dae6080830184612881565b9695505050505050565b6000608082019050612dcd600083018761289f565b612dda6020830186612c40565b612de7604083018561289f565b612df4606083018461289f565b95945050505050565b60006020820190508181036000830152612e1781846128c5565b905092915050565b60006020820190508181036000830152612e388161292f565b9050919050565b60006020820190508181036000830152612e5881612952565b9050919050565b60006020820190508181036000830152612e7881612998565b9050919050565b60006020820190508181036000830152612e98816129bb565b9050919050565b60006020820190508181036000830152612eb8816129de565b9050919050565b60006020820190508181036000830152612ed881612a01565b9050919050565b60006020820190508181036000830152612ef881612a47565b9050919050565b60006020820190508181036000830152612f1881612a6a565b9050919050565b60006020820190508181036000830152612f3881612a8d565b9050919050565b60006020820190508181036000830152612f5881612ab0565b9050919050565b60006020820190508181036000830152612f7881612ad3565b9050919050565b60006020820190508181036000830152612f9881612af6565b9050919050565b60006020820190508181036000830152612fb881612b19565b9050919050565b60006020820190508181036000830152612fd881612b5f565b9050919050565b60006020820190508181036000830152612ff881612b82565b9050919050565b6000602082019050818103600083015261301881612ba5565b9050919050565b6000602082019050818103600083015261303881612bc8565b9050919050565b6000602082019050818103600083015261305881612beb565b9050919050565b6000602082019050818103600083015261307881612c0e565b9050919050565b60006020820190506130946000830184612c31565b92915050565b60006020820190506130af6000830184612c40565b92915050565b60006130bf6130d0565b90506130cb8282613313565b919050565b6000604051905090565b600067ffffffffffffffff8211156130f5576130f46133db565b5b6130fe8261341e565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600061313d8261325e565b91506131488361325e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561317d5761317c61334e565b5b828201905092915050565b60006131938261325e565b915061319e8361325e565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156131d7576131d661334e565b5b828202905092915050565b60006131ed8261325e565b91506131f88361325e565b92508282101561320b5761320a61334e565b5b828203905092915050565b60006132218261323e565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b838110156132a2578082015181840152602081019050613287565b838111156132b1576000848401525b50505050565b60006132c28261325e565b915060008214156132d6576132d561334e565b5b600182039050919050565b600060028204905060018216806132f957607f821691505b6020821081141561330d5761330c61337d565b5b50919050565b61331c8261341e565b810181811067ffffffffffffffff8211171561333b5761333a6133db565b5b80604052505050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f455243323057697468526174653a20696e76616c6964206e6f6e636500000000600082015250565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f20616d6f756e74206578636565647320616c6c6f77616e636500000000000000600082015250565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b7f455243323057697468526174653a20696e76616c6964207369676e6174757265600082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f455243323057697468526174653a207065726d6974206861732065787069726560008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206160008201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d200000000000000000000000600082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f52656e45524332303a2063616e2774207472616e7366657220746f20746f6b6560008201527f6e20616464726573730000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b7f455243323057697468526174653a2061646472657373206d757374206e6f742060008201527f6265203078300000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6139d281613216565b81146139dd57600080fd5b50565b6139e981613228565b81146139f457600080fd5b50565b613a0081613234565b8114613a0b57600080fd5b50565b613a178161325e565b8114613a2257600080fd5b50565b613a2e81613268565b8114613a3957600080fd5b5056fea264697066735822122070275e69b5e27aecd197bbcc16e1beb43797b491c509102768ee54212e08502764736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "burn(address,uint256)": {
        "notice": "burn can only be called by the tokens' associated Gateway contract. See Gateway's burn functions instead."
      },
      "mint(address,uint256)": {
        "notice": "mint can only be called by the tokens' associated Gateway contract. See Gateway's mint function instead."
      }
    },
    "notice": "RenERC20 represents a digital asset that has been bridged on to the Ethereum ledger. It exposes mint and burn functions that can only be called by it's associated Gateway contract.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 773,
        "contract": "src/RenAsset/RenAsset.sol:RenAssetV2",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 776,
        "contract": "src/RenAsset/RenAsset.sol:RenAssetV2",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1994,
        "contract": "src/RenAsset/RenAsset.sol:RenAssetV2",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 945,
        "contract": "src/RenAsset/RenAsset.sol:RenAssetV2",
        "label": "_balances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 951,
        "contract": "src/RenAsset/RenAsset.sol:RenAssetV2",
        "label": "_allowances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 953,
        "contract": "src/RenAsset/RenAsset.sol:RenAssetV2",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 955,
        "contract": "src/RenAsset/RenAsset.sol:RenAssetV2",
        "label": "_name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 957,
        "contract": "src/RenAsset/RenAsset.sol:RenAssetV2",
        "label": "_symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 1498,
        "contract": "src/RenAsset/RenAsset.sol:RenAssetV2",
        "label": "__gap",
        "offset": 0,
        "slot": "56",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 9204,
        "contract": "src/RenAsset/RenAsset.sol:RenAssetV2",
        "label": "_nonces",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9206,
        "contract": "src/RenAsset/RenAsset.sol:RenAssetV2",
        "label": "_version",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 9208,
        "contract": "src/RenAsset/RenAsset.sol:RenAssetV2",
        "label": "_domainSeparator",
        "offset": 0,
        "slot": "103",
        "type": "t_bytes32"
      },
      {
        "astId": 9215,
        "contract": "src/RenAsset/RenAsset.sol:RenAssetV2",
        "label": "__gap",
        "offset": 0,
        "slot": "104",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 653,
        "contract": "src/RenAsset/RenAsset.sol:RenAssetV2",
        "label": "_owner",
        "offset": 0,
        "slot": "152",
        "type": "t_address"
      },
      {
        "astId": 766,
        "contract": "src/RenAsset/RenAsset.sol:RenAssetV2",
        "label": "__gap",
        "offset": 0,
        "slot": "153",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 9434,
        "contract": "src/RenAsset/RenAsset.sol:RenAssetV2",
        "label": "_decimals",
        "offset": 0,
        "slot": "202",
        "type": "t_uint8"
      },
      {
        "astId": 9438,
        "contract": "src/RenAsset/RenAsset.sol:RenAssetV2",
        "label": "__gap",
        "offset": 0,
        "slot": "203",
        "type": "t_array(t_uint256)48_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)48_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}