{
  "address": "0xB633D32caE9a8063bDBf89d59F0d0F615f4Cd2C7",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "_asset",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_selectorHash",
          "type": "bytes32"
        }
      ],
      "name": "LogAssetUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "_chain",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_selectorHash",
          "type": "bytes32"
        }
      ],
      "name": "LogChainUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "recipientAddress",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "recipientChain",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "recipientPayload",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lockNonce",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "recipientAddressIndexed",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "recipientChainIndexed",
          "type": "string"
        }
      ],
      "name": "LogLockToChain",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_newPreviousGateway",
          "type": "address"
        }
      ],
      "name": "LogPreviousGatewayUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "sigHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "nHash",
          "type": "bytes32"
        }
      ],
      "name": "LogRelease",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IRenVMSignatureVerifier",
          "name": "_newSignatureVerifier",
          "type": "address"
        }
      ],
      "name": "LogSignatureVerifierUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_newToken",
          "type": "address"
        }
      ],
      "name": "LogTokenUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "chain_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "asset_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "signatureVerifier_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        }
      ],
      "name": "__GatewayStateManager_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "chain_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "asset_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "signatureVerifier_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        }
      ],
      "name": "__LockGateway_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chain",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eventNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "recipientAddress",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "recipientChain",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "recipientPayload",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "lock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "previousGateway",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "pHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "nHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "release",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "selectorHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "signatureVerifier",
      "outputs": [
        {
          "internalType": "contract IRenVMSignatureVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "name": "status",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "nextAsset",
          "type": "string"
        }
      ],
      "name": "updateAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "nextChain",
          "type": "string"
        }
      ],
      "name": "updateChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nextPreviousGateway",
          "type": "address"
        }
      ],
      "name": "updatePreviousGateway",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRenVMSignatureVerifier",
          "name": "nextSignatureVerifier",
          "type": "address"
        }
      ],
      "name": "updateSignatureVerifier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nextToken",
          "type": "address"
        }
      ],
      "name": "updateToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x626b0dcb4138ceccdfbf0f2001be9f1b9d818030a595ca159324261a123f0f36",
  "receipt": {
    "to": "0x2222229fb3318A6375FA78fd299A9a42aC6A8fbF",
    "from": "0xD5B5b26521665Cb37623DCA0E49c553b41dbF076",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "3030058",
    "logsBloom": "0x
    "blockHash": "0x892b2fac759f98de2e4c28be8d9d792d23a83b8c05e887620cc119ac41c51d73",
    "transactionHash": "0x626b0dcb4138ceccdfbf0f2001be9f1b9d818030a595ca159324261a123f0f36",
    "logs": [],
    "blockNumber": 27656699,
    "cumulativeGasUsed": "3162115",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "5dcb7bb5888a32647c27b052cd7c144f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_asset\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_selectorHash\",\"type\":\"bytes32\"}],\"name\":\"LogAssetUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_chain\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_selectorHash\",\"type\":\"bytes32\"}],\"name\":\"LogChainUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"recipientAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"recipientChain\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"recipientPayload\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lockNonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"recipientAddressIndexed\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"recipientChainIndexed\",\"type\":\"string\"}],\"name\":\"LogLockToChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newPreviousGateway\",\"type\":\"address\"}],\"name\":\"LogPreviousGatewayUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"sigHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"nHash\",\"type\":\"bytes32\"}],\"name\":\"LogRelease\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IRenVMSignatureVerifier\",\"name\":\"_newSignatureVerifier\",\"type\":\"address\"}],\"name\":\"LogSignatureVerifierUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newToken\",\"type\":\"address\"}],\"name\":\"LogTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"chain_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"asset_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"signatureVerifier_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"__GatewayStateManager_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"chain_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"asset_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"signatureVerifier_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"__LockGateway_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chain\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eventNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"recipientAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"recipientChain\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"recipientPayload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousGateway\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"pHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"release\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selectorHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signatureVerifier\",\"outputs\":[{\"internalType\":\"contract IRenVMSignatureVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"status\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nextAsset\",\"type\":\"string\"}],\"name\":\"updateAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nextChain\",\"type\":\"string\"}],\"name\":\"updateChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nextPreviousGateway\",\"type\":\"address\"}],\"name\":\"updatePreviousGateway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRenVMSignatureVerifier\",\"name\":\"nextSignatureVerifier\",\"type\":\"address\"}],\"name\":\"updateSignatureVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nextToken\",\"type\":\"address\"}],\"name\":\"updateToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"lock(string,string,bytes,uint256)\":{\"params\":{\"amount\":\"The amount of the token being locked, in the asset's        smallest unit. (e.g. satoshis for BTC)\",\"recipientAddress\":\"The address to which the locked assets will be        minted to. The address should be a plain-text address, without        decoding to bytes first.\",\"recipientChain\":\"The target chain to which the assets are being        moved to.\",\"recipientPayload\":\"An optional payload to be passed to the        recipient chain along with the address.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"release(bytes32,uint256,bytes32,bytes)\":{\"params\":{\"amount\":\"The amount of the token being minted, in its smallest        value. (e.g. satoshis for BTC).\",\"nHash\":\"(nonce hash) The hash of the nonce, amount and pHash.\",\"pHash\":\"(payload hash) The hash of the payload associated with the        mint.\",\"sig\":\"The signature of the hash of the following values:        (pHash, amount, msg.sender, nHash), signed by the mintAuthority.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateAsset(string)\":{\"params\":{\"nextAsset\":\"The new asset.\"}},\"updateChain(string)\":{\"params\":{\"nextChain\":\"The new chain.\"}},\"updatePreviousGateway(address)\":{\"params\":{\"nextPreviousGateway\":\"The new gateway contract's address.\"}},\"updateSignatureVerifier(address)\":{\"params\":{\"nextSignatureVerifier\":\"The new verifier contract address.\"}},\"updateToken(address)\":{\"params\":{\"nextToken\":\"The new ERC20 token contract's address.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"lock(string,string,bytes,uint256)\":{\"notice\":\"burn destroys tokens after taking a fee for the `_feeRecipient`,         allowing the associated assets to be released on their native         chain.\"},\"release(bytes32,uint256,bytes32,bytes)\":{\"notice\":\"mint verifies a mint approval signature from RenVM and creates         tokens after taking a fee for the `_feeRecipient`.\"},\"updateAsset(string)\":{\"notice\":\"Allow the owner to update the asset.\"},\"updateChain(string)\":{\"notice\":\"Allow the owner to update the chain.\"},\"updatePreviousGateway(address)\":{\"notice\":\"Allow the owner to update the previous gateway used for backwards compatibility.\"},\"updateSignatureVerifier(address)\":{\"notice\":\"Allow the owner to update the signature verifier contract.\"},\"updateToken(address)\":{\"notice\":\"Allow the owner to update the ERC20 token contract.\"}},\"notice\":\"LockGatewayV3 handles verifying lock and release requests. A mintAuthority approves new assets to be minted by providing a digital signature.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Gateways/LockGateway.sol\":\"LockGatewayV3\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x891fbf39ac5b9524f417db912d33684f239195a0fc5c11db439659676e51aab6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf449ca0a763d4b1b4462cf8706857074492f324020a2b9d099181b5383055ad3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x6795c369a4eefa78468e38966f7851fbc2dda5e5b9ccd3fa2b45970e2e4d3abd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x14351164423eade7f2dbac5ca9ab8aeded8694f3b2d7a9e0114a2b3b6558198d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xca2eb23a188f213d914fad982985d07e491dbc9960a387d4469bfce5c48911b1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            Address.functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcbccf806d646bd9e2594650917208245d45998b887d5fc914de424247f5f9f9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0x8ddea9f930f26e588ea606f44c90d2623560c908e38614a03a4ca78aea8f9202\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x5615339d191e77be7e46319b67856f9355786f705b7b3c4a7237ab70c1864ab1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable ERC1967Proxy(_logic, _data) {\\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeToAndCall(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\",\"keccak256\":\"0x2bf89a0dae89f861c5e8013478e650e918d98d376e75393867ccec88b0bf2b90\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5d15d280d1f868f59a8264dc73f7ea8c51f10d78aac864b2f2ad29412d187ff5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbc991a1cf357ce19480831a40792c814238a3b5458134703682abd8aa39719fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0x49ebdac5d515aebb95168564158940b79d7d5d12fbfe59cec546a00d57fee64a\",\"license\":\"MIT\"},\"src/Gateways/LockGateway.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {RenAssetV2} from \\\"../RenAsset/RenAsset.sol\\\";\\nimport {SafeTransferWithFees} from \\\"./common/SafeTransferWithFees.sol\\\";\\nimport {GatewayStateV3, GatewayStateManagerV3} from \\\"./common/GatewayState.sol\\\";\\nimport {RenVMHashes} from \\\"./common/RenVMHashes.sol\\\";\\nimport {ILockGateway} from \\\"./interfaces/ILockGateway.sol\\\";\\nimport {CORRECT_SIGNATURE_RETURN_VALUE_} from \\\"./common/RenVMSignatureVerifier.sol\\\";\\n\\n/// LockGatewayV3 handles verifying lock and release requests. A mintAuthority\\n/// approves new assets to be minted by providing a digital signature.\\ncontract LockGatewayV3 is Initializable, OwnableUpgradeable, GatewayStateV3, GatewayStateManagerV3, ILockGateway {\\n    using SafeERC20 for IERC20;\\n    using SafeTransferWithFees for IERC20;\\n\\n    function __LockGateway_init(\\n        string calldata chain_,\\n        string calldata asset_,\\n        address signatureVerifier_,\\n        address token_\\n    ) external initializer {\\n        OwnableUpgradeable.__Ownable_init();\\n        GatewayStateManagerV3.__GatewayStateManager_init(chain_, asset_, signatureVerifier_, token_);\\n    }\\n\\n    // Public functions ////////////////////////////////////////////////////////\\n\\n    /// @notice burn destroys tokens after taking a fee for the `_feeRecipient`,\\n    ///         allowing the associated assets to be released on their native\\n    ///         chain.\\n    ///\\n    /// @param recipientAddress The address to which the locked assets will be\\n    ///        minted to. The address should be a plain-text address, without\\n    ///        decoding to bytes first.\\n    /// @param recipientChain The target chain to which the assets are being\\n    ///        moved to.\\n    /// @param recipientPayload An optional payload to be passed to the\\n    ///        recipient chain along with the address.\\n    /// @param amount The amount of the token being locked, in the asset's\\n    ///        smallest unit. (e.g. satoshis for BTC)\\n    function lock(\\n        string memory recipientAddress,\\n        string memory recipientChain,\\n        bytes memory recipientPayload,\\n        uint256 amount\\n    ) external override returns (uint256) {\\n        // The recipient must not be empty. Better validation is possible,\\n        // but would need to be customized for each destination ledger.\\n        require(bytes(recipientAddress).length != 0, \\\"LockGateway: to address is empty\\\");\\n\\n        // Burn the tokens. If the user doesn't have enough tokens, this will\\n        // throw.\\n        uint256 transferredAmount = IERC20(token()).safeTransferFromWithFees(msg.sender, address(this), amount);\\n\\n        uint256 lockNonce = eventNonce();\\n\\n        emit LogLockToChain(\\n            recipientAddress,\\n            recipientChain,\\n            recipientPayload,\\n            transferredAmount,\\n            lockNonce,\\n            recipientAddress,\\n            recipientChain\\n        );\\n\\n        _eventNonce = lockNonce + 1;\\n\\n        return amount;\\n    }\\n\\n    /// @notice mint verifies a mint approval signature from RenVM and creates\\n    ///         tokens after taking a fee for the `_feeRecipient`.\\n    ///\\n    /// @param pHash (payload hash) The hash of the payload associated with the\\n    ///        mint.\\n    /// @param amount The amount of the token being minted, in its smallest\\n    ///        value. (e.g. satoshis for BTC).\\n    /// @param nHash (nonce hash) The hash of the nonce, amount and pHash.\\n    /// @param sig The signature of the hash of the following values:\\n    ///        (pHash, amount, msg.sender, nHash), signed by the mintAuthority.\\n    function release(\\n        bytes32 pHash,\\n        uint256 amount,\\n        bytes32 nHash,\\n        bytes memory sig\\n    ) external override returns (uint256) {\\n        // Calculate the hash signed by RenVM. This binds the payload hash,\\n        // amount, msg.sender and nonce hash to the signature.\\n        bytes32 sigHash = RenVMHashes.calculateSigHash(pHash, amount, selectorHash(), msg.sender, nHash);\\n\\n        // Check that the signature hasn't been redeemed.\\n        require(!status(sigHash) && !status(nHash), \\\"LockGateway: signature already spent\\\");\\n\\n        // If the signature fails verification, throw an error.\\n        if (\\n            GatewayStateManagerV3.signatureVerifier().isValidSignature(sigHash, sig) != CORRECT_SIGNATURE_RETURN_VALUE_\\n        ) {\\n            revert(\\\"LockGateway: invalid signature\\\");\\n        }\\n\\n        // Update the status for both the signature hash and the nHash.\\n        _status[sigHash] = true;\\n        _status[nHash] = true;\\n\\n        // Mint the amount to the msg.sender.\\n        IERC20(token()).safeTransfer(msg.sender, amount);\\n\\n        // Emit a log with a unique identifier 'n'.\\n        emit LogRelease(msg.sender, amount, sigHash, nHash);\\n\\n        return amount;\\n    }\\n}\\n\",\"keccak256\":\"0x5c13afedece8e638ac5a94a0b8c215225e2d0cf383644f9025467f0d70622bd8\",\"license\":\"GPL-3.0\"},\"src/Gateways/common/GatewayState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport {IRenVMSignatureVerifier} from \\\"./RenVMSignatureVerifier.sol\\\";\\nimport {ValidString} from \\\"../../libraries/ValidString.sol\\\";\\nimport {RenVMHashes} from \\\"./RenVMHashes.sol\\\";\\n\\ncontract GatewayStateV3 {\\n    // Selector hash details.\\n    string internal _chain;\\n    string internal _asset;\\n    bytes32 internal _selectorHash;\\n\\n    /// @notice Each signature can only be seen once.\\n    mapping(bytes32 => bool) internal _status;\\n\\n    /// @notice Each Gateway is tied to a specific asset.\\n    address internal _token;\\n\\n    IRenVMSignatureVerifier internal _signatureVerifier;\\n\\n    address internal _previousGateway;\\n\\n    uint256 internal _eventNonce;\\n\\n    uint256[43] private __gap;\\n}\\n\\ncontract GatewayStateManagerV3 is Initializable, OwnableUpgradeable, GatewayStateV3 {\\n    event LogChainUpdated(string _chain, bytes32 _selectorHash);\\n    event LogAssetUpdated(string _asset, bytes32 _selectorHash);\\n    event LogSignatureVerifierUpdated(IRenVMSignatureVerifier indexed _newSignatureVerifier);\\n    event LogTokenUpdated(address indexed _newToken);\\n    event LogPreviousGatewayUpdated(address indexed _newPreviousGateway);\\n\\n    function __GatewayStateManager_init(\\n        string calldata chain_,\\n        string calldata asset_,\\n        address signatureVerifier_,\\n        address token_\\n    ) public initializer {\\n        __Ownable_init();\\n        updateChain(chain_);\\n        updateAsset(asset_);\\n        updateSignatureVerifier(IRenVMSignatureVerifier(signatureVerifier_));\\n        updateToken(token_);\\n    }\\n\\n    // GETTERS /////////////////////////////////////////////////////////////////\\n\\n    function chain() public view returns (string memory) {\\n        return _chain;\\n    }\\n\\n    function asset() public view returns (string memory) {\\n        return _asset;\\n    }\\n\\n    function selectorHash() public view returns (bytes32) {\\n        return _selectorHash;\\n    }\\n\\n    function token() public view returns (address) {\\n        return _token;\\n    }\\n\\n    function signatureVerifier() public view returns (IRenVMSignatureVerifier) {\\n        return _signatureVerifier;\\n    }\\n\\n    function previousGateway() public view returns (address) {\\n        return _previousGateway;\\n    }\\n\\n    function eventNonce() public view returns (uint256) {\\n        return _eventNonce;\\n    }\\n\\n    // GOVERNANCE //////////////////////////////////////////////////////////////\\n\\n    /// @notice Allow the owner to update the chain.\\n    ///\\n    /// @param nextChain The new chain.\\n    function updateChain(string calldata nextChain) public onlyOwner {\\n        require(ValidString.isNotEmpty(nextChain), \\\"Gateway: chain can't be empty\\\");\\n        require(ValidString.isAlphanumeric(nextChain), \\\"Gateway: symbol must be alphanumeric\\\");\\n\\n        _chain = nextChain;\\n\\n        bytes32 newSelectorHash = RenVMHashes.calculateSelectorHash(asset(), nextChain);\\n        _selectorHash = newSelectorHash;\\n        emit LogChainUpdated(nextChain, newSelectorHash);\\n    }\\n\\n    /// @notice Allow the owner to update the asset.\\n    ///\\n    /// @param nextAsset The new asset.\\n    function updateAsset(string calldata nextAsset) public onlyOwner {\\n        require(ValidString.isNotEmpty(nextAsset), \\\"Gateway: asset can't be empty\\\");\\n        require(ValidString.isAlphanumeric(nextAsset), \\\"Gateway: symbol must be alphanumeric\\\");\\n\\n        _asset = nextAsset;\\n\\n        bytes32 newSelectorHash = RenVMHashes.calculateSelectorHash(nextAsset, chain());\\n        _selectorHash = newSelectorHash;\\n        emit LogAssetUpdated(nextAsset, newSelectorHash);\\n    }\\n\\n    /// @notice Allow the owner to update the signature verifier contract.\\n    ///\\n    /// @param nextSignatureVerifier The new verifier contract address.\\n    function updateSignatureVerifier(IRenVMSignatureVerifier nextSignatureVerifier) public onlyOwner {\\n        require(address(nextSignatureVerifier) != address(0x0), \\\"Gateway: invalid signature verifier\\\");\\n        _signatureVerifier = nextSignatureVerifier;\\n        emit LogSignatureVerifierUpdated(nextSignatureVerifier);\\n    }\\n\\n    /// @notice Allow the owner to update the ERC20 token contract.\\n    ///\\n    /// @param nextToken The new ERC20 token contract's address.\\n    function updateToken(address nextToken) public onlyOwner {\\n        require(address(nextToken) != address(0x0), \\\"Gateway: invalid token\\\");\\n        _token = nextToken;\\n        emit LogTokenUpdated(nextToken);\\n    }\\n\\n    /// @notice Allow the owner to update the previous gateway used for\\n    /// backwards compatibility.\\n    ///\\n    /// @param nextPreviousGateway The new gateway contract's address.\\n    function updatePreviousGateway(address nextPreviousGateway) external onlyOwner {\\n        require(address(nextPreviousGateway) != address(0x0), \\\"Gateway: invalid address\\\");\\n        _previousGateway = nextPreviousGateway;\\n        emit LogPreviousGatewayUpdated(nextPreviousGateway);\\n    }\\n\\n    // PREVIOUS GATEWAY ////////////////////////////////////////////////////////\\n\\n    modifier onlyPreviousGateway() {\\n        address previousGateway_ = previousGateway();\\n\\n        // If there's no previous gateway, the second require should also fail,\\n        // but this require will provide a more informative reason.\\n        require(previousGateway_ != address(0x0), \\\"Gateway: no previous gateway\\\");\\n\\n        require(_msgSender() == previousGateway_, \\\"Gateway: not authorized\\\");\\n        _;\\n    }\\n\\n    function status(bytes32 hash) public view returns (bool) {\\n        if (_status[hash]) {\\n            return true;\\n        }\\n\\n        address previousGateway_ = previousGateway();\\n        if (previousGateway_ != address(0x0)) {\\n            return GatewayStateManagerV3(previousGateway_).status(hash);\\n        }\\n\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0x6eeb37ee9ffe916a55b54153a177ca98b3c3827a23a83c0dad99392d8d0ff701\",\"license\":\"GPL-3.0\"},\"src/Gateways/common/RenVMHashes.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nlibrary RenVMHashes {\\n    /// @notice calculateSelectorHash calculates and hashes the selector hash,\\n    ///         which is formatted as `ASSET/toCHAIN`.\\n    function calculateSelectorHash(string memory assetSymbol, string memory chain) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(assetSymbol, \\\"/to\\\", chain));\\n    }\\n\\n    /// @notice calculateSigHash hashes the parameters to reconstruct the data\\n    ///         signed by RenVM.\\n    function calculateSigHash(\\n        bytes32 pHash,\\n        uint256 amount,\\n        bytes32 selectorHash,\\n        address to,\\n        bytes32 nHash\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(pHash, amount, selectorHash, to, nHash));\\n    }\\n}\\n\",\"keccak256\":\"0x0762085e3ff81ec0f432e2a6891fa54ecf3afcfbf931a1b6e046024abb4a48d0\",\"license\":\"GPL-3.0\"},\"src/Gateways/common/RenVMSignatureVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {TransparentUpgradeableProxy} from \\\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\\\";\\nimport {IERC1271} from \\\"@openzeppelin/contracts/interfaces/IERC1271.sol\\\";\\n\\n/* solium-disable-next-line no-empty-blocks */\\ninterface IRenVMSignatureVerifier is IERC1271 {\\n\\n}\\n\\ncontract RenVMSignatureVerifierStateV1 {\\n    address internal _mintAuthority;\\n    uint256[49] private __gap;\\n}\\n\\n// ERC-1271 uses 4-byte value instead of a boolean so that if a bug causes\\n// another function to be called (e.g. by proxy misconfiguration or fallbacks),\\n// a truthy value would not be interpreted as a successful check.\\n// See https://github.com/ethereum/EIPs/issues/1271#issuecomment-442328339.\\nbytes4 constant CORRECT_SIGNATURE_RETURN_VALUE_ = 0x1626ba7e;\\n\\ncontract RenVMSignatureVerifierV1 is Initializable, OwnableUpgradeable, RenVMSignatureVerifierStateV1, IERC1271 {\\n    event LogMintAuthorityUpdated(address indexed _newMintAuthority);\\n\\n    // bytes4(keccak256(\\\"isValidSignature(bytes32,bytes)\\\")\\n    bytes4 public constant CORRECT_SIGNATURE_RETURN_VALUE = 0x1626ba7e; // CORRECT_SIGNATURE_RETURN_VALUE_\\n    bytes4 public constant INCORRECT_SIGNATURE_RETURN_VALUE = 0x000000;\\n\\n    function __RenVMSignatureVerifier_init(address mintAuthority_) external initializer {\\n        __Ownable_init();\\n        updateMintAuthority(mintAuthority_);\\n    }\\n\\n    function mintAuthority() public view returns (address) {\\n        return _mintAuthority;\\n    }\\n\\n    // GOVERNANCE //////////////////////////////////////////////////////////////\\n\\n    modifier onlyOwnerOrMintAuthority() {\\n        require(_msgSender() == owner() || _msgSender() == mintAuthority(), \\\"SignatureVerifier: not authorized\\\");\\n        _;\\n    }\\n\\n    /// @notice Allow the owner or mint authority to update the mint authority.\\n    ///\\n    /// @param nextMintAuthority The new mint authority address.\\n    function updateMintAuthority(address nextMintAuthority) public onlyOwnerOrMintAuthority {\\n        require(nextMintAuthority != address(0), \\\"SignatureVerifier: mintAuthority cannot be set to address zero\\\");\\n        _mintAuthority = nextMintAuthority;\\n        emit LogMintAuthorityUpdated(_mintAuthority);\\n    }\\n\\n    /// @notice verifySignature checks the the provided signature matches the\\n    /// provided parameters.\\n    function isValidSignature(bytes32 sigHash, bytes memory signature)\\n        external\\n        view\\n        override\\n        returns (bytes4 magicValue)\\n    {\\n        address mingAuthority_ = mintAuthority();\\n        require(mingAuthority_ != address(0x0), \\\"SignatureVerifier: mintAuthority not initialized\\\");\\n        if (mingAuthority_ == ECDSA.recover(sigHash, signature)) {\\n            return CORRECT_SIGNATURE_RETURN_VALUE;\\n        } else {\\n            return INCORRECT_SIGNATURE_RETURN_VALUE;\\n        }\\n    }\\n}\\n\\ncontract RenVMSignatureVerifierProxy is TransparentUpgradeableProxy {\\n    constructor(\\n        address logic,\\n        address admin,\\n        bytes memory data\\n    ) payable TransparentUpgradeableProxy(logic, admin, data) {}\\n}\\n\",\"keccak256\":\"0x2582e4bd4cebcd57f085338cfe0fd1c3318567536ee45f7ab843bdd23d82a645\",\"license\":\"GPL-3.0\"},\"src/Gateways/common/SafeTransferWithFees.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeTransferWithFees {\\n    using SafeERC20 for IERC20;\\n\\n    function safeTransferFromWithFees(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal returns (uint256) {\\n        uint256 balanceBefore = token.balanceOf(to);\\n        token.safeTransferFrom(from, to, value);\\n        uint256 balanceAfter = token.balanceOf(to);\\n\\n        uint256 balanceIncrease = balanceAfter - balanceBefore;\\n\\n        return Math.min(value, balanceIncrease);\\n    }\\n}\\n\",\"keccak256\":\"0x592476ab1f6850bfab519f6520dca27ad6b49cf9fd686948672d77150787d8bc\",\"license\":\"GPL-3.0\"},\"src/Gateways/interfaces/ILockGateway.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nabstract contract ILockGateway {\\n    event LogRelease(address indexed recipient, uint256 amount, bytes32 indexed sigHash, bytes32 indexed nHash);\\n    event LogLockToChain(\\n        string recipientAddress,\\n        string recipientChain,\\n        bytes recipientPayload,\\n        uint256 amount,\\n        uint256 indexed lockNonce,\\n        // Indexed versions of previous parameters.\\n        string indexed recipientAddressIndexed,\\n        string indexed recipientChainIndexed\\n    );\\n\\n    function lock(\\n        string memory recipientAddress,\\n        string memory recipientChain,\\n        bytes memory recipientPayload,\\n        uint256 amount\\n    ) external virtual returns (uint256);\\n\\n    function release(\\n        bytes32 pHash,\\n        uint256 amount,\\n        bytes32 nHash,\\n        bytes memory sig\\n    ) external virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x3cca8061e4589c5d24405005bc7b767c5f35da09852d5ee2ed29fbe52bd53f38\",\"license\":\"GPL-3.0\"},\"src/RenAsset/ERC20WithPermit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport {ERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract ERC20WithPermitState {\\n    mapping(address => uint256) internal _nonces;\\n\\n    // If the token is redeployed, the version is increased to prevent a permit\\n    // signature being used on both token instances.\\n    string internal _version;\\n\\n    // --- EIP712 niceties ---\\n    bytes32 internal _domainSeparator;\\n    // PERMIT_TYPEHASH is the value returned from\\n    // keccak256(\\\"Permit(address holder,address spender,uint256 nonce,uint256 expiry,bool allowed)\\\")\\n    bytes32 public constant PERMIT_TYPEHASH = 0xea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb;\\n\\n    uint256[48] private __gap;\\n}\\n\\n/// Taken from the DAI token.\\ncontract ERC20WithPermit is Initializable, ERC20Upgradeable, ERC20WithPermitState {\\n    function __ERC20WithPermit_init(\\n        uint256 chainId,\\n        string memory version_,\\n        string memory name_,\\n        string memory symbol_\\n    ) public initializer {\\n        __ERC20_init(name_, symbol_);\\n        _version = version_;\\n        _domainSeparator = keccak256(\\n            abi.encode(\\n                keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                keccak256(bytes(name())),\\n                keccak256(bytes(version_)),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function nonces(address holder) public view returns (uint256) {\\n        return _nonces[holder];\\n    }\\n\\n    function version() external view returns (string memory) {\\n        return _version;\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view returns (bytes32) {\\n        return _domainSeparator;\\n    }\\n\\n    // --- Approve by signature ---\\n    function permit(\\n        address holder,\\n        address spender,\\n        uint256 nonce,\\n        uint256 expiry,\\n        bool allowed,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR(),\\n                keccak256(abi.encode(PERMIT_TYPEHASH, holder, spender, nonce, expiry, allowed))\\n            )\\n        );\\n\\n        require(holder != address(0), \\\"ERC20WithRate: address must not be 0x0\\\");\\n        require(holder == ecrecover(digest, v, r, s), \\\"ERC20WithRate: invalid signature\\\");\\n        require(expiry == 0 || block.timestamp <= expiry, \\\"ERC20WithRate: permit has expired\\\");\\n        require(nonce == nonces(holder), \\\"ERC20WithRate: invalid nonce\\\");\\n        _nonces[holder] = nonce + 1;\\n        uint256 amount = allowed ? uint256(int256(-1)) : 0;\\n        _approve(holder, spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x5732912d381904b4969a040be69ff22558e5e32940e3953e3558bbfeefe2b30c\",\"license\":\"GPL-3.0\"},\"src/RenAsset/RenAsset.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {ERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport {StringsUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\n\\nimport {ERC20WithPermit} from \\\"./ERC20WithPermit.sol\\\";\\n\\nimport \\\"./ERC20WithPermit.sol\\\";\\n\\ncontract RenAssetStateV2 {\\n    string public constant NAME = \\\"RenAsset\\\";\\n\\n    uint8 internal _decimals;\\n\\n    uint256[48] private __gap;\\n}\\n\\n/// RenAsset represents a digital asset that has been bridged by RenVM. It\\n/// exposes mint and burn functions that can only be called by it's associated\\n/// MintGateway contract.\\ncontract RenAssetV2 is Initializable, ERC20Upgradeable, ERC20WithPermit, OwnableUpgradeable, RenAssetStateV2 {\\n    /* solium-disable-next-line no-empty-blocks */\\n    function __RenAsset_init(\\n        uint256 chainId,\\n        string memory version_,\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) external initializer {\\n        ERC20Upgradeable.__ERC20_init(name_, symbol_);\\n        ERC20WithPermit.__ERC20WithPermit_init(chainId, version_, name_, symbol_);\\n        OwnableUpgradeable.__Ownable_init();\\n        RenAssetStateV2._decimals = decimals_;\\n    }\\n\\n    function decimals() public view override returns (uint8) {\\n        return RenAssetStateV2._decimals;\\n    }\\n\\n    /// @notice mint can only be called by the tokens' associated Gateway\\n    /// contract. See Gateway's mint function instead.\\n    function mint(address _to, uint256 _amount) external onlyOwner {\\n        _mint(_to, _amount);\\n    }\\n\\n    /// @notice burn can only be called by the tokens' associated Gateway\\n    /// contract. See Gateway's burn functions instead.\\n    function burn(address _from, uint256 _amount) external onlyOwner {\\n        _burn(_from, _amount);\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        // Disallow sending tokens to the ERC20 contract address - a common\\n        // mistake caused by the Ethereum transaction's `to` needing to be\\n        // the token's address.\\n        require(recipient != address(this), \\\"RenERC20: can't transfer to token address\\\");\\n        require(\\n            balanceOf(_msgSender()) >= amount,\\n            string(\\n                abi.encodePacked(\\n                    \\\"ERC20: transfer from \\\",\\n                    StringsUpgradeable.toHexString(uint160(_msgSender()), 20),\\n                    \\\" amount exceeds allowance\\\"\\n                )\\n            )\\n        );\\n        return super.transfer(recipient, amount);\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        // Disallow sending tokens to the ERC20 contract address (see comment\\n        // in `transfer`).\\n        require(recipient != address(this), \\\"RenERC20: can't transfer to token address\\\");\\n        return super.transferFrom(sender, recipient, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xa0c103f3498ee79b327958709cb69542e3c3a2629689b24247e2bbb45c7d8ea6\",\"license\":\"GPL-3.0\"},\"src/libraries/ValidString.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nlibrary ValidString {\\n    function isAlphanumeric(string memory _string) internal pure returns (bool) {\\n        for (uint256 i = 0; i < bytes(_string).length; i++) {\\n            uint8 char = uint8(bytes(_string)[i]);\\n            if (!((char >= 65 && char <= 90) || (char >= 97 && char <= 122) || (char >= 48 && char <= 57))) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function isNotEmpty(string memory _string) internal pure returns (bool) {\\n        return bytes(_string).length > 0;\\n    }\\n\\n    function isValidString(string memory _string) internal pure returns (bool) {\\n        return isAlphanumeric(_string) && isNotEmpty(_string);\\n    }\\n}\\n\",\"keccak256\":\"0x9ad61eb6d48c37d84cdbb98be3a0e577b94045ff018e3ce9b0af98b1dc64b3f7\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506135fd806100206000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c80639cffc715116100ad578063ca9d953211610071578063ca9d9532146102f5578063d489dc6c14610325578063f2fde38b14610343578063fc0c546a1461035f578063fde919f61461037d5761012c565b80639cffc71514610253578063aae8fdf014610283578063b2f2be9b1461029f578063c54216b4146102bb578063c763e5a1146102d75761012c565b806352ad0d5e116100f457806352ad0d5e146101c35780635667981b146101f3578063715018a61461020f5780637ad3def2146102195780638da5cb5b146102355761012c565b80631c3e6ee614610131578063205066421461014f578063297629761461016b57806338d52e0f146101895780635266ba0c146101a7575b600080fd5b61013961039b565b6040516101469190612d8a565b60405180910390f35b61016960048036038101906101649190612445565b6103a5565b005b6101736104b2565b6040516101809190612a43565b60405180910390f35b6101916104bc565b60405161019e9190612b2e565b60405180910390f35b6101c160048036038101906101bc9190612294565b61054e565b005b6101dd60048036038101906101d891906122ee565b6106c1565b6040516101ea9190612a28565b60405180910390f35b61020d600480360381019061020891906123cb565b6107ce565b005b610217610941565b005b610233600480360381019061022e9190612294565b6109c9565b005b61023d610b3c565b60405161024a91906129ad565b60405180910390f35b61026d6004803603810190610268919061231b565b610b66565b60405161027a9190612d8a565b60405180910390f35b61029d600480360381019061029891906123f8565b610dd8565b005b6102b960048036038101906102b49190612445565b61101e565b005b6102d560048036038101906102d091906123f8565b611113565b005b6102df611359565b6040516102ec9190612b2e565b60405180910390f35b61030f600480360381019061030a91906124ec565b6113eb565b60405161031c9190612d8a565b60405180910390f35b61032d6114ff565b60405161033a91906129ad565b60405180910390f35b61035d60048036038101906103589190612294565b611529565b005b610367611621565b60405161037491906129ad565b60405180910390f35b61038561164b565b6040516103929190612ae1565b60405180910390f35b6000606c54905090565b600060019054906101000a900460ff16806103cb575060008054906101000a900460ff16155b61040a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040190612c8a565b60405180910390fd5b60008060019054906101000a900460ff16159050801561045a576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610462611675565b61046c8787610dd8565b6104768585611113565b61047f836107ce565b610488826109c9565b80156104a95760008060016101000a81548160ff0219169083151502179055505b50505050505050565b6000606754905090565b6060606680546104cb9061300c565b80601f01602080910402602001604051908101604052809291908181526020018280546104f79061300c565b80156105445780601f1061051957610100808354040283529160200191610544565b820191906000526020600020905b81548152906001019060200180831161052757829003601f168201915b5050505050905090565b61055661175e565b73ffffffffffffffffffffffffffffffffffffffff16610574610b3c565b73ffffffffffffffffffffffffffffffffffffffff16146105ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c190612caa565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561063a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063190612c6a565b60405180910390fd5b80606b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f092a7f3d3a91b47e57583d808f4454c082a9c49b2582f836f5a301e982a2d04d60405160405180910390a250565b60006068600083815260200190815260200160002060009054906101000a900460ff16156106f257600190506107c9565b60006106fc6114ff565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146107c3578073ffffffffffffffffffffffffffffffffffffffff166352ad0d5e846040518263ffffffff1660e01b815260040161076b9190612a43565b60206040518083038186803b15801561078357600080fd5b505afa158015610797573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bb91906122c1565b9150506107c9565b60009150505b919050565b6107d661175e565b73ffffffffffffffffffffffffffffffffffffffff166107f4610b3c565b73ffffffffffffffffffffffffffffffffffffffff161461084a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084190612caa565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156108ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b190612d6a565b60405180910390fd5b80606a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167fb57359628f7b44e9842ff204fb5700f84d8c4f9c3fc9dae13e7a1aab8ed164f760405160405180910390a250565b61094961175e565b73ffffffffffffffffffffffffffffffffffffffff16610967610b3c565b73ffffffffffffffffffffffffffffffffffffffff16146109bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b490612caa565b60405180910390fd5b6109c76000611766565b565b6109d161175e565b73ffffffffffffffffffffffffffffffffffffffff166109ef610b3c565b73ffffffffffffffffffffffffffffffffffffffff1614610a45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3c90612caa565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610ab5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aac90612c4a565b60405180910390fd5b80606960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f02dec22a3d1e8f9cdc0c7cd17ecee187f635788c40755be0a72dcd86a05e564d60405160405180910390a250565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080610b7d8686610b766104b2565b338861182c565b9050610b88816106c1565b158015610b9b5750610b99846106c1565b155b610bda576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd190612d4a565b60405180910390fd5b631626ba7e60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916610c0961164b565b73ffffffffffffffffffffffffffffffffffffffff16631626ba7e83866040518363ffffffff1660e01b8152600401610c43929190612a5e565b60206040518083038186803b158015610c5b57600080fd5b505afa158015610c6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c93919061239e565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614610cf2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce990612cca565b60405180910390fd5b60016068600083815260200190815260200160002060006101000a81548160ff02191690831515021790555060016068600086815260200190815260200160002060006101000a81548160ff021916908315150217905550610d7c3386610d57611621565b73ffffffffffffffffffffffffffffffffffffffff166118689092919063ffffffff16565b83813373ffffffffffffffffffffffffffffffffffffffff167f9a0e734b1a87920f1af4cb8617268e9e5979afa7f36a620a4f90206f0ca57d4c88604051610dc49190612d8a565b60405180910390a484915050949350505050565b610de061175e565b73ffffffffffffffffffffffffffffffffffffffff16610dfe610b3c565b73ffffffffffffffffffffffffffffffffffffffff1614610e54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4b90612caa565b60405180910390fd5b610ea182828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506118ee565b610ee0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed790612d2a565b60405180910390fd5b610f2d82828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506118fb565b610f6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6390612baa565b60405180910390fd5b818160659190610f7d929190612028565b506000610fd5610f8b6104bc565b84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506119b5565b9050806067819055507f4dc1740772ca26480ca22d412de18818650c980e3aef84a3ca49cbe4fa4ed88083838360405161101193929190612afc565b60405180910390a1505050565b600060019054906101000a900460ff1680611044575060008054906101000a900460ff16155b611083576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107a90612c8a565b60405180910390fd5b60008060019054906101000a900460ff1615905080156110d3576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6110db611675565b6110e98787878787876103a5565b801561110a5760008060016101000a81548160ff0219169083151502179055505b50505050505050565b61111b61175e565b73ffffffffffffffffffffffffffffffffffffffff16611139610b3c565b73ffffffffffffffffffffffffffffffffffffffff161461118f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118690612caa565b60405180910390fd5b6111dc82828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506118ee565b61121b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121290612bea565b60405180910390fd5b61126882828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506118fb565b6112a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129e90612baa565b60405180910390fd5b8181606691906112b8929190612028565b50600061131083838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061130b611359565b6119b5565b9050806067819055507f2e7c1f9bcc3b09d8e05594ab5d17b6c9b15b24cd506c5212f051f22990d0813183838360405161134c93929190612afc565b60405180910390a1505050565b6060606580546113689061300c565b80601f01602080910402602001604051908101604052809291908181526020018280546113949061300c565b80156113e15780601f106113b6576101008083540402835291602001916113e1565b820191906000526020600020905b8154815290600101906020018083116113c457829003601f168201915b5050505050905090565b60008085511415611431576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142890612c0a565b60405180910390fd5b6000611467333085611441611621565b73ffffffffffffffffffffffffffffffffffffffff166119e8909392919063ffffffff16565b9050600061147361039b565b9050856040516114839190612967565b6040518091039020876040516114999190612967565b6040518091039020827fc06237815e14163806cc5c2447bc785b639c2f8b1f3f23872f226e5c31adb9958a8a8a886040516114d79493929190612b50565b60405180910390a46001816114ec9190612e7a565b606c819055508392505050949350505050565b6000606b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61153161175e565b73ffffffffffffffffffffffffffffffffffffffff1661154f610b3c565b73ffffffffffffffffffffffffffffffffffffffff16146115a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159c90612caa565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611615576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160c90612bca565b60405180910390fd5b61161e81611766565b50565b6000606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000606a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060019054906101000a900460ff168061169b575060008054906101000a900460ff16155b6116da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116d190612c8a565b60405180910390fd5b60008060019054906101000a900460ff16159050801561172a576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b611732611b57565b61173a611c30565b801561175b5760008060016101000a81548160ff0219169083151502179055505b50565b600033905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008585858585604051602001611847959493929190612a8e565b60405160208183030381529060405280519060200120905095945050505050565b6118e98363a9059cbb60e01b84846040516024016118879291906129ff565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611d19565b505050565b6000808251119050919050565b600080600090505b82518110156119aa57600083828151811061192157611920613116565b5b602001015160f81c60f81b60f81c905060418160ff16101580156119495750605a8160ff1611155b80611968575060618160ff16101580156119675750607a8160ff1611155b5b80611987575060308160ff1610158015611986575060398160ff1611155b5b611996576000925050506119b0565b5080806119a29061306f565b915050611903565b50600190505b919050565b600082826040516020016119ca92919061297e565b60405160208183030381529060405280519060200120905092915050565b6000808573ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b8152600401611a2491906129ad565b60206040518083038186803b158015611a3c57600080fd5b505afa158015611a50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a7491906125a7565b9050611aa38585858973ffffffffffffffffffffffffffffffffffffffff16611de0909392919063ffffffff16565b60008673ffffffffffffffffffffffffffffffffffffffff166370a08231866040518263ffffffff1660e01b8152600401611ade91906129ad565b60206040518083038186803b158015611af657600080fd5b505afa158015611b0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b2e91906125a7565b905060008282611b3e9190612ed0565b9050611b4a8582611e69565b9350505050949350505050565b600060019054906101000a900460ff1680611b7d575060008054906101000a900460ff16155b611bbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bb390612c8a565b60405180910390fd5b60008060019054906101000a900460ff161590508015611c0c576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8015611c2d5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680611c56575060008054906101000a900460ff16155b611c95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c8c90612c8a565b60405180910390fd5b60008060019054906101000a900460ff161590508015611ce5576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b611cf5611cf061175e565b611766565b8015611d165760008060016101000a81548160ff0219169083151502179055505b50565b6000611d7b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611e829092919063ffffffff16565b9050600081511115611ddb5780806020019051810190611d9b91906122c1565b611dda576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dd190612d0a565b60405180910390fd5b5b505050565b611e63846323b872dd60e01b858585604051602401611e01939291906129c8565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611d19565b50505050565b6000818310611e785781611e7a565b825b905092915050565b6060611e918484600085611e9a565b90509392505050565b606082471015611edf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ed690612c2a565b60405180910390fd5b611ee885611fae565b611f27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f1e90612cea565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611f509190612950565b60006040518083038185875af1925050503d8060008114611f8d576040519150601f19603f3d011682016040523d82523d6000602084013e611f92565b606091505b5091509150611fa2828286611fc1565b92505050949350505050565b600080823b905060008111915050919050565b60608315611fd157829050612021565b600083511115611fe45782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120189190612b2e565b60405180910390fd5b9392505050565b8280546120349061300c565b90600052602060002090601f016020900481019282612056576000855561209d565b82601f1061206f57803560ff191683800117855561209d565b8280016001018555821561209d579182015b8281111561209c578235825591602001919060010190612081565b5b5090506120aa91906120ae565b5090565b5b808211156120c75760008160009055506001016120af565b5090565b60006120de6120d984612dca565b612da5565b9050828152602081018484840111156120fa576120f9613183565b5b612105848285612fca565b509392505050565b600061212061211b84612dfb565b612da5565b90508281526020810184848401111561213c5761213b613183565b5b612147848285612fca565b509392505050565b60008135905061215e8161353d565b92915050565b60008151905061217381613554565b92915050565b6000813590506121888161356b565b92915050565b60008151905061219d81613582565b92915050565b600082601f8301126121b8576121b7613179565b5b81356121c88482602086016120cb565b91505092915050565b6000813590506121e081613599565b92915050565b60008083601f8401126121fc576121fb613179565b5b8235905067ffffffffffffffff81111561221957612218613174565b5b6020830191508360018202830111156122355761223461317e565b5b9250929050565b600082601f83011261225157612250613179565b5b813561226184826020860161210d565b91505092915050565b600081359050612279816135b0565b92915050565b60008151905061228e816135b0565b92915050565b6000602082840312156122aa576122a961318d565b5b60006122b88482850161214f565b91505092915050565b6000602082840312156122d7576122d661318d565b5b60006122e584828501612164565b91505092915050565b6000602082840312156123045761230361318d565b5b600061231284828501612179565b91505092915050565b600080600080608085870312156123355761233461318d565b5b600061234387828801612179565b94505060206123548782880161226a565b935050604061236587828801612179565b925050606085013567ffffffffffffffff81111561238657612385613188565b5b612392878288016121a3565b91505092959194509250565b6000602082840312156123b4576123b361318d565b5b60006123c28482850161218e565b91505092915050565b6000602082840312156123e1576123e061318d565b5b60006123ef848285016121d1565b91505092915050565b6000806020838503121561240f5761240e61318d565b5b600083013567ffffffffffffffff81111561242d5761242c613188565b5b612439858286016121e6565b92509250509250929050565b600080600080600080608087890312156124625761246161318d565b5b600087013567ffffffffffffffff8111156124805761247f613188565b5b61248c89828a016121e6565b9650965050602087013567ffffffffffffffff8111156124af576124ae613188565b5b6124bb89828a016121e6565b945094505060406124ce89828a0161214f565b92505060606124df89828a0161214f565b9150509295509295509295565b600080600080608085870312156125065761250561318d565b5b600085013567ffffffffffffffff81111561252457612523613188565b5b6125308782880161223c565b945050602085013567ffffffffffffffff81111561255157612550613188565b5b61255d8782880161223c565b935050604085013567ffffffffffffffff81111561257e5761257d613188565b5b61258a878288016121a3565b925050606061259b8782880161226a565b91505092959194509250565b6000602082840312156125bd576125bc61318d565b5b60006125cb8482850161227f565b91505092915050565b6125dd81612f04565b82525050565b6125ec81612f16565b82525050565b6125fb81612f22565b82525050565b600061260c82612e2c565b6126168185612e42565b9350612626818560208601612fd9565b61262f81613192565b840191505092915050565b600061264582612e2c565b61264f8185612e53565b935061265f818560208601612fd9565b80840191505092915050565b61267481612f94565b82525050565b60006126868385612e5e565b9350612693838584612fca565b61269c83613192565b840190509392505050565b60006126b282612e37565b6126bc8185612e5e565b93506126cc818560208601612fd9565b6126d581613192565b840191505092915050565b60006126eb82612e37565b6126f58185612e6f565b9350612705818560208601612fd9565b80840191505092915050565b600061271e602483612e5e565b9150612729826131a3565b604082019050919050565b6000612741602683612e5e565b915061274c826131f2565b604082019050919050565b6000612764601d83612e5e565b915061276f82613241565b602082019050919050565b6000612787602083612e5e565b91506127928261326a565b602082019050919050565b60006127aa602683612e5e565b91506127b582613293565b604082019050919050565b60006127cd601683612e5e565b91506127d8826132e2565b602082019050919050565b60006127f0601883612e5e565b91506127fb8261330b565b602082019050919050565b6000612813602e83612e5e565b915061281e82613334565b604082019050919050565b6000612836602083612e5e565b915061284182613383565b602082019050919050565b6000612859601e83612e5e565b9150612864826133ac565b602082019050919050565b600061287c601d83612e5e565b9150612887826133d5565b602082019050919050565b600061289f600383612e6f565b91506128aa826133fe565b600382019050919050565b60006128c2602a83612e5e565b91506128cd82613427565b604082019050919050565b60006128e5601d83612e5e565b91506128f082613476565b602082019050919050565b6000612908602483612e5e565b91506129138261349f565b604082019050919050565b600061292b602383612e5e565b9150612936826134ee565b604082019050919050565b61294a81612f8a565b82525050565b600061295c828461263a565b915081905092915050565b600061297382846126e0565b915081905092915050565b600061298a82856126e0565b915061299582612892565b91506129a182846126e0565b91508190509392505050565b60006020820190506129c260008301846125d4565b92915050565b60006060820190506129dd60008301866125d4565b6129ea60208301856125d4565b6129f76040830184612941565b949350505050565b6000604082019050612a1460008301856125d4565b612a216020830184612941565b9392505050565b6000602082019050612a3d60008301846125e3565b92915050565b6000602082019050612a5860008301846125f2565b92915050565b6000604082019050612a7360008301856125f2565b8181036020830152612a858184612601565b90509392505050565b600060a082019050612aa360008301886125f2565b612ab06020830187612941565b612abd60408301866125f2565b612aca60608301856125d4565b612ad760808301846125f2565b9695505050505050565b6000602082019050612af6600083018461266b565b92915050565b60006040820190508181036000830152612b1781858761267a565b9050612b2660208301846125f2565b949350505050565b60006020820190508181036000830152612b4881846126a7565b905092915050565b60006080820190508181036000830152612b6a81876126a7565b90508181036020830152612b7e81866126a7565b90508181036040830152612b928185612601565b9050612ba16060830184612941565b95945050505050565b60006020820190508181036000830152612bc381612711565b9050919050565b60006020820190508181036000830152612be381612734565b9050919050565b60006020820190508181036000830152612c0381612757565b9050919050565b60006020820190508181036000830152612c238161277a565b9050919050565b60006020820190508181036000830152612c438161279d565b9050919050565b60006020820190508181036000830152612c63816127c0565b9050919050565b60006020820190508181036000830152612c83816127e3565b9050919050565b60006020820190508181036000830152612ca381612806565b9050919050565b60006020820190508181036000830152612cc381612829565b9050919050565b60006020820190508181036000830152612ce38161284c565b9050919050565b60006020820190508181036000830152612d038161286f565b9050919050565b60006020820190508181036000830152612d23816128b5565b9050919050565b60006020820190508181036000830152612d43816128d8565b9050919050565b60006020820190508181036000830152612d63816128fb565b9050919050565b60006020820190508181036000830152612d838161291e565b9050919050565b6000602082019050612d9f6000830184612941565b92915050565b6000612daf612dc0565b9050612dbb828261303e565b919050565b6000604051905090565b600067ffffffffffffffff821115612de557612de4613145565b5b612dee82613192565b9050602081019050919050565b600067ffffffffffffffff821115612e1657612e15613145565b5b612e1f82613192565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000612e8582612f8a565b9150612e9083612f8a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612ec557612ec46130b8565b5b828201905092915050565b6000612edb82612f8a565b9150612ee683612f8a565b925082821015612ef957612ef86130b8565b5b828203905092915050565b6000612f0f82612f6a565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000612f6382612f04565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000612f9f82612fa6565b9050919050565b6000612fb182612fb8565b9050919050565b6000612fc382612f6a565b9050919050565b82818337600083830152505050565b60005b83811015612ff7578082015181840152602081019050612fdc565b83811115613006576000848401525b50505050565b6000600282049050600182168061302457607f821691505b60208210811415613038576130376130e7565b5b50919050565b61304782613192565b810181811067ffffffffffffffff8211171561306657613065613145565b5b80604052505050565b600061307a82612f8a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156130ad576130ac6130b8565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f476174657761793a2073796d626f6c206d75737420626520616c7068616e756d60008201527f6572696300000000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f476174657761793a2061737365742063616e277420626520656d707479000000600082015250565b7f4c6f636b476174657761793a20746f206164647265737320697320656d707479600082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f476174657761793a20696e76616c696420746f6b656e00000000000000000000600082015250565b7f476174657761793a20696e76616c696420616464726573730000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4c6f636b476174657761793a20696e76616c6964207369676e61747572650000600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f2f746f0000000000000000000000000000000000000000000000000000000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f476174657761793a20636861696e2063616e277420626520656d707479000000600082015250565b7f4c6f636b476174657761793a207369676e617475726520616c7265616479207360008201527f70656e7400000000000000000000000000000000000000000000000000000000602082015250565b7f476174657761793a20696e76616c6964207369676e617475726520766572696660008201527f6965720000000000000000000000000000000000000000000000000000000000602082015250565b61354681612f04565b811461355157600080fd5b50565b61355d81612f16565b811461356857600080fd5b50565b61357481612f22565b811461357f57600080fd5b50565b61358b81612f2c565b811461359657600080fd5b50565b6135a281612f58565b81146135ad57600080fd5b50565b6135b981612f8a565b81146135c457600080fd5b5056fea2646970667358221220f8293e322adb3008c1ded38e9f05272e505f52799617bcefdfffe05c9f52fa4e64736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c80639cffc715116100ad578063ca9d953211610071578063ca9d9532146102f5578063d489dc6c14610325578063f2fde38b14610343578063fc0c546a1461035f578063fde919f61461037d5761012c565b80639cffc71514610253578063aae8fdf014610283578063b2f2be9b1461029f578063c54216b4146102bb578063c763e5a1146102d75761012c565b806352ad0d5e116100f457806352ad0d5e146101c35780635667981b146101f3578063715018a61461020f5780637ad3def2146102195780638da5cb5b146102355761012c565b80631c3e6ee614610131578063205066421461014f578063297629761461016b57806338d52e0f146101895780635266ba0c146101a7575b600080fd5b61013961039b565b6040516101469190612d8a565b60405180910390f35b61016960048036038101906101649190612445565b6103a5565b005b6101736104b2565b6040516101809190612a43565b60405180910390f35b6101916104bc565b60405161019e9190612b2e565b60405180910390f35b6101c160048036038101906101bc9190612294565b61054e565b005b6101dd60048036038101906101d891906122ee565b6106c1565b6040516101ea9190612a28565b60405180910390f35b61020d600480360381019061020891906123cb565b6107ce565b005b610217610941565b005b610233600480360381019061022e9190612294565b6109c9565b005b61023d610b3c565b60405161024a91906129ad565b60405180910390f35b61026d6004803603810190610268919061231b565b610b66565b60405161027a9190612d8a565b60405180910390f35b61029d600480360381019061029891906123f8565b610dd8565b005b6102b960048036038101906102b49190612445565b61101e565b005b6102d560048036038101906102d091906123f8565b611113565b005b6102df611359565b6040516102ec9190612b2e565b60405180910390f35b61030f600480360381019061030a91906124ec565b6113eb565b60405161031c9190612d8a565b60405180910390f35b61032d6114ff565b60405161033a91906129ad565b60405180910390f35b61035d60048036038101906103589190612294565b611529565b005b610367611621565b60405161037491906129ad565b60405180910390f35b61038561164b565b6040516103929190612ae1565b60405180910390f35b6000606c54905090565b600060019054906101000a900460ff16806103cb575060008054906101000a900460ff16155b61040a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040190612c8a565b60405180910390fd5b60008060019054906101000a900460ff16159050801561045a576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610462611675565b61046c8787610dd8565b6104768585611113565b61047f836107ce565b610488826109c9565b80156104a95760008060016101000a81548160ff0219169083151502179055505b50505050505050565b6000606754905090565b6060606680546104cb9061300c565b80601f01602080910402602001604051908101604052809291908181526020018280546104f79061300c565b80156105445780601f1061051957610100808354040283529160200191610544565b820191906000526020600020905b81548152906001019060200180831161052757829003601f168201915b5050505050905090565b61055661175e565b73ffffffffffffffffffffffffffffffffffffffff16610574610b3c565b73ffffffffffffffffffffffffffffffffffffffff16146105ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c190612caa565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561063a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063190612c6a565b60405180910390fd5b80606b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f092a7f3d3a91b47e57583d808f4454c082a9c49b2582f836f5a301e982a2d04d60405160405180910390a250565b60006068600083815260200190815260200160002060009054906101000a900460ff16156106f257600190506107c9565b60006106fc6114ff565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146107c3578073ffffffffffffffffffffffffffffffffffffffff166352ad0d5e846040518263ffffffff1660e01b815260040161076b9190612a43565b60206040518083038186803b15801561078357600080fd5b505afa158015610797573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bb91906122c1565b9150506107c9565b60009150505b919050565b6107d661175e565b73ffffffffffffffffffffffffffffffffffffffff166107f4610b3c565b73ffffffffffffffffffffffffffffffffffffffff161461084a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084190612caa565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156108ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b190612d6a565b60405180910390fd5b80606a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167fb57359628f7b44e9842ff204fb5700f84d8c4f9c3fc9dae13e7a1aab8ed164f760405160405180910390a250565b61094961175e565b73ffffffffffffffffffffffffffffffffffffffff16610967610b3c565b73ffffffffffffffffffffffffffffffffffffffff16146109bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b490612caa565b60405180910390fd5b6109c76000611766565b565b6109d161175e565b73ffffffffffffffffffffffffffffffffffffffff166109ef610b3c565b73ffffffffffffffffffffffffffffffffffffffff1614610a45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3c90612caa565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610ab5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aac90612c4a565b60405180910390fd5b80606960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f02dec22a3d1e8f9cdc0c7cd17ecee187f635788c40755be0a72dcd86a05e564d60405160405180910390a250565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080610b7d8686610b766104b2565b338861182c565b9050610b88816106c1565b158015610b9b5750610b99846106c1565b155b610bda576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd190612d4a565b60405180910390fd5b631626ba7e60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916610c0961164b565b73ffffffffffffffffffffffffffffffffffffffff16631626ba7e83866040518363ffffffff1660e01b8152600401610c43929190612a5e565b60206040518083038186803b158015610c5b57600080fd5b505afa158015610c6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c93919061239e565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614610cf2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce990612cca565b60405180910390fd5b60016068600083815260200190815260200160002060006101000a81548160ff02191690831515021790555060016068600086815260200190815260200160002060006101000a81548160ff021916908315150217905550610d7c3386610d57611621565b73ffffffffffffffffffffffffffffffffffffffff166118689092919063ffffffff16565b83813373ffffffffffffffffffffffffffffffffffffffff167f9a0e734b1a87920f1af4cb8617268e9e5979afa7f36a620a4f90206f0ca57d4c88604051610dc49190612d8a565b60405180910390a484915050949350505050565b610de061175e565b73ffffffffffffffffffffffffffffffffffffffff16610dfe610b3c565b73ffffffffffffffffffffffffffffffffffffffff1614610e54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4b90612caa565b60405180910390fd5b610ea182828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506118ee565b610ee0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed790612d2a565b60405180910390fd5b610f2d82828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506118fb565b610f6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6390612baa565b60405180910390fd5b818160659190610f7d929190612028565b506000610fd5610f8b6104bc565b84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506119b5565b9050806067819055507f4dc1740772ca26480ca22d412de18818650c980e3aef84a3ca49cbe4fa4ed88083838360405161101193929190612afc565b60405180910390a1505050565b600060019054906101000a900460ff1680611044575060008054906101000a900460ff16155b611083576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107a90612c8a565b60405180910390fd5b60008060019054906101000a900460ff1615905080156110d3576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6110db611675565b6110e98787878787876103a5565b801561110a5760008060016101000a81548160ff0219169083151502179055505b50505050505050565b61111b61175e565b73ffffffffffffffffffffffffffffffffffffffff16611139610b3c565b73ffffffffffffffffffffffffffffffffffffffff161461118f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118690612caa565b60405180910390fd5b6111dc82828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506118ee565b61121b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121290612bea565b60405180910390fd5b61126882828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506118fb565b6112a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129e90612baa565b60405180910390fd5b8181606691906112b8929190612028565b50600061131083838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061130b611359565b6119b5565b9050806067819055507f2e7c1f9bcc3b09d8e05594ab5d17b6c9b15b24cd506c5212f051f22990d0813183838360405161134c93929190612afc565b60405180910390a1505050565b6060606580546113689061300c565b80601f01602080910402602001604051908101604052809291908181526020018280546113949061300c565b80156113e15780601f106113b6576101008083540402835291602001916113e1565b820191906000526020600020905b8154815290600101906020018083116113c457829003601f168201915b5050505050905090565b60008085511415611431576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142890612c0a565b60405180910390fd5b6000611467333085611441611621565b73ffffffffffffffffffffffffffffffffffffffff166119e8909392919063ffffffff16565b9050600061147361039b565b9050856040516114839190612967565b6040518091039020876040516114999190612967565b6040518091039020827fc06237815e14163806cc5c2447bc785b639c2f8b1f3f23872f226e5c31adb9958a8a8a886040516114d79493929190612b50565b60405180910390a46001816114ec9190612e7a565b606c819055508392505050949350505050565b6000606b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61153161175e565b73ffffffffffffffffffffffffffffffffffffffff1661154f610b3c565b73ffffffffffffffffffffffffffffffffffffffff16146115a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159c90612caa565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611615576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160c90612bca565b60405180910390fd5b61161e81611766565b50565b6000606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000606a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060019054906101000a900460ff168061169b575060008054906101000a900460ff16155b6116da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116d190612c8a565b60405180910390fd5b60008060019054906101000a900460ff16159050801561172a576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b611732611b57565b61173a611c30565b801561175b5760008060016101000a81548160ff0219169083151502179055505b50565b600033905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008585858585604051602001611847959493929190612a8e565b60405160208183030381529060405280519060200120905095945050505050565b6118e98363a9059cbb60e01b84846040516024016118879291906129ff565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611d19565b505050565b6000808251119050919050565b600080600090505b82518110156119aa57600083828151811061192157611920613116565b5b602001015160f81c60f81b60f81c905060418160ff16101580156119495750605a8160ff1611155b80611968575060618160ff16101580156119675750607a8160ff1611155b5b80611987575060308160ff1610158015611986575060398160ff1611155b5b611996576000925050506119b0565b5080806119a29061306f565b915050611903565b50600190505b919050565b600082826040516020016119ca92919061297e565b60405160208183030381529060405280519060200120905092915050565b6000808573ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b8152600401611a2491906129ad565b60206040518083038186803b158015611a3c57600080fd5b505afa158015611a50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a7491906125a7565b9050611aa38585858973ffffffffffffffffffffffffffffffffffffffff16611de0909392919063ffffffff16565b60008673ffffffffffffffffffffffffffffffffffffffff166370a08231866040518263ffffffff1660e01b8152600401611ade91906129ad565b60206040518083038186803b158015611af657600080fd5b505afa158015611b0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b2e91906125a7565b905060008282611b3e9190612ed0565b9050611b4a8582611e69565b9350505050949350505050565b600060019054906101000a900460ff1680611b7d575060008054906101000a900460ff16155b611bbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bb390612c8a565b60405180910390fd5b60008060019054906101000a900460ff161590508015611c0c576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8015611c2d5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680611c56575060008054906101000a900460ff16155b611c95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c8c90612c8a565b60405180910390fd5b60008060019054906101000a900460ff161590508015611ce5576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b611cf5611cf061175e565b611766565b8015611d165760008060016101000a81548160ff0219169083151502179055505b50565b6000611d7b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611e829092919063ffffffff16565b9050600081511115611ddb5780806020019051810190611d9b91906122c1565b611dda576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dd190612d0a565b60405180910390fd5b5b505050565b611e63846323b872dd60e01b858585604051602401611e01939291906129c8565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611d19565b50505050565b6000818310611e785781611e7a565b825b905092915050565b6060611e918484600085611e9a565b90509392505050565b606082471015611edf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ed690612c2a565b60405180910390fd5b611ee885611fae565b611f27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f1e90612cea565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611f509190612950565b60006040518083038185875af1925050503d8060008114611f8d576040519150601f19603f3d011682016040523d82523d6000602084013e611f92565b606091505b5091509150611fa2828286611fc1565b92505050949350505050565b600080823b905060008111915050919050565b60608315611fd157829050612021565b600083511115611fe45782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120189190612b2e565b60405180910390fd5b9392505050565b8280546120349061300c565b90600052602060002090601f016020900481019282612056576000855561209d565b82601f1061206f57803560ff191683800117855561209d565b8280016001018555821561209d579182015b8281111561209c578235825591602001919060010190612081565b5b5090506120aa91906120ae565b5090565b5b808211156120c75760008160009055506001016120af565b5090565b60006120de6120d984612dca565b612da5565b9050828152602081018484840111156120fa576120f9613183565b5b612105848285612fca565b509392505050565b600061212061211b84612dfb565b612da5565b90508281526020810184848401111561213c5761213b613183565b5b612147848285612fca565b509392505050565b60008135905061215e8161353d565b92915050565b60008151905061217381613554565b92915050565b6000813590506121888161356b565b92915050565b60008151905061219d81613582565b92915050565b600082601f8301126121b8576121b7613179565b5b81356121c88482602086016120cb565b91505092915050565b6000813590506121e081613599565b92915050565b60008083601f8401126121fc576121fb613179565b5b8235905067ffffffffffffffff81111561221957612218613174565b5b6020830191508360018202830111156122355761223461317e565b5b9250929050565b600082601f83011261225157612250613179565b5b813561226184826020860161210d565b91505092915050565b600081359050612279816135b0565b92915050565b60008151905061228e816135b0565b92915050565b6000602082840312156122aa576122a961318d565b5b60006122b88482850161214f565b91505092915050565b6000602082840312156122d7576122d661318d565b5b60006122e584828501612164565b91505092915050565b6000602082840312156123045761230361318d565b5b600061231284828501612179565b91505092915050565b600080600080608085870312156123355761233461318d565b5b600061234387828801612179565b94505060206123548782880161226a565b935050604061236587828801612179565b925050606085013567ffffffffffffffff81111561238657612385613188565b5b612392878288016121a3565b91505092959194509250565b6000602082840312156123b4576123b361318d565b5b60006123c28482850161218e565b91505092915050565b6000602082840312156123e1576123e061318d565b5b60006123ef848285016121d1565b91505092915050565b6000806020838503121561240f5761240e61318d565b5b600083013567ffffffffffffffff81111561242d5761242c613188565b5b612439858286016121e6565b92509250509250929050565b600080600080600080608087890312156124625761246161318d565b5b600087013567ffffffffffffffff8111156124805761247f613188565b5b61248c89828a016121e6565b9650965050602087013567ffffffffffffffff8111156124af576124ae613188565b5b6124bb89828a016121e6565b945094505060406124ce89828a0161214f565b92505060606124df89828a0161214f565b9150509295509295509295565b600080600080608085870312156125065761250561318d565b5b600085013567ffffffffffffffff81111561252457612523613188565b5b6125308782880161223c565b945050602085013567ffffffffffffffff81111561255157612550613188565b5b61255d8782880161223c565b935050604085013567ffffffffffffffff81111561257e5761257d613188565b5b61258a878288016121a3565b925050606061259b8782880161226a565b91505092959194509250565b6000602082840312156125bd576125bc61318d565b5b60006125cb8482850161227f565b91505092915050565b6125dd81612f04565b82525050565b6125ec81612f16565b82525050565b6125fb81612f22565b82525050565b600061260c82612e2c565b6126168185612e42565b9350612626818560208601612fd9565b61262f81613192565b840191505092915050565b600061264582612e2c565b61264f8185612e53565b935061265f818560208601612fd9565b80840191505092915050565b61267481612f94565b82525050565b60006126868385612e5e565b9350612693838584612fca565b61269c83613192565b840190509392505050565b60006126b282612e37565b6126bc8185612e5e565b93506126cc818560208601612fd9565b6126d581613192565b840191505092915050565b60006126eb82612e37565b6126f58185612e6f565b9350612705818560208601612fd9565b80840191505092915050565b600061271e602483612e5e565b9150612729826131a3565b604082019050919050565b6000612741602683612e5e565b915061274c826131f2565b604082019050919050565b6000612764601d83612e5e565b915061276f82613241565b602082019050919050565b6000612787602083612e5e565b91506127928261326a565b602082019050919050565b60006127aa602683612e5e565b91506127b582613293565b604082019050919050565b60006127cd601683612e5e565b91506127d8826132e2565b602082019050919050565b60006127f0601883612e5e565b91506127fb8261330b565b602082019050919050565b6000612813602e83612e5e565b915061281e82613334565b604082019050919050565b6000612836602083612e5e565b915061284182613383565b602082019050919050565b6000612859601e83612e5e565b9150612864826133ac565b602082019050919050565b600061287c601d83612e5e565b9150612887826133d5565b602082019050919050565b600061289f600383612e6f565b91506128aa826133fe565b600382019050919050565b60006128c2602a83612e5e565b91506128cd82613427565b604082019050919050565b60006128e5601d83612e5e565b91506128f082613476565b602082019050919050565b6000612908602483612e5e565b91506129138261349f565b604082019050919050565b600061292b602383612e5e565b9150612936826134ee565b604082019050919050565b61294a81612f8a565b82525050565b600061295c828461263a565b915081905092915050565b600061297382846126e0565b915081905092915050565b600061298a82856126e0565b915061299582612892565b91506129a182846126e0565b91508190509392505050565b60006020820190506129c260008301846125d4565b92915050565b60006060820190506129dd60008301866125d4565b6129ea60208301856125d4565b6129f76040830184612941565b949350505050565b6000604082019050612a1460008301856125d4565b612a216020830184612941565b9392505050565b6000602082019050612a3d60008301846125e3565b92915050565b6000602082019050612a5860008301846125f2565b92915050565b6000604082019050612a7360008301856125f2565b8181036020830152612a858184612601565b90509392505050565b600060a082019050612aa360008301886125f2565b612ab06020830187612941565b612abd60408301866125f2565b612aca60608301856125d4565b612ad760808301846125f2565b9695505050505050565b6000602082019050612af6600083018461266b565b92915050565b60006040820190508181036000830152612b1781858761267a565b9050612b2660208301846125f2565b949350505050565b60006020820190508181036000830152612b4881846126a7565b905092915050565b60006080820190508181036000830152612b6a81876126a7565b90508181036020830152612b7e81866126a7565b90508181036040830152612b928185612601565b9050612ba16060830184612941565b95945050505050565b60006020820190508181036000830152612bc381612711565b9050919050565b60006020820190508181036000830152612be381612734565b9050919050565b60006020820190508181036000830152612c0381612757565b9050919050565b60006020820190508181036000830152612c238161277a565b9050919050565b60006020820190508181036000830152612c438161279d565b9050919050565b60006020820190508181036000830152612c63816127c0565b9050919050565b60006020820190508181036000830152612c83816127e3565b9050919050565b60006020820190508181036000830152612ca381612806565b9050919050565b60006020820190508181036000830152612cc381612829565b9050919050565b60006020820190508181036000830152612ce38161284c565b9050919050565b60006020820190508181036000830152612d038161286f565b9050919050565b60006020820190508181036000830152612d23816128b5565b9050919050565b60006020820190508181036000830152612d43816128d8565b9050919050565b60006020820190508181036000830152612d63816128fb565b9050919050565b60006020820190508181036000830152612d838161291e565b9050919050565b6000602082019050612d9f6000830184612941565b92915050565b6000612daf612dc0565b9050612dbb828261303e565b919050565b6000604051905090565b600067ffffffffffffffff821115612de557612de4613145565b5b612dee82613192565b9050602081019050919050565b600067ffffffffffffffff821115612e1657612e15613145565b5b612e1f82613192565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000612e8582612f8a565b9150612e9083612f8a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612ec557612ec46130b8565b5b828201905092915050565b6000612edb82612f8a565b9150612ee683612f8a565b925082821015612ef957612ef86130b8565b5b828203905092915050565b6000612f0f82612f6a565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000612f6382612f04565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000612f9f82612fa6565b9050919050565b6000612fb182612fb8565b9050919050565b6000612fc382612f6a565b9050919050565b82818337600083830152505050565b60005b83811015612ff7578082015181840152602081019050612fdc565b83811115613006576000848401525b50505050565b6000600282049050600182168061302457607f821691505b60208210811415613038576130376130e7565b5b50919050565b61304782613192565b810181811067ffffffffffffffff8211171561306657613065613145565b5b80604052505050565b600061307a82612f8a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156130ad576130ac6130b8565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f476174657761793a2073796d626f6c206d75737420626520616c7068616e756d60008201527f6572696300000000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f476174657761793a2061737365742063616e277420626520656d707479000000600082015250565b7f4c6f636b476174657761793a20746f206164647265737320697320656d707479600082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f476174657761793a20696e76616c696420746f6b656e00000000000000000000600082015250565b7f476174657761793a20696e76616c696420616464726573730000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4c6f636b476174657761793a20696e76616c6964207369676e61747572650000600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f2f746f0000000000000000000000000000000000000000000000000000000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f476174657761793a20636861696e2063616e277420626520656d707479000000600082015250565b7f4c6f636b476174657761793a207369676e617475726520616c7265616479207360008201527f70656e7400000000000000000000000000000000000000000000000000000000602082015250565b7f476174657761793a20696e76616c6964207369676e617475726520766572696660008201527f6965720000000000000000000000000000000000000000000000000000000000602082015250565b61354681612f04565b811461355157600080fd5b50565b61355d81612f16565b811461356857600080fd5b50565b61357481612f22565b811461357f57600080fd5b50565b61358b81612f2c565b811461359657600080fd5b50565b6135a281612f58565b81146135ad57600080fd5b50565b6135b981612f8a565b81146135c457600080fd5b5056fea2646970667358221220f8293e322adb3008c1ded38e9f05272e505f52799617bcefdfffe05c9f52fa4e64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "lock(string,string,bytes,uint256)": {
        "params": {
          "amount": "The amount of the token being locked, in the asset's        smallest unit. (e.g. satoshis for BTC)",
          "recipientAddress": "The address to which the locked assets will be        minted to. The address should be a plain-text address, without        decoding to bytes first.",
          "recipientChain": "The target chain to which the assets are being        moved to.",
          "recipientPayload": "An optional payload to be passed to the        recipient chain along with the address."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "release(bytes32,uint256,bytes32,bytes)": {
        "params": {
          "amount": "The amount of the token being minted, in its smallest        value. (e.g. satoshis for BTC).",
          "nHash": "(nonce hash) The hash of the nonce, amount and pHash.",
          "pHash": "(payload hash) The hash of the payload associated with the        mint.",
          "sig": "The signature of the hash of the following values:        (pHash, amount, msg.sender, nHash), signed by the mintAuthority."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateAsset(string)": {
        "params": {
          "nextAsset": "The new asset."
        }
      },
      "updateChain(string)": {
        "params": {
          "nextChain": "The new chain."
        }
      },
      "updatePreviousGateway(address)": {
        "params": {
          "nextPreviousGateway": "The new gateway contract's address."
        }
      },
      "updateSignatureVerifier(address)": {
        "params": {
          "nextSignatureVerifier": "The new verifier contract address."
        }
      },
      "updateToken(address)": {
        "params": {
          "nextToken": "The new ERC20 token contract's address."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "lock(string,string,bytes,uint256)": {
        "notice": "burn destroys tokens after taking a fee for the `_feeRecipient`,         allowing the associated assets to be released on their native         chain."
      },
      "release(bytes32,uint256,bytes32,bytes)": {
        "notice": "mint verifies a mint approval signature from RenVM and creates         tokens after taking a fee for the `_feeRecipient`."
      },
      "updateAsset(string)": {
        "notice": "Allow the owner to update the asset."
      },
      "updateChain(string)": {
        "notice": "Allow the owner to update the chain."
      },
      "updatePreviousGateway(address)": {
        "notice": "Allow the owner to update the previous gateway used for backwards compatibility."
      },
      "updateSignatureVerifier(address)": {
        "notice": "Allow the owner to update the signature verifier contract."
      },
      "updateToken(address)": {
        "notice": "Allow the owner to update the ERC20 token contract."
      }
    },
    "notice": "LockGatewayV3 handles verifying lock and release requests. A mintAuthority approves new assets to be minted by providing a digital signature.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 773,
        "contract": "src/Gateways/LockGateway.sol:LockGatewayV3",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 776,
        "contract": "src/Gateways/LockGateway.sol:LockGatewayV3",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1532,
        "contract": "src/Gateways/LockGateway.sol:LockGatewayV3",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 653,
        "contract": "src/Gateways/LockGateway.sol:LockGatewayV3",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 766,
        "contract": "src/Gateways/LockGateway.sol:LockGatewayV3",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 8418,
        "contract": "src/Gateways/LockGateway.sol:LockGatewayV3",
        "label": "_chain",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 8420,
        "contract": "src/Gateways/LockGateway.sol:LockGatewayV3",
        "label": "_asset",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 8422,
        "contract": "src/Gateways/LockGateway.sol:LockGatewayV3",
        "label": "_selectorHash",
        "offset": 0,
        "slot": "103",
        "type": "t_bytes32"
      },
      {
        "astId": 8427,
        "contract": "src/Gateways/LockGateway.sol:LockGatewayV3",
        "label": "_status",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 8430,
        "contract": "src/Gateways/LockGateway.sol:LockGatewayV3",
        "label": "_token",
        "offset": 0,
        "slot": "105",
        "type": "t_address"
      },
      {
        "astId": 8433,
        "contract": "src/Gateways/LockGateway.sol:LockGatewayV3",
        "label": "_signatureVerifier",
        "offset": 0,
        "slot": "106",
        "type": "t_contract(IRenVMSignatureVerifier)8881"
      },
      {
        "astId": 8435,
        "contract": "src/Gateways/LockGateway.sol:LockGatewayV3",
        "label": "_previousGateway",
        "offset": 0,
        "slot": "107",
        "type": "t_address"
      },
      {
        "astId": 8437,
        "contract": "src/Gateways/LockGateway.sol:LockGatewayV3",
        "label": "_eventNonce",
        "offset": 0,
        "slot": "108",
        "type": "t_uint256"
      },
      {
        "astId": 8441,
        "contract": "src/Gateways/LockGateway.sol:LockGatewayV3",
        "label": "__gap",
        "offset": 0,
        "slot": "109",
        "type": "t_array(t_uint256)43_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)43_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[43]",
        "numberOfBytes": "1376"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IRenVMSignatureVerifier)8881": {
        "encoding": "inplace",
        "label": "contract IRenVMSignatureVerifier",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}