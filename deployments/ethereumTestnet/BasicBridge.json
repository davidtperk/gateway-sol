{
  "address": "0x8B3B035a916F5FE8851A6b8EdA2d3D9E41d98d96",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IGatewayRegistry",
          "name": "_registry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "recipient",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "recipientAddress",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "recipientChain",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "recipientPayload",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "lock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "nHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract IGatewayRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "nHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "release",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xab5e511347b47396db5fd307e7c4a6b6a4fe5314c42dce1ce3720a158fb06bc5",
  "receipt": {
    "to": "0x2222229fb3318A6375FA78fd299A9a42aC6A8fbF",
    "from": "0xD5B5b26521665Cb37623DCA0E49c553b41dbF076",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "1863873",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xae03a505fae3c298cc2a92746ce03f1d3af0f3ac2e8b2ce71ed9b23b92607820",
    "transactionHash": "0xab5e511347b47396db5fd307e7c4a6b6a4fe5314c42dce1ce3720a158fb06bc5",
    "logs": [],
    "blockNumber": 28504590,
    "cumulativeGasUsed": "1863873",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd66e94A195edF4e0bB4ca9f4f268d84236568F21"
  ],
  "solcInputHash": "28c8195c7642df595c510e6d4f107e0d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IGatewayRegistry\",\"name\":\"_registry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"recipient\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"recipientAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"recipientChain\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"recipientPayload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IGatewayRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/BasicBridge.sol\":\"BasicBridge\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"src/BasicBridge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport {IGatewayRegistry} from \\\"./GatewayRegistry/interfaces/IGatewayRegistry.sol\\\";\\nimport {IMintGateway} from \\\"./Gateways/interfaces/IMintGateway.sol\\\";\\nimport {ILockGateway} from \\\"./Gateways/interfaces/ILockGateway.sol\\\";\\n\\ncontract BasicBridge is Context {\\n    using SafeERC20 for IERC20;\\n\\n    string public constant NAME = \\\"BasicBridge\\\";\\n\\n    IGatewayRegistry public registry;\\n\\n    constructor(IGatewayRegistry _registry) {\\n        registry = _registry;\\n    }\\n\\n    function mint(\\n        // Payload\\n        string calldata symbol,\\n        address recipient,\\n        // Required\\n        uint256 amount,\\n        bytes32 nHash,\\n        bytes calldata sig\\n    ) external {\\n        IERC20 renAsset = registry.getRenAssetBySymbol(symbol);\\n        IMintGateway mintGateway = registry.getMintGatewayBySymbol(symbol);\\n\\n        if (address(renAsset) == address(0x0)) {\\n            revert(string(abi.encodePacked(\\\"BasicBridge: unknown asset \\\", symbol)));\\n        }\\n        if (address(mintGateway) != address(0x0)) {\\n            string(abi.encodePacked(\\\"BasicBridge: unknown asset \\\", symbol));\\n        }\\n\\n        bytes32 payloadHash = keccak256(abi.encode(symbol, recipient));\\n        uint256 amountMinted = mintGateway.mint(payloadHash, amount, nHash, sig);\\n        renAsset.safeTransfer(recipient, amountMinted);\\n    }\\n\\n    function burn(\\n        string calldata symbol,\\n        string calldata recipient,\\n        uint256 amount\\n    ) external {\\n        IERC20 renAsset = registry.getRenAssetBySymbol(symbol);\\n        IMintGateway mintGateway = registry.getMintGatewayBySymbol(symbol);\\n\\n        if (address(renAsset) == address(0x0)) {\\n            revert(string(abi.encodePacked(\\\"BasicBridge: unknown asset \\\", symbol)));\\n        }\\n        if (address(mintGateway) != address(0x0)) {\\n            string(abi.encodePacked(\\\"BasicBridge: unknown asset \\\", symbol));\\n        }\\n\\n        renAsset.safeTransferFrom(_msgSender(), address(this), amount);\\n        registry.getMintGatewayBySymbol(symbol).burn(recipient, amount);\\n    }\\n\\n    function lock(\\n        string calldata symbol,\\n        string calldata recipientAddress,\\n        string calldata recipientChain,\\n        bytes calldata recipientPayload,\\n        uint256 amount\\n    ) external {\\n        IERC20 lockAsset = registry.getLockAssetBySymbol(symbol);\\n        ILockGateway lockGateway = registry.getLockGatewayBySymbol(symbol);\\n\\n        if (address(lockAsset) == address(0x0)) {\\n            revert(string(abi.encodePacked(\\\"BasicBridge: unknown asset \\\", symbol)));\\n        }\\n        if (address(lockGateway) != address(0x0)) {\\n            string(abi.encodePacked(\\\"BasicBridge: unknown asset \\\", symbol));\\n        }\\n\\n        lockAsset.safeTransferFrom(_msgSender(), address(this), amount);\\n        lockAsset.safeIncreaseAllowance(address(lockGateway), amount);\\n        lockGateway.lock(recipientAddress, recipientChain, recipientPayload, amount);\\n    }\\n\\n    function release(\\n        // Payload\\n        string calldata symbol,\\n        address recipient,\\n        // Required\\n        uint256 amount,\\n        bytes32 nHash,\\n        bytes calldata sig\\n    ) external {\\n        IERC20 lockAsset = registry.getLockAssetBySymbol(symbol);\\n        ILockGateway lockGateway = registry.getLockGatewayBySymbol(symbol);\\n\\n        if (address(lockAsset) == address(0x0)) {\\n            revert(string(abi.encodePacked(\\\"BasicBridge: unknown asset \\\", symbol)));\\n        }\\n        if (address(lockGateway) != address(0x0)) {\\n            string(abi.encodePacked(\\\"BasicBridge: unknown asset \\\", symbol));\\n        }\\n\\n        bytes32 payloadHash = keccak256(abi.encode(symbol, recipient));\\n        uint256 amountReleased = lockGateway.release(payloadHash, amount, nHash, sig);\\n        lockAsset.safeTransfer(recipient, amountReleased);\\n    }\\n}\\n\",\"keccak256\":\"0x7242d61031552f8d2cfe34ea2789ccc9ac124a4800f2a488cca2883571d25992\",\"license\":\"GPL-3.0\"},\"src/GatewayRegistry/interfaces/IGatewayRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IMintGateway} from \\\"../../Gateways/interfaces/IMintGateway.sol\\\";\\nimport {ILockGateway} from \\\"../../Gateways/interfaces/ILockGateway.sol\\\";\\n\\nabstract contract IGatewayRegistry {\\n    function signatureVerifier() external view virtual returns (address);\\n\\n    function chainId() external view virtual returns (uint256);\\n\\n    function chainName() external view virtual returns (string memory);\\n\\n    function getMintGatewaySymbols(uint256 from, uint256 count) external view virtual returns (string[] memory);\\n\\n    function getLockGatewaySymbols(uint256 from, uint256 count) external view virtual returns (string[] memory);\\n\\n    function getMintGatewayByToken(address token) external view virtual returns (IMintGateway);\\n\\n    function getMintGatewayBySymbol(string calldata tokenSymbol) external view virtual returns (IMintGateway);\\n\\n    function getRenAssetBySymbol(string calldata tokenSymbol) external view virtual returns (IERC20);\\n\\n    function getLockGatewayByToken(address token) external view virtual returns (ILockGateway);\\n\\n    function getLockGatewayBySymbol(string calldata tokenSymbol) external view virtual returns (ILockGateway);\\n\\n    function getLockAssetBySymbol(string calldata tokenSymbol) external view virtual returns (IERC20);\\n}\\n\",\"keccak256\":\"0x2b3fe5e87e6786dc38f0b46b0da714ac93acc46fda8dd62b77b89b72f274143c\",\"license\":\"GPL-3.0\"},\"src/Gateways/interfaces/ILockGateway.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nabstract contract ILockGateway {\\n    event LogRelease(address indexed recipient, uint256 amount, bytes32 indexed sigHash, bytes32 indexed nHash);\\n    event LogLockToChain(\\n        string recipientAddress,\\n        string recipientChain,\\n        bytes recipientPayload,\\n        uint256 amount,\\n        uint256 indexed lockNonce,\\n        // Indexed versions of previous parameters.\\n        string indexed recipientAddressIndexed,\\n        string indexed recipientChainIndexed\\n    );\\n\\n    function lock(\\n        string calldata recipientAddress,\\n        string calldata recipientChain,\\n        bytes calldata recipientPayload,\\n        uint256 amount\\n    ) external virtual returns (uint256);\\n\\n    function release(\\n        bytes32 pHash,\\n        uint256 amount,\\n        bytes32 nHash,\\n        bytes calldata sig\\n    ) external virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x1a7e628f9292e921fbbdeb712ede27f3947c22e4122c42a53d60dd36d3715bec\",\"license\":\"GPL-3.0\"},\"src/Gateways/interfaces/IMintGateway.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nabstract contract IMintGateway {\\n    /// @dev For backwards compatiblity reasons, the sigHash is cast to a\\n    /// uint256.\\n    event LogMint(address indexed to, uint256 amount, uint256 indexed sigHash, bytes32 indexed nHash);\\n\\n    /// @dev Once `LogBurnToChain` is enabled on mainnet, LogBurn may be\\n    /// replaced by LogBurnToChain with empty payload and chain fields.\\n    /// @dev For backwards compatibility, `to` is bytes instead of a string.\\n    event LogBurn(\\n        bytes to,\\n        uint256 amount,\\n        uint256 indexed burnNonce,\\n        // Indexed versions of previous parameters.\\n        bytes indexed indexedTo\\n    );\\n    event LogBurnToChain(\\n        string recipientAddress,\\n        string recipientChain,\\n        bytes recipientPayload,\\n        uint256 amount,\\n        uint256 indexed burnNonce,\\n        // Indexed versions of previous parameters.\\n        string indexed recipientAddressIndexed,\\n        string indexed recipientChainIndexed\\n    );\\n\\n    function mint(\\n        bytes32 pHash,\\n        uint256 amount,\\n        bytes32 nHash,\\n        bytes calldata sig\\n    ) external virtual returns (uint256);\\n\\n    function burnWithPayload(\\n        string calldata recipientAddress,\\n        string calldata recipientChain,\\n        bytes calldata recipientPayload,\\n        uint256 amount\\n    ) external virtual returns (uint256);\\n\\n    function burn(string calldata recipient, uint256 amount) external virtual returns (uint256);\\n\\n    function burn(bytes calldata recipient, uint256 amount) external virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x69dc6f1c3bc1a874220ace20363821cf82038e818db348867f84c80f3f091368\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200218438038062002184833981810160405281019062000037919062000095565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200012e565b6000815190506200008f8162000114565b92915050565b600060208284031215620000ae57620000ad6200010f565b5b6000620000be848285016200007e565b91505092915050565b6000620000d482620000ef565b9050919050565b6000620000e882620000c7565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6200011f81620000db565b81146200012b57600080fd5b50565b612046806200013e6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806377f61403146100675780637b1039991461008357806380a3c633146100a1578063a3f4df7e146100bd578063bc7fac7d146100db578063cc3107a0146100f7575b600080fd5b610081600480360381019061007c91906115c0565b610113565b005b61008b61045c565b6040516100989190611afd565b60405180910390f35b6100bb60048036038101906100b69190611778565b610480565b005b6100c5610842565b6040516100d29190611c00565b60405180910390f35b6100f560048036038101906100f0919061167c565b61087b565b005b610111600480360381019061010c91906115c0565b610bca565b005b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166379c73a7a89896040518363ffffffff1660e01b8152600401610171929190611b18565b60206040518083038186803b15801561018957600080fd5b505afa15801561019d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c19190611539565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637b5c884f8a8a6040518363ffffffff1660e01b8152600401610221929190611b18565b60206040518083038186803b15801561023957600080fd5b505afa15801561024d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102719190611593565b9050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156103065788886040516020016102bb929190611a02565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102fd9190611c00565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461035e57888860405160200161034d929190611a02565b604051602081830303815290604052505b600089898960405160200161037593929190611b3c565b60405160208183030381529060405280519060200120905060008273ffffffffffffffffffffffffffffffffffffffff1663159ab14d838a8a8a8a6040518663ffffffff1660e01b81526004016103d0959493929190611aaf565b602060405180830381600087803b1580156103ea57600080fd5b505af11580156103fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610422919061180d565b905061044f89828673ffffffffffffffffffffffffffffffffffffffff16610f139092919063ffffffff16565b5050505050505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166379c73a7a87876040518363ffffffff1660e01b81526004016104de929190611b18565b60206040518083038186803b1580156104f657600080fd5b505afa15801561050a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052e9190611539565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637b5c884f88886040518363ffffffff1660e01b815260040161058e929190611b18565b60206040518083038186803b1580156105a657600080fd5b505afa1580156105ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105de9190611593565b9050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610673578686604051602001610628929190611a02565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066a9190611c00565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146106cb5786866040516020016106ba929190611a02565b604051602081830303815290604052505b6106ff6106d6610f99565b30858573ffffffffffffffffffffffffffffffffffffffff16610fa1909392919063ffffffff16565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637b5c884f88886040518363ffffffff1660e01b815260040161075a929190611b18565b60206040518083038186803b15801561077257600080fd5b505afa158015610786573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107aa9190611593565b73ffffffffffffffffffffffffffffffffffffffff1663b48272cc8686866040518463ffffffff1660e01b81526004016107e693929190611bce565b602060405180830381600087803b15801561080057600080fd5b505af1158015610814573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610838919061180d565b5050505050505050565b6040518060400160405280600b81526020017f426173696342726964676500000000000000000000000000000000000000000081525081565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639c789bb88b8b6040518363ffffffff1660e01b81526004016108d9929190611b18565b60206040518083038186803b1580156108f157600080fd5b505afa158015610905573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109299190611539565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633922d1398c8c6040518363ffffffff1660e01b8152600401610989929190611b18565b60206040518083038186803b1580156109a157600080fd5b505afa1580156109b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d99190611566565b9050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610a6e578a8a604051602001610a23929190611a02565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a659190611c00565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610ac6578a8a604051602001610ab5929190611a02565b604051602081830303815290604052505b610afa610ad1610f99565b30858573ffffffffffffffffffffffffffffffffffffffff16610fa1909392919063ffffffff16565b610b2581848473ffffffffffffffffffffffffffffffffffffffff1661102a9092919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff1663ca9d95328a8a8a8a8a8a8a6040518863ffffffff1660e01b8152600401610b6a9796959493929190611b6e565b602060405180830381600087803b158015610b8457600080fd5b505af1158015610b98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbc919061180d565b505050505050505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639c789bb889896040518363ffffffff1660e01b8152600401610c28929190611b18565b60206040518083038186803b158015610c4057600080fd5b505afa158015610c54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c789190611539565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633922d1398a8a6040518363ffffffff1660e01b8152600401610cd8929190611b18565b60206040518083038186803b158015610cf057600080fd5b505afa158015610d04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d289190611566565b9050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610dbd578888604051602001610d72929190611a02565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610db49190611c00565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610e15578888604051602001610e04929190611a02565b604051602081830303815290604052505b6000898989604051602001610e2c93929190611b3c565b60405160208183030381529060405280519060200120905060008273ffffffffffffffffffffffffffffffffffffffff16639cffc715838a8a8a8a6040518663ffffffff1660e01b8152600401610e87959493929190611aaf565b602060405180830381600087803b158015610ea157600080fd5b505af1158015610eb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed9919061180d565b9050610f0689828673ffffffffffffffffffffffffffffffffffffffff16610f139092919063ffffffff16565b5050505050505050505050565b610f948363a9059cbb60e01b8484604051602401610f32929190611a86565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061114b565b505050565b600033905090565b611024846323b872dd60e01b858585604051602401610fc293929190611a4f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061114b565b50505050565b6000818473ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30866040518363ffffffff1660e01b8152600401611068929190611a26565b60206040518083038186803b15801561108057600080fd5b505afa158015611094573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b8919061180d565b6110c29190611cd0565b90506111458463095ea7b360e01b85846040516024016110e3929190611a86565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061114b565b50505050565b60006111ad826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166112129092919063ffffffff16565b905060008151111561120d57808060200190518101906111cd919061150c565b61120c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120390611c62565b60405180910390fd5b5b505050565b6060611221848460008561122a565b90509392505050565b60608247101561126f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161126690611c22565b60405180910390fd5b6112788561133e565b6112b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ae90611c42565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516112e091906119eb565b60006040518083038185875af1925050503d806000811461131d576040519150601f19603f3d011682016040523d82523d6000602084013e611322565b606091505b5091509150611332828286611351565b92505050949350505050565b600080823b905060008111915050919050565b60608315611361578290506113b1565b6000835111156113745782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113a89190611c00565b60405180910390fd5b9392505050565b6000813590506113c781611f6f565b92915050565b6000815190506113dc81611f86565b92915050565b6000813590506113f181611f9d565b92915050565b60008083601f84011261140d5761140c611e5a565b5b8235905067ffffffffffffffff81111561142a57611429611e55565b5b60208301915083600182028301111561144657611445611e5f565b5b9250929050565b60008151905061145c81611fb4565b92915050565b60008151905061147181611fcb565b92915050565b60008151905061148681611fe2565b92915050565b60008083601f8401126114a2576114a1611e5a565b5b8235905067ffffffffffffffff8111156114bf576114be611e55565b5b6020830191508360018202830111156114db576114da611e5f565b5b9250929050565b6000813590506114f181611ff9565b92915050565b60008151905061150681611ff9565b92915050565b60006020828403121561152257611521611e69565b5b6000611530848285016113cd565b91505092915050565b60006020828403121561154f5761154e611e69565b5b600061155d8482850161144d565b91505092915050565b60006020828403121561157c5761157b611e69565b5b600061158a84828501611462565b91505092915050565b6000602082840312156115a9576115a8611e69565b5b60006115b784828501611477565b91505092915050565b600080600080600080600060a0888a0312156115df576115de611e69565b5b600088013567ffffffffffffffff8111156115fd576115fc611e64565b5b6116098a828b0161148c565b9750975050602061161c8a828b016113b8565b955050604061162d8a828b016114e2565b945050606061163e8a828b016113e2565b935050608088013567ffffffffffffffff81111561165f5761165e611e64565b5b61166b8a828b016113f7565b925092505092959891949750929550565b600080600080600080600080600060a08a8c03121561169e5761169d611e69565b5b60008a013567ffffffffffffffff8111156116bc576116bb611e64565b5b6116c88c828d0161148c565b995099505060208a013567ffffffffffffffff8111156116eb576116ea611e64565b5b6116f78c828d0161148c565b975097505060408a013567ffffffffffffffff81111561171a57611719611e64565b5b6117268c828d0161148c565b955095505060608a013567ffffffffffffffff81111561174957611748611e64565b5b6117558c828d016113f7565b935093505060806117688c828d016114e2565b9150509295985092959850929598565b60008060008060006060868803121561179457611793611e69565b5b600086013567ffffffffffffffff8111156117b2576117b1611e64565b5b6117be8882890161148c565b9550955050602086013567ffffffffffffffff8111156117e1576117e0611e64565b5b6117ed8882890161148c565b93509350506040611800888289016114e2565b9150509295509295909350565b60006020828403121561182357611822611e69565b5b6000611831848285016114f7565b91505092915050565b61184381611d26565b82525050565b61185281611d44565b82525050565b60006118648385611c98565b9350611871838584611de4565b61187a83611e6e565b840190509392505050565b600061189082611c82565b61189a8185611ca9565b93506118aa818560208601611df3565b80840191505092915050565b6118bf81611dae565b82525050565b60006118d18385611cb4565b93506118de838584611de4565b6118e783611e6e565b840190509392505050565b60006118fe8385611cc5565b935061190b838584611de4565b82840190509392505050565b600061192282611c8d565b61192c8185611cb4565b935061193c818560208601611df3565b61194581611e6e565b840191505092915050565b600061195d602683611cb4565b915061196882611e7f565b604082019050919050565b6000611980601b83611cc5565b915061198b82611ece565b601b82019050919050565b60006119a3601d83611cb4565b91506119ae82611ef7565b602082019050919050565b60006119c6602a83611cb4565b91506119d182611f20565b604082019050919050565b6119e581611da4565b82525050565b60006119f78284611885565b915081905092915050565b6000611a0d82611973565b9150611a1a8284866118f2565b91508190509392505050565b6000604082019050611a3b600083018561183a565b611a48602083018461183a565b9392505050565b6000606082019050611a64600083018661183a565b611a71602083018561183a565b611a7e60408301846119dc565b949350505050565b6000604082019050611a9b600083018561183a565b611aa860208301846119dc565b9392505050565b6000608082019050611ac46000830188611849565b611ad160208301876119dc565b611ade6040830186611849565b8181036060830152611af1818486611858565b90509695505050505050565b6000602082019050611b1260008301846118b6565b92915050565b60006020820190508181036000830152611b338184866118c5565b90509392505050565b60006040820190508181036000830152611b578185876118c5565b9050611b66602083018461183a565b949350505050565b60006080820190508181036000830152611b8981898b6118c5565b90508181036020830152611b9e8187896118c5565b90508181036040830152611bb3818587611858565b9050611bc260608301846119dc565b98975050505050505050565b60006040820190508181036000830152611be98185876118c5565b9050611bf860208301846119dc565b949350505050565b60006020820190508181036000830152611c1a8184611917565b905092915050565b60006020820190508181036000830152611c3b81611950565b9050919050565b60006020820190508181036000830152611c5b81611996565b9050919050565b60006020820190508181036000830152611c7b816119b9565b9050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000611cdb82611da4565b9150611ce683611da4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611d1b57611d1a611e26565b5b828201905092915050565b6000611d3182611d84565b9050919050565b60008115159050919050565b6000819050919050565b6000611d5982611d26565b9050919050565b6000611d6b82611d26565b9050919050565b6000611d7d82611d26565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611db982611dc0565b9050919050565b6000611dcb82611dd2565b9050919050565b6000611ddd82611d84565b9050919050565b82818337600083830152505050565b60005b83811015611e11578082015181840152602081019050611df6565b83811115611e20576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f42617369634272696467653a20756e6b6e6f776e206173736574200000000000600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b611f7881611d26565b8114611f8357600080fd5b50565b611f8f81611d38565b8114611f9a57600080fd5b50565b611fa681611d44565b8114611fb157600080fd5b50565b611fbd81611d4e565b8114611fc857600080fd5b50565b611fd481611d60565b8114611fdf57600080fd5b50565b611feb81611d72565b8114611ff657600080fd5b50565b61200281611da4565b811461200d57600080fd5b5056fea264697066735822122004a20586e0d4a749dbadc60eacd5e08c074e9bc596987a2572959baf9ed9ce2664736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c806377f61403146100675780637b1039991461008357806380a3c633146100a1578063a3f4df7e146100bd578063bc7fac7d146100db578063cc3107a0146100f7575b600080fd5b610081600480360381019061007c91906115c0565b610113565b005b61008b61045c565b6040516100989190611afd565b60405180910390f35b6100bb60048036038101906100b69190611778565b610480565b005b6100c5610842565b6040516100d29190611c00565b60405180910390f35b6100f560048036038101906100f0919061167c565b61087b565b005b610111600480360381019061010c91906115c0565b610bca565b005b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166379c73a7a89896040518363ffffffff1660e01b8152600401610171929190611b18565b60206040518083038186803b15801561018957600080fd5b505afa15801561019d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c19190611539565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637b5c884f8a8a6040518363ffffffff1660e01b8152600401610221929190611b18565b60206040518083038186803b15801561023957600080fd5b505afa15801561024d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102719190611593565b9050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156103065788886040516020016102bb929190611a02565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102fd9190611c00565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461035e57888860405160200161034d929190611a02565b604051602081830303815290604052505b600089898960405160200161037593929190611b3c565b60405160208183030381529060405280519060200120905060008273ffffffffffffffffffffffffffffffffffffffff1663159ab14d838a8a8a8a6040518663ffffffff1660e01b81526004016103d0959493929190611aaf565b602060405180830381600087803b1580156103ea57600080fd5b505af11580156103fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610422919061180d565b905061044f89828673ffffffffffffffffffffffffffffffffffffffff16610f139092919063ffffffff16565b5050505050505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166379c73a7a87876040518363ffffffff1660e01b81526004016104de929190611b18565b60206040518083038186803b1580156104f657600080fd5b505afa15801561050a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052e9190611539565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637b5c884f88886040518363ffffffff1660e01b815260040161058e929190611b18565b60206040518083038186803b1580156105a657600080fd5b505afa1580156105ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105de9190611593565b9050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610673578686604051602001610628929190611a02565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066a9190611c00565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146106cb5786866040516020016106ba929190611a02565b604051602081830303815290604052505b6106ff6106d6610f99565b30858573ffffffffffffffffffffffffffffffffffffffff16610fa1909392919063ffffffff16565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637b5c884f88886040518363ffffffff1660e01b815260040161075a929190611b18565b60206040518083038186803b15801561077257600080fd5b505afa158015610786573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107aa9190611593565b73ffffffffffffffffffffffffffffffffffffffff1663b48272cc8686866040518463ffffffff1660e01b81526004016107e693929190611bce565b602060405180830381600087803b15801561080057600080fd5b505af1158015610814573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610838919061180d565b5050505050505050565b6040518060400160405280600b81526020017f426173696342726964676500000000000000000000000000000000000000000081525081565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639c789bb88b8b6040518363ffffffff1660e01b81526004016108d9929190611b18565b60206040518083038186803b1580156108f157600080fd5b505afa158015610905573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109299190611539565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633922d1398c8c6040518363ffffffff1660e01b8152600401610989929190611b18565b60206040518083038186803b1580156109a157600080fd5b505afa1580156109b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d99190611566565b9050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610a6e578a8a604051602001610a23929190611a02565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a659190611c00565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610ac6578a8a604051602001610ab5929190611a02565b604051602081830303815290604052505b610afa610ad1610f99565b30858573ffffffffffffffffffffffffffffffffffffffff16610fa1909392919063ffffffff16565b610b2581848473ffffffffffffffffffffffffffffffffffffffff1661102a9092919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff1663ca9d95328a8a8a8a8a8a8a6040518863ffffffff1660e01b8152600401610b6a9796959493929190611b6e565b602060405180830381600087803b158015610b8457600080fd5b505af1158015610b98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbc919061180d565b505050505050505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639c789bb889896040518363ffffffff1660e01b8152600401610c28929190611b18565b60206040518083038186803b158015610c4057600080fd5b505afa158015610c54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c789190611539565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633922d1398a8a6040518363ffffffff1660e01b8152600401610cd8929190611b18565b60206040518083038186803b158015610cf057600080fd5b505afa158015610d04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d289190611566565b9050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610dbd578888604051602001610d72929190611a02565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610db49190611c00565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610e15578888604051602001610e04929190611a02565b604051602081830303815290604052505b6000898989604051602001610e2c93929190611b3c565b60405160208183030381529060405280519060200120905060008273ffffffffffffffffffffffffffffffffffffffff16639cffc715838a8a8a8a6040518663ffffffff1660e01b8152600401610e87959493929190611aaf565b602060405180830381600087803b158015610ea157600080fd5b505af1158015610eb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed9919061180d565b9050610f0689828673ffffffffffffffffffffffffffffffffffffffff16610f139092919063ffffffff16565b5050505050505050505050565b610f948363a9059cbb60e01b8484604051602401610f32929190611a86565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061114b565b505050565b600033905090565b611024846323b872dd60e01b858585604051602401610fc293929190611a4f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061114b565b50505050565b6000818473ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30866040518363ffffffff1660e01b8152600401611068929190611a26565b60206040518083038186803b15801561108057600080fd5b505afa158015611094573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b8919061180d565b6110c29190611cd0565b90506111458463095ea7b360e01b85846040516024016110e3929190611a86565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061114b565b50505050565b60006111ad826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166112129092919063ffffffff16565b905060008151111561120d57808060200190518101906111cd919061150c565b61120c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120390611c62565b60405180910390fd5b5b505050565b6060611221848460008561122a565b90509392505050565b60608247101561126f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161126690611c22565b60405180910390fd5b6112788561133e565b6112b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ae90611c42565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516112e091906119eb565b60006040518083038185875af1925050503d806000811461131d576040519150601f19603f3d011682016040523d82523d6000602084013e611322565b606091505b5091509150611332828286611351565b92505050949350505050565b600080823b905060008111915050919050565b60608315611361578290506113b1565b6000835111156113745782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113a89190611c00565b60405180910390fd5b9392505050565b6000813590506113c781611f6f565b92915050565b6000815190506113dc81611f86565b92915050565b6000813590506113f181611f9d565b92915050565b60008083601f84011261140d5761140c611e5a565b5b8235905067ffffffffffffffff81111561142a57611429611e55565b5b60208301915083600182028301111561144657611445611e5f565b5b9250929050565b60008151905061145c81611fb4565b92915050565b60008151905061147181611fcb565b92915050565b60008151905061148681611fe2565b92915050565b60008083601f8401126114a2576114a1611e5a565b5b8235905067ffffffffffffffff8111156114bf576114be611e55565b5b6020830191508360018202830111156114db576114da611e5f565b5b9250929050565b6000813590506114f181611ff9565b92915050565b60008151905061150681611ff9565b92915050565b60006020828403121561152257611521611e69565b5b6000611530848285016113cd565b91505092915050565b60006020828403121561154f5761154e611e69565b5b600061155d8482850161144d565b91505092915050565b60006020828403121561157c5761157b611e69565b5b600061158a84828501611462565b91505092915050565b6000602082840312156115a9576115a8611e69565b5b60006115b784828501611477565b91505092915050565b600080600080600080600060a0888a0312156115df576115de611e69565b5b600088013567ffffffffffffffff8111156115fd576115fc611e64565b5b6116098a828b0161148c565b9750975050602061161c8a828b016113b8565b955050604061162d8a828b016114e2565b945050606061163e8a828b016113e2565b935050608088013567ffffffffffffffff81111561165f5761165e611e64565b5b61166b8a828b016113f7565b925092505092959891949750929550565b600080600080600080600080600060a08a8c03121561169e5761169d611e69565b5b60008a013567ffffffffffffffff8111156116bc576116bb611e64565b5b6116c88c828d0161148c565b995099505060208a013567ffffffffffffffff8111156116eb576116ea611e64565b5b6116f78c828d0161148c565b975097505060408a013567ffffffffffffffff81111561171a57611719611e64565b5b6117268c828d0161148c565b955095505060608a013567ffffffffffffffff81111561174957611748611e64565b5b6117558c828d016113f7565b935093505060806117688c828d016114e2565b9150509295985092959850929598565b60008060008060006060868803121561179457611793611e69565b5b600086013567ffffffffffffffff8111156117b2576117b1611e64565b5b6117be8882890161148c565b9550955050602086013567ffffffffffffffff8111156117e1576117e0611e64565b5b6117ed8882890161148c565b93509350506040611800888289016114e2565b9150509295509295909350565b60006020828403121561182357611822611e69565b5b6000611831848285016114f7565b91505092915050565b61184381611d26565b82525050565b61185281611d44565b82525050565b60006118648385611c98565b9350611871838584611de4565b61187a83611e6e565b840190509392505050565b600061189082611c82565b61189a8185611ca9565b93506118aa818560208601611df3565b80840191505092915050565b6118bf81611dae565b82525050565b60006118d18385611cb4565b93506118de838584611de4565b6118e783611e6e565b840190509392505050565b60006118fe8385611cc5565b935061190b838584611de4565b82840190509392505050565b600061192282611c8d565b61192c8185611cb4565b935061193c818560208601611df3565b61194581611e6e565b840191505092915050565b600061195d602683611cb4565b915061196882611e7f565b604082019050919050565b6000611980601b83611cc5565b915061198b82611ece565b601b82019050919050565b60006119a3601d83611cb4565b91506119ae82611ef7565b602082019050919050565b60006119c6602a83611cb4565b91506119d182611f20565b604082019050919050565b6119e581611da4565b82525050565b60006119f78284611885565b915081905092915050565b6000611a0d82611973565b9150611a1a8284866118f2565b91508190509392505050565b6000604082019050611a3b600083018561183a565b611a48602083018461183a565b9392505050565b6000606082019050611a64600083018661183a565b611a71602083018561183a565b611a7e60408301846119dc565b949350505050565b6000604082019050611a9b600083018561183a565b611aa860208301846119dc565b9392505050565b6000608082019050611ac46000830188611849565b611ad160208301876119dc565b611ade6040830186611849565b8181036060830152611af1818486611858565b90509695505050505050565b6000602082019050611b1260008301846118b6565b92915050565b60006020820190508181036000830152611b338184866118c5565b90509392505050565b60006040820190508181036000830152611b578185876118c5565b9050611b66602083018461183a565b949350505050565b60006080820190508181036000830152611b8981898b6118c5565b90508181036020830152611b9e8187896118c5565b90508181036040830152611bb3818587611858565b9050611bc260608301846119dc565b98975050505050505050565b60006040820190508181036000830152611be98185876118c5565b9050611bf860208301846119dc565b949350505050565b60006020820190508181036000830152611c1a8184611917565b905092915050565b60006020820190508181036000830152611c3b81611950565b9050919050565b60006020820190508181036000830152611c5b81611996565b9050919050565b60006020820190508181036000830152611c7b816119b9565b9050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000611cdb82611da4565b9150611ce683611da4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611d1b57611d1a611e26565b5b828201905092915050565b6000611d3182611d84565b9050919050565b60008115159050919050565b6000819050919050565b6000611d5982611d26565b9050919050565b6000611d6b82611d26565b9050919050565b6000611d7d82611d26565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611db982611dc0565b9050919050565b6000611dcb82611dd2565b9050919050565b6000611ddd82611d84565b9050919050565b82818337600083830152505050565b60005b83811015611e11578082015181840152602081019050611df6565b83811115611e20576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f42617369634272696467653a20756e6b6e6f776e206173736574200000000000600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b611f7881611d26565b8114611f8357600080fd5b50565b611f8f81611d38565b8114611f9a57600080fd5b50565b611fa681611d44565b8114611fb157600080fd5b50565b611fbd81611d4e565b8114611fc857600080fd5b50565b611fd481611d60565b8114611fdf57600080fd5b50565b611feb81611d72565b8114611ff657600080fd5b50565b61200281611da4565b811461200d57600080fd5b5056fea264697066735822122004a20586e0d4a749dbadc60eacd5e08c074e9bc596987a2572959baf9ed9ce2664736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6715,
        "contract": "src/BasicBridge.sol:BasicBridge",
        "label": "registry",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IGatewayRegistry)8859"
      }
    ],
    "types": {
      "t_contract(IGatewayRegistry)8859": {
        "encoding": "inplace",
        "label": "contract IGatewayRegistry",
        "numberOfBytes": "20"
      }
    }
  }
}