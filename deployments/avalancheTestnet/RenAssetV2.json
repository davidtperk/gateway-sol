{
  "address": "0x0fC247b5Ba573f71e3530dB01E0456771e6593c6",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_version",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "name": "__ERC20WithPermit_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainId_",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "version_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "decimals_",
          "type": "uint8"
        }
      ],
      "name": "__RenAsset_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x13a633ebc8e44aeeee151ba91771ed4ba7f095b44b86f555d1c60497e548c24f",
  "receipt": {
    "to": "0x2222229fb3318A6375FA78fd299A9a42aC6A8fbF",
    "from": "0xD5B5b26521665Cb37623DCA0E49c553b41dbF076",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "3316538",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x261ab6b85b01e01cf6a8c048cc378a02f69783b939afb9a595634a05d7a5606b",
    "transactionHash": "0x13a633ebc8e44aeeee151ba91771ed4ba7f095b44b86f555d1c60497e548c24f",
    "logs": [],
    "blockNumber": 1063938,
    "cumulativeGasUsed": "3337538",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "cd16daf0061bcc045fc96aa81722133b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_version\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"__ERC20WithPermit_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"version_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"}],\"name\":\"__RenAsset_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(address,uint256)\":{\"notice\":\"burn can only be called by the tokens' associated Gateway contract. See Gateway's burn functions instead.\"},\"mint(address,uint256)\":{\"notice\":\"mint can only be called by the tokens' associated Gateway contract. See Gateway's mint function instead.\"}},\"notice\":\"RenERC20 represents a digital asset that has been bridged on to the Ethereum ledger. It exposes mint and burn functions that can only be called by it's associated Gateway contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/RenAsset/RenAsset.sol\":\"RenAssetV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x891fbf39ac5b9524f417db912d33684f239195a0fc5c11db439659676e51aab6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf449ca0a763d4b1b4462cf8706857074492f324020a2b9d099181b5383055ad3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x6795c369a4eefa78468e38966f7851fbc2dda5e5b9ccd3fa2b45970e2e4d3abd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"src/RenAsset/ERC20WithPermit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport {ERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract ERC20WithPermitState {\\n    mapping(address => uint256) public nonces;\\n\\n    // If the token is redeployed, the version is increased to prevent a permit\\n    // signature being used on both token instances.\\n    string public version;\\n\\n    // --- EIP712 niceties ---\\n    bytes32 public DOMAIN_SEPARATOR;\\n    // PERMIT_TYPEHASH is the value returned from\\n    // keccak256(\\\"Permit(address holder,address spender,uint256 nonce,uint256 expiry,bool allowed)\\\")\\n    bytes32 public constant PERMIT_TYPEHASH = 0xea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb;\\n\\n    uint256[48] private __gap;\\n}\\n\\n/// @notice Taken from the DAI token.\\ncontract ERC20WithPermit is Initializable, ERC20Upgradeable, ERC20WithPermitState {\\n    function __ERC20WithPermit_init(\\n        uint256 _chainId,\\n        string memory _version,\\n        string memory _name,\\n        string memory _symbol\\n    ) public initializer {\\n        __ERC20_init(_name, _symbol);\\n        version = _version;\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                keccak256(bytes(name())),\\n                keccak256(bytes(version)),\\n                _chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    // --- Approve by signature ---\\n    function permit(\\n        address holder,\\n        address spender,\\n        uint256 nonce,\\n        uint256 expiry,\\n        bool allowed,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR,\\n                keccak256(abi.encode(PERMIT_TYPEHASH, holder, spender, nonce, expiry, allowed))\\n            )\\n        );\\n\\n        require(holder != address(0), \\\"ERC20WithRate: address must not be 0x0\\\");\\n        require(holder == ecrecover(digest, v, r, s), \\\"ERC20WithRate: invalid signature\\\");\\n        require(expiry == 0 || block.timestamp <= expiry, \\\"ERC20WithRate: permit has expired\\\");\\n        require(nonce == nonces[holder]++, \\\"ERC20WithRate: invalid nonce\\\");\\n        uint256 amount = allowed ? uint256(int256(-1)) : 0;\\n        _approve(holder, spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x239a01febb82bdc95dc02dc06b2f8e18a560a78404e65c19f4ad50ede01e9244\",\"license\":\"GPL-3.0\"},\"src/RenAsset/RenAsset.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {ERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport {StringsUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\n\\nimport {ERC20WithPermit} from \\\"./ERC20WithPermit.sol\\\";\\n\\nimport \\\"./ERC20WithPermit.sol\\\";\\n\\ncontract RenAssetStateV2 {\\n    string public constant NAME = \\\"RenAsset\\\";\\n\\n    uint8 internal _decimals;\\n\\n    uint256[48] private __gap;\\n}\\n\\n/// @notice RenERC20 represents a digital asset that has been bridged on to\\n/// the Ethereum ledger. It exposes mint and burn functions that can only be\\n/// called by it's associated Gateway contract.\\ncontract RenAssetV2 is Initializable, ERC20Upgradeable, ERC20WithPermit, OwnableUpgradeable, RenAssetStateV2 {\\n    /* solium-disable-next-line no-empty-blocks */\\n    function __RenAsset_init(\\n        uint256 chainId_,\\n        string memory version_,\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) public initializer {\\n        ERC20Upgradeable.__ERC20_init(name_, symbol_);\\n        ERC20WithPermit.__ERC20WithPermit_init(chainId_, version_, name_, symbol_);\\n        OwnableUpgradeable.__Ownable_init();\\n        RenAssetStateV2._decimals = decimals_;\\n    }\\n\\n    function decimals() public view override returns (uint8) {\\n        return RenAssetStateV2._decimals;\\n    }\\n\\n    /// @notice mint can only be called by the tokens' associated Gateway\\n    /// contract. See Gateway's mint function instead.\\n    function mint(address _to, uint256 _amount) public onlyOwner {\\n        _mint(_to, _amount);\\n    }\\n\\n    /// @notice burn can only be called by the tokens' associated Gateway\\n    /// contract. See Gateway's burn functions instead.\\n    function burn(address _from, uint256 _amount) public onlyOwner {\\n        _burn(_from, _amount);\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        // Disallow sending tokens to the ERC20 contract address - a common\\n        // mistake caused by the Ethereum transaction's `to` needing to be\\n        // the token's address.\\n        require(recipient != address(this), \\\"RenERC20: can't transfer to token address\\\");\\n        require(\\n            balanceOf(_msgSender()) >= amount,\\n            string(\\n                abi.encodePacked(\\n                    \\\"ERC20: transfer from \\\",\\n                    StringsUpgradeable.toHexString(uint160(_msgSender()), 20),\\n                    \\\" amount exceeds allowance\\\"\\n                )\\n            )\\n        );\\n        return super.transfer(recipient, amount);\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        // Disallow sending tokens to the ERC20 contract address (see comment\\n        // in `transfer`).\\n        require(recipient != address(this), \\\"RenERC20: can't transfer to token address\\\");\\n        return super.transferFrom(sender, recipient, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x548d852eba06ae9d4730c0d2d52969685541f4201d6fd840cc4bd2553d5a8627\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613b3d806100206000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c8063715018a6116100c3578063a3f4df7e1161007c578063a3f4df7e146103b7578063a457c2d7146103d5578063a9059cbb14610405578063b1a64a2d14610435578063dd62ed3e14610451578063f2fde38b1461048157610158565b8063715018a6146103095780637ecebe00146103135780638da5cb5b146103435780638fcbaf0c1461036157806395d89b411461037d5780639dc29fac1461039b57610158565b80633644e515116101155780633644e51514610235578063395093511461025357806340c10f19146102835780634c0db74e1461029f57806354fd4d50146102bb57806370a08231146102d957610158565b806306fdde031461015d578063095ea7b31461017b57806318160ddd146101ab57806323b872dd146101c957806330adf81f146101f9578063313ce56714610217575b600080fd5b61016561049d565b6040516101729190612e5f565b60405180910390f35b61019560048036038101906101909190612683565b61052f565b6040516101a29190612d30565b60405180910390f35b6101b361054d565b6040516101c091906130e1565b60405180910390f35b6101e360048036038101906101de919061257a565b610557565b6040516101f09190612d30565b60405180910390f35b6102016105dc565b60405161020e9190612d4b565b60405180910390f35b61021f610603565b60405161022c91906130fc565b60405180910390f35b61023d61061a565b60405161024a9190612d4b565b60405180910390f35b61026d60048036038101906102689190612683565b610620565b60405161027a9190612d30565b60405180910390f35b61029d60048036038101906102989190612683565b6106cc565b005b6102b960048036038101906102b491906126c3565b610756565b005b6102c36108cd565b6040516102d09190612e5f565b60405180910390f35b6102f360048036038101906102ee919061250d565b61095b565b60405161030091906130e1565b60405180910390f35b6103116109a4565b005b61032d6004803603810190610328919061250d565b610a2c565b60405161033a91906130e1565b60405180910390f35b61034b610a44565b6040516103589190612d15565b60405180910390f35b61037b600480360381019061037691906125cd565b610a6e565b005b610385610d48565b6040516103929190612e5f565b60405180910390f35b6103b560048036038101906103b09190612683565b610dda565b005b6103bf610e64565b6040516103cc9190612e5f565b60405180910390f35b6103ef60048036038101906103ea9190612683565b610e9d565b6040516103fc9190612d30565b60405180910390f35b61041f600480360381019061041a9190612683565b610f88565b60405161042c9190612d30565b60405180910390f35b61044f600480360381019061044a919061277e565b6110a7565b005b61046b6004803603810190610466919061253a565b6111be565b60405161047891906130e1565b60405180910390f35b61049b6004803603810190610496919061250d565b611245565b005b6060603680546104ac90613363565b80601f01602080910402602001604051908101604052809291908181526020018280546104d890613363565b80156105255780601f106104fa57610100808354040283529160200191610525565b820191906000526020600020905b81548152906001019060200180831161050857829003601f168201915b5050505050905090565b600061054361053c61133d565b8484611345565b6001905092915050565b6000603554905090565b60003073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156105c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105bf90613041565b60405180910390fd5b6105d3848484611510565b90509392505050565b7fea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb60001b81565b600060ca60009054906101000a900460ff16905090565b60675481565b60006106c261062d61133d565b84846034600061063b61133d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546106bd91906131b4565b611345565b6001905092915050565b6106d461133d565b73ffffffffffffffffffffffffffffffffffffffff166106f2610a44565b73ffffffffffffffffffffffffffffffffffffffff1614610748576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073f90612fe1565b60405180910390fd5b6107528282611608565b5050565b600060019054906101000a900460ff168061077c575060008054906101000a900460ff16155b6107bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b290612fa1565b60405180910390fd5b60008060019054906101000a900460ff16159050801561080b576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6108158383611769565b836066908051906020019061082b929190612391565b507f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f61085561049d565b80519060200120606660405161086b9190612c9a565b60405180910390208730604051602001610889959493929190612dc7565b6040516020818303038152906040528051906020012060678190555080156108c65760008060016101000a81548160ff0219169083151502179055505b5050505050565b606680546108da90613363565b80601f016020809104026020016040519081016040528092919081815260200182805461090690613363565b80156109535780601f1061092857610100808354040283529160200191610953565b820191906000526020600020905b81548152906001019060200180831161093657829003601f168201915b505050505081565b6000603360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6109ac61133d565b73ffffffffffffffffffffffffffffffffffffffff166109ca610a44565b73ffffffffffffffffffffffffffffffffffffffff1614610a20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1790612fe1565b60405180910390fd5b610a2a6000611856565b565b60656020528060005260406000206000915090505481565b6000609860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006067547fea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb60001b8a8a8a8a8a604051602001610ab196959493929190612d66565b60405160208183030381529060405280519060200120604051602001610ad8929190612cb1565b604051602081830303815290604052805190602001209050600073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161415610b60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b57906130a1565b60405180910390fd5b60018185858560405160008152602001604052604051610b839493929190612e1a565b6020604051602081039080840390855afa158015610ba5573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614610c1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1390612f41565b60405180910390fd5b6000861480610c2b5750854211155b610c6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6190612f81565b60405180910390fd5b606560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190610cba906133c6565b919050558714610cff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf690612e81565b60405180910390fd5b600085610d0d576000610d2f565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b9050610d3c8a8a83611345565b50505050505050505050565b606060378054610d5790613363565b80601f0160208091040260200160405190810160405280929190818152602001828054610d8390613363565b8015610dd05780601f10610da557610100808354040283529160200191610dd0565b820191906000526020600020905b815481529060010190602001808311610db357829003601f168201915b5050505050905090565b610de261133d565b73ffffffffffffffffffffffffffffffffffffffff16610e00610a44565b73ffffffffffffffffffffffffffffffffffffffff1614610e56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4d90612fe1565b60405180910390fd5b610e60828261191c565b5050565b6040518060400160405280600881526020017f52656e417373657400000000000000000000000000000000000000000000000081525081565b60008060346000610eac61133d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610f69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6090613081565b60405180910390fd5b610f7d610f7461133d565b85858403611345565b600191505092915050565b60003073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610ff9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff090613041565b60405180910390fd5b8161100a61100561133d565b61095b565b101561103461101761133d565b73ffffffffffffffffffffffffffffffffffffffff166014611af5565b6040516020016110449190612ce8565b60405160208183030381529060405290611094576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108b9190612e5f565b60405180910390fd5b5061109f8383611d31565b905092915050565b600060019054906101000a900460ff16806110cd575060008054906101000a900460ff16155b61110c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110390612fa1565b60405180910390fd5b60008060019054906101000a900460ff16159050801561115c576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6111668484611769565b61117286868686610756565b61117a611d4f565b8160ca60006101000a81548160ff021916908360ff16021790555080156111b65760008060016101000a81548160ff0219169083151502179055505b505050505050565b6000603460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b61124d61133d565b73ffffffffffffffffffffffffffffffffffffffff1661126b610a44565b73ffffffffffffffffffffffffffffffffffffffff16146112c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112b890612fe1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611331576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132890612f01565b60405180910390fd5b61133a81611856565b50565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156113b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ac90613061565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611425576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141c90612f21565b60405180910390fd5b80603460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161150391906130e1565b60405180910390a3505050565b600061151d848484611e38565b6000603460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600061156861133d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828110156115e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115df90612fc1565b60405180910390fd5b6115fc856115f461133d565b858403611345565b60019150509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611678576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166f906130c1565b60405180910390fd5b611684600083836120bc565b806035600082825461169691906131b4565b9250508190555080603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546116ec91906131b4565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161175191906130e1565b60405180910390a3611765600083836120c1565b5050565b600060019054906101000a900460ff168061178f575060008054906101000a900460ff16155b6117ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117c590612fa1565b60405180910390fd5b60008060019054906101000a900460ff16159050801561181e576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6118266120c6565b611830838361219f565b80156118515760008060016101000a81548160ff0219169083151502179055505b505050565b6000609860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081609860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561198c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161198390613001565b60405180910390fd5b611998826000836120bc565b6000603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611a1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a1690612ee1565b60405180910390fd5b818103603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160356000828254611a779190613264565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611adc91906130e1565b60405180910390a3611af0836000846120c1565b505050565b606060006002836002611b08919061320a565b611b1291906131b4565b67ffffffffffffffff811115611b2b57611b2a6134a6565b5b6040519080825280601f01601f191660200182016040528015611b5d5781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611b9557611b94613477565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611bf957611bf8613477565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002611c39919061320a565b611c4391906131b4565b90505b6001811115611ce3577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110611c8557611c84613477565b5b1a60f81b828281518110611c9c57611c9b613477565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080611cdc90613339565b9050611c46565b5060008414611d27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d1e90612ea1565b60405180910390fd5b8091505092915050565b6000611d45611d3e61133d565b8484611e38565b6001905092915050565b600060019054906101000a900460ff1680611d75575060008054906101000a900460ff16155b611db4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dab90612fa1565b60405180910390fd5b60008060019054906101000a900460ff161590508015611e04576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b611e0c6120c6565b611e146122a8565b8015611e355760008060016101000a81548160ff0219169083151502179055505b50565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611ea8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e9f90613021565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611f18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f0f90612ec1565b60405180910390fd5b611f238383836120bc565b6000603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611faa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fa190612f61565b60405180910390fd5b818103603360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461203f91906131b4565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516120a391906130e1565b60405180910390a36120b68484846120c1565b50505050565b505050565b505050565b600060019054906101000a900460ff16806120ec575060008054906101000a900460ff16155b61212b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161212290612fa1565b60405180910390fd5b60008060019054906101000a900460ff16159050801561217b576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b801561219c5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff16806121c5575060008054906101000a900460ff16155b612204576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121fb90612fa1565b60405180910390fd5b60008060019054906101000a900460ff161590508015612254576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b826036908051906020019061226a929190612391565b508160379080519060200190612281929190612391565b5080156122a35760008060016101000a81548160ff0219169083151502179055505b505050565b600060019054906101000a900460ff16806122ce575060008054906101000a900460ff16155b61230d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161230490612fa1565b60405180910390fd5b60008060019054906101000a900460ff16159050801561235d576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61236d61236861133d565b611856565b801561238e5760008060016101000a81548160ff0219169083151502179055505b50565b82805461239d90613363565b90600052602060002090601f0160209004810192826123bf5760008555612406565b82601f106123d857805160ff1916838001178555612406565b82800160010185558215612406579182015b828111156124055782518255916020019190600101906123ea565b5b5090506124139190612417565b5090565b5b80821115612430576000816000905550600101612418565b5090565b60006124476124428461313c565b613117565b905082815260208101848484011115612463576124626134da565b5b61246e8482856132f7565b509392505050565b60008135905061248581613a94565b92915050565b60008135905061249a81613aab565b92915050565b6000813590506124af81613ac2565b92915050565b600082601f8301126124ca576124c96134d5565b5b81356124da848260208601612434565b91505092915050565b6000813590506124f281613ad9565b92915050565b60008135905061250781613af0565b92915050565b600060208284031215612523576125226134e4565b5b600061253184828501612476565b91505092915050565b60008060408385031215612551576125506134e4565b5b600061255f85828601612476565b925050602061257085828601612476565b9150509250929050565b600080600060608486031215612593576125926134e4565b5b60006125a186828701612476565b93505060206125b286828701612476565b92505060406125c3868287016124e3565b9150509250925092565b600080600080600080600080610100898b0312156125ee576125ed6134e4565b5b60006125fc8b828c01612476565b985050602061260d8b828c01612476565b975050604061261e8b828c016124e3565b965050606061262f8b828c016124e3565b95505060806126408b828c0161248b565b94505060a06126518b828c016124f8565b93505060c06126628b828c016124a0565b92505060e06126738b828c016124a0565b9150509295985092959890939650565b6000806040838503121561269a576126996134e4565b5b60006126a885828601612476565b92505060206126b9858286016124e3565b9150509250929050565b600080600080608085870312156126dd576126dc6134e4565b5b60006126eb878288016124e3565b945050602085013567ffffffffffffffff81111561270c5761270b6134df565b5b612718878288016124b5565b935050604085013567ffffffffffffffff811115612739576127386134df565b5b612745878288016124b5565b925050606085013567ffffffffffffffff811115612766576127656134df565b5b612772878288016124b5565b91505092959194509250565b600080600080600060a0868803121561279a576127996134e4565b5b60006127a8888289016124e3565b955050602086013567ffffffffffffffff8111156127c9576127c86134df565b5b6127d5888289016124b5565b945050604086013567ffffffffffffffff8111156127f6576127f56134df565b5b612802888289016124b5565b935050606086013567ffffffffffffffff811115612823576128226134df565b5b61282f888289016124b5565b9250506080612840888289016124f8565b9150509295509295909350565b61285681613298565b82525050565b612865816132aa565b82525050565b612874816132b6565b82525050565b61288b612886826132b6565b61340f565b82525050565b6000815461289e81613363565b6128a8818661318d565b945060018216600081146128c357600181146128d457612907565b60ff19831686528186019350612907565b6128dd8561316d565b60005b838110156128ff578154818901526001820191506020810190506128e0565b838801955050505b50505092915050565b600061291b82613182565b6129258185613198565b9350612935818560208601613306565b61293e816134e9565b840191505092915050565b600061295482613182565b61295e81856131a9565b935061296e818560208601613306565b80840191505092915050565b6000612987601c83613198565b9150612992826134fa565b602082019050919050565b60006129aa602083613198565b91506129b582613523565b602082019050919050565b60006129cd6019836131a9565b91506129d88261354c565b601982019050919050565b60006129f0602383613198565b91506129fb82613575565b604082019050919050565b6000612a13602283613198565b9150612a1e826135c4565b604082019050919050565b6000612a36602683613198565b9150612a4182613613565b604082019050919050565b6000612a59602283613198565b9150612a6482613662565b604082019050919050565b6000612a7c6002836131a9565b9150612a87826136b1565b600282019050919050565b6000612a9f602083613198565b9150612aaa826136da565b602082019050919050565b6000612ac2602683613198565b9150612acd82613703565b604082019050919050565b6000612ae5602183613198565b9150612af082613752565b604082019050919050565b6000612b08602e83613198565b9150612b13826137a1565b604082019050919050565b6000612b2b602883613198565b9150612b36826137f0565b604082019050919050565b6000612b4e602083613198565b9150612b598261383f565b602082019050919050565b6000612b71602183613198565b9150612b7c82613868565b604082019050919050565b6000612b946015836131a9565b9150612b9f826138b7565b601582019050919050565b6000612bb7602583613198565b9150612bc2826138e0565b604082019050919050565b6000612bda602983613198565b9150612be58261392f565b604082019050919050565b6000612bfd602483613198565b9150612c088261397e565b604082019050919050565b6000612c20602583613198565b9150612c2b826139cd565b604082019050919050565b6000612c43602683613198565b9150612c4e82613a1c565b604082019050919050565b6000612c66601f83613198565b9150612c7182613a6b565b602082019050919050565b612c85816132e0565b82525050565b612c94816132ea565b82525050565b6000612ca68284612891565b915081905092915050565b6000612cbc82612a6f565b9150612cc8828561287a565b602082019150612cd8828461287a565b6020820191508190509392505050565b6000612cf382612b87565b9150612cff8284612949565b9150612d0a826129c0565b915081905092915050565b6000602082019050612d2a600083018461284d565b92915050565b6000602082019050612d45600083018461285c565b92915050565b6000602082019050612d60600083018461286b565b92915050565b600060c082019050612d7b600083018961286b565b612d88602083018861284d565b612d95604083018761284d565b612da26060830186612c7c565b612daf6080830185612c7c565b612dbc60a083018461285c565b979650505050505050565b600060a082019050612ddc600083018861286b565b612de9602083018761286b565b612df6604083018661286b565b612e036060830185612c7c565b612e10608083018461284d565b9695505050505050565b6000608082019050612e2f600083018761286b565b612e3c6020830186612c8b565b612e49604083018561286b565b612e56606083018461286b565b95945050505050565b60006020820190508181036000830152612e798184612910565b905092915050565b60006020820190508181036000830152612e9a8161297a565b9050919050565b60006020820190508181036000830152612eba8161299d565b9050919050565b60006020820190508181036000830152612eda816129e3565b9050919050565b60006020820190508181036000830152612efa81612a06565b9050919050565b60006020820190508181036000830152612f1a81612a29565b9050919050565b60006020820190508181036000830152612f3a81612a4c565b9050919050565b60006020820190508181036000830152612f5a81612a92565b9050919050565b60006020820190508181036000830152612f7a81612ab5565b9050919050565b60006020820190508181036000830152612f9a81612ad8565b9050919050565b60006020820190508181036000830152612fba81612afb565b9050919050565b60006020820190508181036000830152612fda81612b1e565b9050919050565b60006020820190508181036000830152612ffa81612b41565b9050919050565b6000602082019050818103600083015261301a81612b64565b9050919050565b6000602082019050818103600083015261303a81612baa565b9050919050565b6000602082019050818103600083015261305a81612bcd565b9050919050565b6000602082019050818103600083015261307a81612bf0565b9050919050565b6000602082019050818103600083015261309a81612c13565b9050919050565b600060208201905081810360008301526130ba81612c36565b9050919050565b600060208201905081810360008301526130da81612c59565b9050919050565b60006020820190506130f66000830184612c7c565b92915050565b60006020820190506131116000830184612c8b565b92915050565b6000613121613132565b905061312d8282613395565b919050565b6000604051905090565b600067ffffffffffffffff821115613157576131566134a6565b5b613160826134e9565b9050602081019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006131bf826132e0565b91506131ca836132e0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156131ff576131fe613419565b5b828201905092915050565b6000613215826132e0565b9150613220836132e0565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561325957613258613419565b5b828202905092915050565b600061326f826132e0565b915061327a836132e0565b92508282101561328d5761328c613419565b5b828203905092915050565b60006132a3826132c0565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015613324578082015181840152602081019050613309565b83811115613333576000848401525b50505050565b6000613344826132e0565b9150600082141561335857613357613419565b5b600182039050919050565b6000600282049050600182168061337b57607f821691505b6020821081141561338f5761338e613448565b5b50919050565b61339e826134e9565b810181811067ffffffffffffffff821117156133bd576133bc6134a6565b5b80604052505050565b60006133d1826132e0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561340457613403613419565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f455243323057697468526174653a20696e76616c6964206e6f6e636500000000600082015250565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f20616d6f756e74206578636565647320616c6c6f77616e636500000000000000600082015250565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b7f455243323057697468526174653a20696e76616c6964207369676e6174757265600082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f455243323057697468526174653a207065726d6974206861732065787069726560008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206160008201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d200000000000000000000000600082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f52656e45524332303a2063616e2774207472616e7366657220746f20746f6b6560008201527f6e20616464726573730000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b7f455243323057697468526174653a2061646472657373206d757374206e6f742060008201527f6265203078300000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b613a9d81613298565b8114613aa857600080fd5b50565b613ab4816132aa565b8114613abf57600080fd5b50565b613acb816132b6565b8114613ad657600080fd5b50565b613ae2816132e0565b8114613aed57600080fd5b50565b613af9816132ea565b8114613b0457600080fd5b5056fea2646970667358221220b4468342251bf29d1900817bafa4814d6e049f6312f565a4c1e94b6ab953112264736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101585760003560e01c8063715018a6116100c3578063a3f4df7e1161007c578063a3f4df7e146103b7578063a457c2d7146103d5578063a9059cbb14610405578063b1a64a2d14610435578063dd62ed3e14610451578063f2fde38b1461048157610158565b8063715018a6146103095780637ecebe00146103135780638da5cb5b146103435780638fcbaf0c1461036157806395d89b411461037d5780639dc29fac1461039b57610158565b80633644e515116101155780633644e51514610235578063395093511461025357806340c10f19146102835780634c0db74e1461029f57806354fd4d50146102bb57806370a08231146102d957610158565b806306fdde031461015d578063095ea7b31461017b57806318160ddd146101ab57806323b872dd146101c957806330adf81f146101f9578063313ce56714610217575b600080fd5b61016561049d565b6040516101729190612e5f565b60405180910390f35b61019560048036038101906101909190612683565b61052f565b6040516101a29190612d30565b60405180910390f35b6101b361054d565b6040516101c091906130e1565b60405180910390f35b6101e360048036038101906101de919061257a565b610557565b6040516101f09190612d30565b60405180910390f35b6102016105dc565b60405161020e9190612d4b565b60405180910390f35b61021f610603565b60405161022c91906130fc565b60405180910390f35b61023d61061a565b60405161024a9190612d4b565b60405180910390f35b61026d60048036038101906102689190612683565b610620565b60405161027a9190612d30565b60405180910390f35b61029d60048036038101906102989190612683565b6106cc565b005b6102b960048036038101906102b491906126c3565b610756565b005b6102c36108cd565b6040516102d09190612e5f565b60405180910390f35b6102f360048036038101906102ee919061250d565b61095b565b60405161030091906130e1565b60405180910390f35b6103116109a4565b005b61032d6004803603810190610328919061250d565b610a2c565b60405161033a91906130e1565b60405180910390f35b61034b610a44565b6040516103589190612d15565b60405180910390f35b61037b600480360381019061037691906125cd565b610a6e565b005b610385610d48565b6040516103929190612e5f565b60405180910390f35b6103b560048036038101906103b09190612683565b610dda565b005b6103bf610e64565b6040516103cc9190612e5f565b60405180910390f35b6103ef60048036038101906103ea9190612683565b610e9d565b6040516103fc9190612d30565b60405180910390f35b61041f600480360381019061041a9190612683565b610f88565b60405161042c9190612d30565b60405180910390f35b61044f600480360381019061044a919061277e565b6110a7565b005b61046b6004803603810190610466919061253a565b6111be565b60405161047891906130e1565b60405180910390f35b61049b6004803603810190610496919061250d565b611245565b005b6060603680546104ac90613363565b80601f01602080910402602001604051908101604052809291908181526020018280546104d890613363565b80156105255780601f106104fa57610100808354040283529160200191610525565b820191906000526020600020905b81548152906001019060200180831161050857829003601f168201915b5050505050905090565b600061054361053c61133d565b8484611345565b6001905092915050565b6000603554905090565b60003073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156105c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105bf90613041565b60405180910390fd5b6105d3848484611510565b90509392505050565b7fea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb60001b81565b600060ca60009054906101000a900460ff16905090565b60675481565b60006106c261062d61133d565b84846034600061063b61133d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546106bd91906131b4565b611345565b6001905092915050565b6106d461133d565b73ffffffffffffffffffffffffffffffffffffffff166106f2610a44565b73ffffffffffffffffffffffffffffffffffffffff1614610748576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073f90612fe1565b60405180910390fd5b6107528282611608565b5050565b600060019054906101000a900460ff168061077c575060008054906101000a900460ff16155b6107bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b290612fa1565b60405180910390fd5b60008060019054906101000a900460ff16159050801561080b576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6108158383611769565b836066908051906020019061082b929190612391565b507f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f61085561049d565b80519060200120606660405161086b9190612c9a565b60405180910390208730604051602001610889959493929190612dc7565b6040516020818303038152906040528051906020012060678190555080156108c65760008060016101000a81548160ff0219169083151502179055505b5050505050565b606680546108da90613363565b80601f016020809104026020016040519081016040528092919081815260200182805461090690613363565b80156109535780601f1061092857610100808354040283529160200191610953565b820191906000526020600020905b81548152906001019060200180831161093657829003601f168201915b505050505081565b6000603360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6109ac61133d565b73ffffffffffffffffffffffffffffffffffffffff166109ca610a44565b73ffffffffffffffffffffffffffffffffffffffff1614610a20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1790612fe1565b60405180910390fd5b610a2a6000611856565b565b60656020528060005260406000206000915090505481565b6000609860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006067547fea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb60001b8a8a8a8a8a604051602001610ab196959493929190612d66565b60405160208183030381529060405280519060200120604051602001610ad8929190612cb1565b604051602081830303815290604052805190602001209050600073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161415610b60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b57906130a1565b60405180910390fd5b60018185858560405160008152602001604052604051610b839493929190612e1a565b6020604051602081039080840390855afa158015610ba5573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614610c1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1390612f41565b60405180910390fd5b6000861480610c2b5750854211155b610c6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6190612f81565b60405180910390fd5b606560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190610cba906133c6565b919050558714610cff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf690612e81565b60405180910390fd5b600085610d0d576000610d2f565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b9050610d3c8a8a83611345565b50505050505050505050565b606060378054610d5790613363565b80601f0160208091040260200160405190810160405280929190818152602001828054610d8390613363565b8015610dd05780601f10610da557610100808354040283529160200191610dd0565b820191906000526020600020905b815481529060010190602001808311610db357829003601f168201915b5050505050905090565b610de261133d565b73ffffffffffffffffffffffffffffffffffffffff16610e00610a44565b73ffffffffffffffffffffffffffffffffffffffff1614610e56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4d90612fe1565b60405180910390fd5b610e60828261191c565b5050565b6040518060400160405280600881526020017f52656e417373657400000000000000000000000000000000000000000000000081525081565b60008060346000610eac61133d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610f69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6090613081565b60405180910390fd5b610f7d610f7461133d565b85858403611345565b600191505092915050565b60003073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610ff9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff090613041565b60405180910390fd5b8161100a61100561133d565b61095b565b101561103461101761133d565b73ffffffffffffffffffffffffffffffffffffffff166014611af5565b6040516020016110449190612ce8565b60405160208183030381529060405290611094576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108b9190612e5f565b60405180910390fd5b5061109f8383611d31565b905092915050565b600060019054906101000a900460ff16806110cd575060008054906101000a900460ff16155b61110c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110390612fa1565b60405180910390fd5b60008060019054906101000a900460ff16159050801561115c576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6111668484611769565b61117286868686610756565b61117a611d4f565b8160ca60006101000a81548160ff021916908360ff16021790555080156111b65760008060016101000a81548160ff0219169083151502179055505b505050505050565b6000603460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b61124d61133d565b73ffffffffffffffffffffffffffffffffffffffff1661126b610a44565b73ffffffffffffffffffffffffffffffffffffffff16146112c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112b890612fe1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611331576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132890612f01565b60405180910390fd5b61133a81611856565b50565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156113b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ac90613061565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611425576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141c90612f21565b60405180910390fd5b80603460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161150391906130e1565b60405180910390a3505050565b600061151d848484611e38565b6000603460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600061156861133d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828110156115e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115df90612fc1565b60405180910390fd5b6115fc856115f461133d565b858403611345565b60019150509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611678576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166f906130c1565b60405180910390fd5b611684600083836120bc565b806035600082825461169691906131b4565b9250508190555080603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546116ec91906131b4565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161175191906130e1565b60405180910390a3611765600083836120c1565b5050565b600060019054906101000a900460ff168061178f575060008054906101000a900460ff16155b6117ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117c590612fa1565b60405180910390fd5b60008060019054906101000a900460ff16159050801561181e576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6118266120c6565b611830838361219f565b80156118515760008060016101000a81548160ff0219169083151502179055505b505050565b6000609860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081609860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561198c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161198390613001565b60405180910390fd5b611998826000836120bc565b6000603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611a1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a1690612ee1565b60405180910390fd5b818103603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160356000828254611a779190613264565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611adc91906130e1565b60405180910390a3611af0836000846120c1565b505050565b606060006002836002611b08919061320a565b611b1291906131b4565b67ffffffffffffffff811115611b2b57611b2a6134a6565b5b6040519080825280601f01601f191660200182016040528015611b5d5781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611b9557611b94613477565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611bf957611bf8613477565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002611c39919061320a565b611c4391906131b4565b90505b6001811115611ce3577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110611c8557611c84613477565b5b1a60f81b828281518110611c9c57611c9b613477565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080611cdc90613339565b9050611c46565b5060008414611d27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d1e90612ea1565b60405180910390fd5b8091505092915050565b6000611d45611d3e61133d565b8484611e38565b6001905092915050565b600060019054906101000a900460ff1680611d75575060008054906101000a900460ff16155b611db4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dab90612fa1565b60405180910390fd5b60008060019054906101000a900460ff161590508015611e04576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b611e0c6120c6565b611e146122a8565b8015611e355760008060016101000a81548160ff0219169083151502179055505b50565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611ea8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e9f90613021565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611f18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f0f90612ec1565b60405180910390fd5b611f238383836120bc565b6000603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611faa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fa190612f61565b60405180910390fd5b818103603360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461203f91906131b4565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516120a391906130e1565b60405180910390a36120b68484846120c1565b50505050565b505050565b505050565b600060019054906101000a900460ff16806120ec575060008054906101000a900460ff16155b61212b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161212290612fa1565b60405180910390fd5b60008060019054906101000a900460ff16159050801561217b576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b801561219c5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff16806121c5575060008054906101000a900460ff16155b612204576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121fb90612fa1565b60405180910390fd5b60008060019054906101000a900460ff161590508015612254576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b826036908051906020019061226a929190612391565b508160379080519060200190612281929190612391565b5080156122a35760008060016101000a81548160ff0219169083151502179055505b505050565b600060019054906101000a900460ff16806122ce575060008054906101000a900460ff16155b61230d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161230490612fa1565b60405180910390fd5b60008060019054906101000a900460ff16159050801561235d576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61236d61236861133d565b611856565b801561238e5760008060016101000a81548160ff0219169083151502179055505b50565b82805461239d90613363565b90600052602060002090601f0160209004810192826123bf5760008555612406565b82601f106123d857805160ff1916838001178555612406565b82800160010185558215612406579182015b828111156124055782518255916020019190600101906123ea565b5b5090506124139190612417565b5090565b5b80821115612430576000816000905550600101612418565b5090565b60006124476124428461313c565b613117565b905082815260208101848484011115612463576124626134da565b5b61246e8482856132f7565b509392505050565b60008135905061248581613a94565b92915050565b60008135905061249a81613aab565b92915050565b6000813590506124af81613ac2565b92915050565b600082601f8301126124ca576124c96134d5565b5b81356124da848260208601612434565b91505092915050565b6000813590506124f281613ad9565b92915050565b60008135905061250781613af0565b92915050565b600060208284031215612523576125226134e4565b5b600061253184828501612476565b91505092915050565b60008060408385031215612551576125506134e4565b5b600061255f85828601612476565b925050602061257085828601612476565b9150509250929050565b600080600060608486031215612593576125926134e4565b5b60006125a186828701612476565b93505060206125b286828701612476565b92505060406125c3868287016124e3565b9150509250925092565b600080600080600080600080610100898b0312156125ee576125ed6134e4565b5b60006125fc8b828c01612476565b985050602061260d8b828c01612476565b975050604061261e8b828c016124e3565b965050606061262f8b828c016124e3565b95505060806126408b828c0161248b565b94505060a06126518b828c016124f8565b93505060c06126628b828c016124a0565b92505060e06126738b828c016124a0565b9150509295985092959890939650565b6000806040838503121561269a576126996134e4565b5b60006126a885828601612476565b92505060206126b9858286016124e3565b9150509250929050565b600080600080608085870312156126dd576126dc6134e4565b5b60006126eb878288016124e3565b945050602085013567ffffffffffffffff81111561270c5761270b6134df565b5b612718878288016124b5565b935050604085013567ffffffffffffffff811115612739576127386134df565b5b612745878288016124b5565b925050606085013567ffffffffffffffff811115612766576127656134df565b5b612772878288016124b5565b91505092959194509250565b600080600080600060a0868803121561279a576127996134e4565b5b60006127a8888289016124e3565b955050602086013567ffffffffffffffff8111156127c9576127c86134df565b5b6127d5888289016124b5565b945050604086013567ffffffffffffffff8111156127f6576127f56134df565b5b612802888289016124b5565b935050606086013567ffffffffffffffff811115612823576128226134df565b5b61282f888289016124b5565b9250506080612840888289016124f8565b9150509295509295909350565b61285681613298565b82525050565b612865816132aa565b82525050565b612874816132b6565b82525050565b61288b612886826132b6565b61340f565b82525050565b6000815461289e81613363565b6128a8818661318d565b945060018216600081146128c357600181146128d457612907565b60ff19831686528186019350612907565b6128dd8561316d565b60005b838110156128ff578154818901526001820191506020810190506128e0565b838801955050505b50505092915050565b600061291b82613182565b6129258185613198565b9350612935818560208601613306565b61293e816134e9565b840191505092915050565b600061295482613182565b61295e81856131a9565b935061296e818560208601613306565b80840191505092915050565b6000612987601c83613198565b9150612992826134fa565b602082019050919050565b60006129aa602083613198565b91506129b582613523565b602082019050919050565b60006129cd6019836131a9565b91506129d88261354c565b601982019050919050565b60006129f0602383613198565b91506129fb82613575565b604082019050919050565b6000612a13602283613198565b9150612a1e826135c4565b604082019050919050565b6000612a36602683613198565b9150612a4182613613565b604082019050919050565b6000612a59602283613198565b9150612a6482613662565b604082019050919050565b6000612a7c6002836131a9565b9150612a87826136b1565b600282019050919050565b6000612a9f602083613198565b9150612aaa826136da565b602082019050919050565b6000612ac2602683613198565b9150612acd82613703565b604082019050919050565b6000612ae5602183613198565b9150612af082613752565b604082019050919050565b6000612b08602e83613198565b9150612b13826137a1565b604082019050919050565b6000612b2b602883613198565b9150612b36826137f0565b604082019050919050565b6000612b4e602083613198565b9150612b598261383f565b602082019050919050565b6000612b71602183613198565b9150612b7c82613868565b604082019050919050565b6000612b946015836131a9565b9150612b9f826138b7565b601582019050919050565b6000612bb7602583613198565b9150612bc2826138e0565b604082019050919050565b6000612bda602983613198565b9150612be58261392f565b604082019050919050565b6000612bfd602483613198565b9150612c088261397e565b604082019050919050565b6000612c20602583613198565b9150612c2b826139cd565b604082019050919050565b6000612c43602683613198565b9150612c4e82613a1c565b604082019050919050565b6000612c66601f83613198565b9150612c7182613a6b565b602082019050919050565b612c85816132e0565b82525050565b612c94816132ea565b82525050565b6000612ca68284612891565b915081905092915050565b6000612cbc82612a6f565b9150612cc8828561287a565b602082019150612cd8828461287a565b6020820191508190509392505050565b6000612cf382612b87565b9150612cff8284612949565b9150612d0a826129c0565b915081905092915050565b6000602082019050612d2a600083018461284d565b92915050565b6000602082019050612d45600083018461285c565b92915050565b6000602082019050612d60600083018461286b565b92915050565b600060c082019050612d7b600083018961286b565b612d88602083018861284d565b612d95604083018761284d565b612da26060830186612c7c565b612daf6080830185612c7c565b612dbc60a083018461285c565b979650505050505050565b600060a082019050612ddc600083018861286b565b612de9602083018761286b565b612df6604083018661286b565b612e036060830185612c7c565b612e10608083018461284d565b9695505050505050565b6000608082019050612e2f600083018761286b565b612e3c6020830186612c8b565b612e49604083018561286b565b612e56606083018461286b565b95945050505050565b60006020820190508181036000830152612e798184612910565b905092915050565b60006020820190508181036000830152612e9a8161297a565b9050919050565b60006020820190508181036000830152612eba8161299d565b9050919050565b60006020820190508181036000830152612eda816129e3565b9050919050565b60006020820190508181036000830152612efa81612a06565b9050919050565b60006020820190508181036000830152612f1a81612a29565b9050919050565b60006020820190508181036000830152612f3a81612a4c565b9050919050565b60006020820190508181036000830152612f5a81612a92565b9050919050565b60006020820190508181036000830152612f7a81612ab5565b9050919050565b60006020820190508181036000830152612f9a81612ad8565b9050919050565b60006020820190508181036000830152612fba81612afb565b9050919050565b60006020820190508181036000830152612fda81612b1e565b9050919050565b60006020820190508181036000830152612ffa81612b41565b9050919050565b6000602082019050818103600083015261301a81612b64565b9050919050565b6000602082019050818103600083015261303a81612baa565b9050919050565b6000602082019050818103600083015261305a81612bcd565b9050919050565b6000602082019050818103600083015261307a81612bf0565b9050919050565b6000602082019050818103600083015261309a81612c13565b9050919050565b600060208201905081810360008301526130ba81612c36565b9050919050565b600060208201905081810360008301526130da81612c59565b9050919050565b60006020820190506130f66000830184612c7c565b92915050565b60006020820190506131116000830184612c8b565b92915050565b6000613121613132565b905061312d8282613395565b919050565b6000604051905090565b600067ffffffffffffffff821115613157576131566134a6565b5b613160826134e9565b9050602081019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006131bf826132e0565b91506131ca836132e0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156131ff576131fe613419565b5b828201905092915050565b6000613215826132e0565b9150613220836132e0565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561325957613258613419565b5b828202905092915050565b600061326f826132e0565b915061327a836132e0565b92508282101561328d5761328c613419565b5b828203905092915050565b60006132a3826132c0565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015613324578082015181840152602081019050613309565b83811115613333576000848401525b50505050565b6000613344826132e0565b9150600082141561335857613357613419565b5b600182039050919050565b6000600282049050600182168061337b57607f821691505b6020821081141561338f5761338e613448565b5b50919050565b61339e826134e9565b810181811067ffffffffffffffff821117156133bd576133bc6134a6565b5b80604052505050565b60006133d1826132e0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561340457613403613419565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f455243323057697468526174653a20696e76616c6964206e6f6e636500000000600082015250565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f20616d6f756e74206578636565647320616c6c6f77616e636500000000000000600082015250565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b7f455243323057697468526174653a20696e76616c6964207369676e6174757265600082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f455243323057697468526174653a207065726d6974206861732065787069726560008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206160008201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d200000000000000000000000600082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f52656e45524332303a2063616e2774207472616e7366657220746f20746f6b6560008201527f6e20616464726573730000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b7f455243323057697468526174653a2061646472657373206d757374206e6f742060008201527f6265203078300000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b613a9d81613298565b8114613aa857600080fd5b50565b613ab4816132aa565b8114613abf57600080fd5b50565b613acb816132b6565b8114613ad657600080fd5b50565b613ae2816132e0565b8114613aed57600080fd5b50565b613af9816132ea565b8114613b0457600080fd5b5056fea2646970667358221220b4468342251bf29d1900817bafa4814d6e049f6312f565a4c1e94b6ab953112264736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "burn(address,uint256)": {
        "notice": "burn can only be called by the tokens' associated Gateway contract. See Gateway's burn functions instead."
      },
      "mint(address,uint256)": {
        "notice": "mint can only be called by the tokens' associated Gateway contract. See Gateway's mint function instead."
      }
    },
    "notice": "RenERC20 represents a digital asset that has been bridged on to the Ethereum ledger. It exposes mint and burn functions that can only be called by it's associated Gateway contract.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 773,
        "contract": "src/RenAsset/RenAsset.sol:RenAssetV2",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 776,
        "contract": "src/RenAsset/RenAsset.sol:RenAssetV2",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1994,
        "contract": "src/RenAsset/RenAsset.sol:RenAssetV2",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 945,
        "contract": "src/RenAsset/RenAsset.sol:RenAssetV2",
        "label": "_balances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 951,
        "contract": "src/RenAsset/RenAsset.sol:RenAssetV2",
        "label": "_allowances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 953,
        "contract": "src/RenAsset/RenAsset.sol:RenAssetV2",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 955,
        "contract": "src/RenAsset/RenAsset.sol:RenAssetV2",
        "label": "_name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 957,
        "contract": "src/RenAsset/RenAsset.sol:RenAssetV2",
        "label": "_symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 1498,
        "contract": "src/RenAsset/RenAsset.sol:RenAssetV2",
        "label": "__gap",
        "offset": 0,
        "slot": "56",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 9496,
        "contract": "src/RenAsset/RenAsset.sol:RenAssetV2",
        "label": "nonces",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9498,
        "contract": "src/RenAsset/RenAsset.sol:RenAssetV2",
        "label": "version",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 9500,
        "contract": "src/RenAsset/RenAsset.sol:RenAssetV2",
        "label": "DOMAIN_SEPARATOR",
        "offset": 0,
        "slot": "103",
        "type": "t_bytes32"
      },
      {
        "astId": 9507,
        "contract": "src/RenAsset/RenAsset.sol:RenAssetV2",
        "label": "__gap",
        "offset": 0,
        "slot": "104",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 653,
        "contract": "src/RenAsset/RenAsset.sol:RenAssetV2",
        "label": "_owner",
        "offset": 0,
        "slot": "152",
        "type": "t_address"
      },
      {
        "astId": 766,
        "contract": "src/RenAsset/RenAsset.sol:RenAssetV2",
        "label": "__gap",
        "offset": 0,
        "slot": "153",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 9690,
        "contract": "src/RenAsset/RenAsset.sol:RenAssetV2",
        "label": "_decimals",
        "offset": 0,
        "slot": "202",
        "type": "t_uint8"
      },
      {
        "astId": 9694,
        "contract": "src/RenAsset/RenAsset.sol:RenAssetV2",
        "label": "__gap",
        "offset": 0,
        "slot": "203",
        "type": "t_array(t_uint256)48_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)48_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}