diff --git a/node_modules/hardhat-deploy/dist/src/helpers.js b/node_modules/hardhat-deploy/dist/src/helpers.js
index 02ee9eb..e4daa0e 100644
--- a/node_modules/hardhat-deploy/dist/src/helpers.js
+++ b/node_modules/hardhat-deploy/dist/src/helpers.js
@@ -145,6 +145,15 @@ function linkLibraries(artifact, libraries) {
 function addHelpers(deploymentManager, partialExtension, network, getArtifact, saveDeployment, willSaveToDisk, onPendingTx, getGasPrice, log, print) {
     let provider;
     const availableAccounts = {};
+
+    const create2DeployerAddress = network.name === 'hardhat' ?
+        '0x4e59b44847b379578588920ca78fbf26c0b4956c' :
+        '0x2222229fb3318a6375fa78fd299a9a42ac6a8fbf';
+
+    const create2DeployerFunder = network.name === 'hardhat' ?
+        '0x3fab184622dc19b6109349b94811493bf2a45362' :
+        '0x90899d3cc800c0a9196aec83da43e46582cb7435';
+
     async function init() {
         if (!provider) {
             provider = new providers_1.Web3Provider(fixProvider(network.provider));
@@ -210,10 +219,9 @@ function addHelpers(deploymentManager, partialExtension, network, getArtifact, s
     }
     async function ensureCreate2DeployerReady(options) {
         const { address: from, ethersSigner, hardwareWallet, unknown, } = getFrom(options.from);
-        const create2DeployerAddress = '0x4e59b44847b379578588920ca78fbf26c0b4956c';
         const code = await provider.getCode(create2DeployerAddress);
         if (code === '0x') {
-            const senderAddress = '0x3fab184622dc19b6109349b94811493bf2a45362';
+            const senderAddress = create2DeployerFunder;
             const txRequest = {
                 to: senderAddress,
                 value: bignumber_1.BigNumber.from('10000000000000000').toHexString(),
@@ -238,6 +246,11 @@ function addHelpers(deploymentManager, partialExtension, network, getArtifact, s
             }
             ethTx = await onPendingTx(ethTx);
             await ethTx.wait();
+
+            if (network.name !== 'hardhat') {
+                throw new Error("Must deploy create2 Deployer Address manually.");
+            }
+
             if (options.log || hardwareWallet) {
                 print(`deploying create2 deployer contract (at ${create2DeployerAddress}) using deterministic deployment (https://github.com/Arachnid/deterministic-deployment-proxy)`);
                 if (hardwareWallet) {
@@ -374,7 +387,7 @@ function addHelpers(deploymentManager, partialExtension, network, getArtifact, s
         }
         else {
             return {
-                address: getCreate2Address('0x4e59b44847b379578588920ca78fbf26c0b4956c', options.salt
+                address: getCreate2Address(create2DeployerAddress, options.salt
                     ? (0, bytes_1.hexlify)((0, bytes_1.zeroPad)(options.salt, 32))
                     : '0x0000000000000000000000000000000000000000000000000000000000000000', unsignedTx.data),
                 deploy: () => deploy(name, Object.assign(Object.assign({}, options), { deterministicDeployment: options.salt || true })),
@@ -408,7 +421,6 @@ function addHelpers(deploymentManager, partialExtension, network, getArtifact, s
                 const create2Salt = typeof options.deterministicDeployment === 'string'
                     ? (0, bytes_1.hexlify)((0, bytes_1.zeroPad)(options.deterministicDeployment, 32))
                     : '0x0000000000000000000000000000000000000000000000000000000000000000';
-                const create2DeployerAddress = '0x4e59b44847b379578588920ca78fbf26c0b4956c';
                 const create2Address = getCreate2Address(create2DeployerAddress, create2Salt, unsignedTx.data);
                 const code = await provider.getCode(create2Address);
                 if (code === '0x') {
